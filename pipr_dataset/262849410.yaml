Resources:
  KittenC661DEEE:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: KittenId
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: KittenId
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      TableName: Kitten
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: ApigCrudStack/Kitten/Resource
  deletePolicy29E5B0C7:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: dynamodb:DeleteItem
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - KittenC661DEEE
                - Arn
        Version: "2012-10-17"
      PolicyName: deletePolicy29E5B0C7
      Roles:
        - Ref: deleteRole7BF4A48A
    Metadata:
      aws:cdk:path: ApigCrudStack/deletePolicy/Resource
  getPolicyC36434CE:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: dynamodb:GetItem
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - KittenC661DEEE
                - Arn
        Version: "2012-10-17"
      PolicyName: getPolicyC36434CE
      Roles:
        - Ref: getRoleEC20DC84
    Metadata:
      aws:cdk:path: ApigCrudStack/getPolicy/Resource
  putPolicy39B7208E:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: dynamodb:PutItem
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - KittenC661DEEE
                - Arn
        Version: "2012-10-17"
      PolicyName: putPolicy39B7208E
      Roles:
        - Ref: putRole5147F438
    Metadata:
      aws:cdk:path: ApigCrudStack/putPolicy/Resource
  scanPolicy9623BCA9:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: dynamodb:Scan
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - KittenC661DEEE
                - Arn
        Version: "2012-10-17"
      PolicyName: scanPolicy9623BCA9
      Roles:
        - Ref: scanRole26043BF1
    Metadata:
      aws:cdk:path: ApigCrudStack/scanPolicy/Resource
  deleteRole7BF4A48A:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: ApigCrudStack/deleteRole/Resource
  getRoleEC20DC84:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: ApigCrudStack/getRole/Resource
  putRole5147F438:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: ApigCrudStack/putRole/Resource
  scanRole26043BF1:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: ApigCrudStack/scanRole/Resource
  KittenApi1A9209F0:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: Kitten Service
    Metadata:
      aws:cdk:path: ApigCrudStack/KittenApi/Resource
  KittenApiCloudWatchRole59CD5A03:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
    Metadata:
      aws:cdk:path: ApigCrudStack/KittenApi/CloudWatchRole/Resource
  KittenApiAccount13FE73AC:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn:
        Fn::GetAtt:
          - KittenApiCloudWatchRole59CD5A03
          - Arn
    DependsOn:
      - KittenApi1A9209F0
    Metadata:
      aws:cdk:path: ApigCrudStack/KittenApi/Account
  KittenApiDeployment6D69F1A93fcb371db9e834eee1a8e19c3f99bc55:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:
        Ref: KittenApi1A9209F0
      Description: Automatically created by the RestApi construct
    DependsOn:
      - KittenApikittenidDELETE9A869CF2
      - KittenApikittenidGET6AFB1046
      - KittenApikittenidOPTIONS83CE03E1
      - KittenApikittenidPUT4BD49BA2
      - KittenApikittenid9EB4F3C7
      - KittenApikittenGETE3A67B97
      - KittenApikittenOPTIONS9CEF2D77
      - KittenApikittenPOST3EA9FDA2
      - KittenApikittenE9EC2A79
      - KittenApiOPTIONS7C9ACCC2
    Metadata:
      aws:cdk:path: ApigCrudStack/KittenApi/Deployment/Resource
  KittenApiDeploymentStageprod004C0AAD:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId:
        Ref: KittenApi1A9209F0
      DeploymentId:
        Ref: KittenApiDeployment6D69F1A93fcb371db9e834eee1a8e19c3f99bc55
      StageName: prod
    Metadata:
      aws:cdk:path: ApigCrudStack/KittenApi/DeploymentStage.prod/Resource
  KittenApiOPTIONS7C9ACCC2:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Fn::GetAtt:
          - KittenApi1A9209F0
          - RootResourceId
      RestApiId:
        Ref: KittenApi1A9209F0
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
    Metadata:
      aws:cdk:path: ApigCrudStack/KittenApi/Default/OPTIONS/Resource
  KittenApikittenE9EC2A79:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
          - KittenApi1A9209F0
          - RootResourceId
      PathPart: kitten
      RestApiId:
        Ref: KittenApi1A9209F0
    Metadata:
      aws:cdk:path: ApigCrudStack/KittenApi/Default/kitten/Resource
  KittenApikittenOPTIONS9CEF2D77:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: KittenApikittenE9EC2A79
      RestApiId:
        Ref: KittenApi1A9209F0
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
    Metadata:
      aws:cdk:path: ApigCrudStack/KittenApi/Default/kitten/OPTIONS/Resource
  KittenApikittenid9EB4F3C7:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: KittenApikittenE9EC2A79
      PathPart: "{id}"
      RestApiId:
        Ref: KittenApi1A9209F0
    Metadata:
      aws:cdk:path: ApigCrudStack/KittenApi/Default/kitten/{id}/Resource
  KittenApikittenidOPTIONS83CE03E1:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: KittenApikittenid9EB4F3C7
      RestApiId:
        Ref: KittenApi1A9209F0
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
    Metadata:
      aws:cdk:path: ApigCrudStack/KittenApi/Default/kitten/{id}/OPTIONS/Resource
  KittenApikittenidDELETE9A869CF2:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: DELETE
      ResourceId:
        Ref: KittenApikittenid9EB4F3C7
      RestApiId:
        Ref: KittenApi1A9209F0
      AuthorizationType: NONE
      Integration:
        Credentials:
          Fn::GetAtt:
            - deleteRole7BF4A48A
            - Arn
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: "200"
          - ResponseTemplates:
              application/json: |-
                {
                            "error": "Bad input!"
                          }
            SelectionPattern: "400"
            StatusCode: "400"
          - ResponseTemplates:
              application/json: |-
                {
                            "error": "Internal Service Error!"
                          }
            SelectionPattern: 5\d{2}
            StatusCode: "500"
        RequestTemplates:
          application/json: |-
            {
                          "Key": {
                            "KittenId": {
                              "S": "$method.request.path.id"
                            }
                          },
                          "TableName": "Kitten"
                        }
        Type: AWS
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - :dynamodb:action/DeleteItem
      MethodResponses:
        - StatusCode: "200"
        - StatusCode: "400"
        - StatusCode: "500"
    Metadata:
      aws:cdk:path: ApigCrudStack/KittenApi/Default/kitten/{id}/DELETE/Resource
  KittenApikittenidGET6AFB1046:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId:
        Ref: KittenApikittenid9EB4F3C7
      RestApiId:
        Ref: KittenApi1A9209F0
      AuthorizationType: NONE
      Integration:
        Credentials:
          Fn::GetAtt:
            - getRoleEC20DC84
            - Arn
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: "200"
          - ResponseTemplates:
              application/json: |-
                {
                            "error": "Bad input!"
                          }
            SelectionPattern: "400"
            StatusCode: "400"
          - ResponseTemplates:
              application/json: |-
                {
                            "error": "Internal Service Error!"
                          }
            SelectionPattern: 5\d{2}
            StatusCode: "500"
        RequestTemplates:
          application/json: |-
            {
                          "Key": {
                            "KittenId": {
                              "S": "$method.request.path.id"
                            }
                          },
                          "TableName": "Kitten"
                        }
        Type: AWS
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - :dynamodb:action/GetItem
      MethodResponses:
        - StatusCode: "200"
        - StatusCode: "400"
        - StatusCode: "500"
    Metadata:
      aws:cdk:path: ApigCrudStack/KittenApi/Default/kitten/{id}/GET/Resource
  KittenApikittenidPUT4BD49BA2:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: PUT
      ResourceId:
        Ref: KittenApikittenid9EB4F3C7
      RestApiId:
        Ref: KittenApi1A9209F0
      AuthorizationType: NONE
      Integration:
        Credentials:
          Fn::GetAtt:
            - putRole5147F438
            - Arn
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: "200"
          - ResponseTemplates:
              application/json: |-
                {
                            "error": "Bad input!"
                          }
            SelectionPattern: "400"
            StatusCode: "400"
          - ResponseTemplates:
              application/json: |-
                {
                            "error": "Internal Service Error!"
                          }
            SelectionPattern: 5\d{2}
            StatusCode: "500"
        RequestTemplates:
          application/json: |-
            {
                          "Item": {
                            "KittenId": {
                              "S": "$method.request.path.id"
                            },
                            "Name": {
                              "S": "$input.path('$.name')"
                            },
                            "Color": {
                              "S": "$input.path('$.color')"
                            }
                          },
                          "TableName": "Kitten"
                        }
        Type: AWS
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - :dynamodb:action/PutItem
      MethodResponses:
        - StatusCode: "200"
        - StatusCode: "400"
        - StatusCode: "500"
    Metadata:
      aws:cdk:path: ApigCrudStack/KittenApi/Default/kitten/{id}/PUT/Resource
  KittenApikittenGETE3A67B97:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId:
        Ref: KittenApikittenE9EC2A79
      RestApiId:
        Ref: KittenApi1A9209F0
      AuthorizationType: NONE
      Integration:
        Credentials:
          Fn::GetAtt:
            - scanRole26043BF1
            - Arn
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: "200"
          - ResponseTemplates:
              application/json: |-
                {
                            "error": "Bad input!"
                          }
            SelectionPattern: "400"
            StatusCode: "400"
          - ResponseTemplates:
              application/json: |-
                {
                            "error": "Internal Service Error!"
                          }
            SelectionPattern: 5\d{2}
            StatusCode: "500"
        RequestTemplates:
          application/json: |-
            {
                          "TableName": "Kitten"
                        }
        Type: AWS
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - :dynamodb:action/Scan
      MethodResponses:
        - StatusCode: "200"
        - StatusCode: "400"
        - StatusCode: "500"
    Metadata:
      aws:cdk:path: ApigCrudStack/KittenApi/Default/kitten/GET/Resource
  KittenApikittenPOST3EA9FDA2:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId:
        Ref: KittenApikittenE9EC2A79
      RestApiId:
        Ref: KittenApi1A9209F0
      AuthorizationType: NONE
      Integration:
        Credentials:
          Fn::GetAtt:
            - putRole5147F438
            - Arn
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - ResponseTemplates:
              application/json: |-
                {
                                "requestId": "$context.requestId"
                              }
            StatusCode: "200"
          - ResponseTemplates:
              application/json: |-
                {
                            "error": "Bad input!"
                          }
            SelectionPattern: "400"
            StatusCode: "400"
          - ResponseTemplates:
              application/json: |-
                {
                            "error": "Internal Service Error!"
                          }
            SelectionPattern: 5\d{2}
            StatusCode: "500"
        RequestTemplates:
          application/json: |-
            {
                          "Item": {
                            "KittenId": {
                              "S": "$context.requestId"
                            },
                            "Name": {
                              "S": "$input.path('$.name')"
                            },
                            "Color": {
                              "S": "$input.path('$.color')"
                            }
                          },
                          "TableName": "Kitten"
                        }
        Type: AWS
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - :dynamodb:action/PutItem
      MethodResponses:
        - StatusCode: "200"
        - StatusCode: "400"
        - StatusCode: "500"
    Metadata:
      aws:cdk:path: ApigCrudStack/KittenApi/Default/kitten/POST/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Modules: aws-cdk=2.113.0,@aws-cdk/assets=1.82.0,@aws-cdk/aws-apigateway=1.82.0,@aws-cdk/aws-applicationautoscaling=1.82.0,@aws-cdk/aws-autoscaling-common=1.82.0,@aws-cdk/aws-cloudwatch=1.82.0,@aws-cdk/aws-codeguruprofiler=1.82.0,@aws-cdk/aws-dynamodb=1.82.0,@aws-cdk/aws-ec2=1.82.0,@aws-cdk/aws-ecr=1.82.0,@aws-cdk/aws-ecr-assets=1.82.0,@aws-cdk/aws-events=1.82.0,@aws-cdk/aws-iam=1.82.0,@aws-cdk/aws-kms=1.82.0,@aws-cdk/aws-lambda=1.82.0,@aws-cdk/aws-logs=1.82.0,@aws-cdk/aws-s3=1.82.0,@aws-cdk/aws-s3-assets=1.82.0,@aws-cdk/aws-sqs=1.82.0,@aws-cdk/aws-ssm=1.82.0,@aws-cdk/cloud-assembly-schema=1.82.0,@aws-cdk/core=1.82.0,@aws-cdk/custom-resources=1.82.0,@aws-cdk/cx-api=1.82.0,@aws-cdk/region-info=1.82.0,jsii-runtime=node.js/v18.12.1
    Metadata:
      aws:cdk:path: ApigCrudStack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Outputs:
  KittenApiEndpointD6FCF0CB:
    Value:
      Fn::Join:
        - ""
        - - https://
          - Ref: KittenApi1A9209F0
          - .execute-api.
          - Ref: AWS::Region
          - "."
          - Ref: AWS::URLSuffix
          - /
          - Ref: KittenApiDeploymentStageprod004C0AAD
          - /
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2

