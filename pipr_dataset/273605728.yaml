Resources:
  VPCB9E5F0B4:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: LanguageTools/VPC
    Metadata:
      aws:cdk:path: LanguageTools/VPC/Resource
  VPCPublicSubnet1SubnetB4246D30:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/18
      VpcId:
        Ref: VPCB9E5F0B4
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: LanguageTools/VPC/PublicSubnet1
    Metadata:
      aws:cdk:path: LanguageTools/VPC/PublicSubnet1/Subnet
  VPCPublicSubnet1RouteTableFEE4B781:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      Tags:
        - Key: Name
          Value: LanguageTools/VPC/PublicSubnet1
    Metadata:
      aws:cdk:path: LanguageTools/VPC/PublicSubnet1/RouteTable
  VPCPublicSubnet1RouteTableAssociation0B0896DC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCPublicSubnet1RouteTableFEE4B781
      SubnetId:
        Ref: VPCPublicSubnet1SubnetB4246D30
    Metadata:
      aws:cdk:path: LanguageTools/VPC/PublicSubnet1/RouteTableAssociation
  VPCPublicSubnet1DefaultRoute91CEF279:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VPCPublicSubnet1RouteTableFEE4B781
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VPCIGWB7E252D3
    DependsOn:
      - VPCVPCGW99B986DC
    Metadata:
      aws:cdk:path: LanguageTools/VPC/PublicSubnet1/DefaultRoute
  VPCPublicSubnet1EIP6AD938E8:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: LanguageTools/VPC/PublicSubnet1
    Metadata:
      aws:cdk:path: LanguageTools/VPC/PublicSubnet1/EIP
  VPCPublicSubnet1NATGatewayE0556630:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - VPCPublicSubnet1EIP6AD938E8
          - AllocationId
      SubnetId:
        Ref: VPCPublicSubnet1SubnetB4246D30
      Tags:
        - Key: Name
          Value: LanguageTools/VPC/PublicSubnet1
    Metadata:
      aws:cdk:path: LanguageTools/VPC/PublicSubnet1/NATGateway
  VPCPublicSubnet2Subnet74179F39:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.64.0/18
      VpcId:
        Ref: VPCB9E5F0B4
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: LanguageTools/VPC/PublicSubnet2
    Metadata:
      aws:cdk:path: LanguageTools/VPC/PublicSubnet2/Subnet
  VPCPublicSubnet2RouteTable6F1A15F1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      Tags:
        - Key: Name
          Value: LanguageTools/VPC/PublicSubnet2
    Metadata:
      aws:cdk:path: LanguageTools/VPC/PublicSubnet2/RouteTable
  VPCPublicSubnet2RouteTableAssociation5A808732:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCPublicSubnet2RouteTable6F1A15F1
      SubnetId:
        Ref: VPCPublicSubnet2Subnet74179F39
    Metadata:
      aws:cdk:path: LanguageTools/VPC/PublicSubnet2/RouteTableAssociation
  VPCPublicSubnet2DefaultRouteB7481BBA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VPCPublicSubnet2RouteTable6F1A15F1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VPCIGWB7E252D3
    DependsOn:
      - VPCVPCGW99B986DC
    Metadata:
      aws:cdk:path: LanguageTools/VPC/PublicSubnet2/DefaultRoute
  VPCPublicSubnet2EIP4947BC00:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: LanguageTools/VPC/PublicSubnet2
    Metadata:
      aws:cdk:path: LanguageTools/VPC/PublicSubnet2/EIP
  VPCPublicSubnet2NATGateway3C070193:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - VPCPublicSubnet2EIP4947BC00
          - AllocationId
      SubnetId:
        Ref: VPCPublicSubnet2Subnet74179F39
      Tags:
        - Key: Name
          Value: LanguageTools/VPC/PublicSubnet2
    Metadata:
      aws:cdk:path: LanguageTools/VPC/PublicSubnet2/NATGateway
  VPCPrivateSubnet1Subnet8BCA10E0:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.128.0/18
      VpcId:
        Ref: VPCB9E5F0B4
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: LanguageTools/VPC/PrivateSubnet1
    Metadata:
      aws:cdk:path: LanguageTools/VPC/PrivateSubnet1/Subnet
  VPCPrivateSubnet1RouteTableBE8A6027:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      Tags:
        - Key: Name
          Value: LanguageTools/VPC/PrivateSubnet1
    Metadata:
      aws:cdk:path: LanguageTools/VPC/PrivateSubnet1/RouteTable
  VPCPrivateSubnet1RouteTableAssociation347902D1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCPrivateSubnet1RouteTableBE8A6027
      SubnetId:
        Ref: VPCPrivateSubnet1Subnet8BCA10E0
    Metadata:
      aws:cdk:path: LanguageTools/VPC/PrivateSubnet1/RouteTableAssociation
  VPCPrivateSubnet1DefaultRouteAE1D6490:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VPCPrivateSubnet1RouteTableBE8A6027
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: VPCPublicSubnet1NATGatewayE0556630
    Metadata:
      aws:cdk:path: LanguageTools/VPC/PrivateSubnet1/DefaultRoute
  VPCPrivateSubnet2SubnetCFCDAA7A:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.192.0/18
      VpcId:
        Ref: VPCB9E5F0B4
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: LanguageTools/VPC/PrivateSubnet2
    Metadata:
      aws:cdk:path: LanguageTools/VPC/PrivateSubnet2/Subnet
  VPCPrivateSubnet2RouteTable0A19E10E:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      Tags:
        - Key: Name
          Value: LanguageTools/VPC/PrivateSubnet2
    Metadata:
      aws:cdk:path: LanguageTools/VPC/PrivateSubnet2/RouteTable
  VPCPrivateSubnet2RouteTableAssociation0C73D413:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCPrivateSubnet2RouteTable0A19E10E
      SubnetId:
        Ref: VPCPrivateSubnet2SubnetCFCDAA7A
    Metadata:
      aws:cdk:path: LanguageTools/VPC/PrivateSubnet2/RouteTableAssociation
  VPCPrivateSubnet2DefaultRouteF4F5CFD2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VPCPrivateSubnet2RouteTable0A19E10E
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: VPCPublicSubnet2NATGateway3C070193
    Metadata:
      aws:cdk:path: LanguageTools/VPC/PrivateSubnet2/DefaultRoute
  VPCIGWB7E252D3:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: LanguageTools/VPC
    Metadata:
      aws:cdk:path: LanguageTools/VPC/IGW
  VPCVPCGW99B986DC:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      InternetGatewayId:
        Ref: VPCIGWB7E252D3
    Metadata:
      aws:cdk:path: LanguageTools/VPC/VPCGW
  ClusterEB0386A7:
    Type: AWS::ECS::Cluster
    Metadata:
      aws:cdk:path: LanguageTools/Cluster/Resource
  CertificateCertificateRequestorFunctionServiceRoleC04C13DA:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: LanguageTools/Certificate/CertificateRequestorFunction/ServiceRole/Resource
  CertificateCertificateRequestorFunctionServiceRoleDefaultPolicy3C8845BC:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - acm:RequestCertificate
              - acm:DescribeCertificate
              - acm:DeleteCertificate
            Effect: Allow
            Resource: "*"
          - Action: route53:GetChange
            Effect: Allow
            Resource: "*"
          - Action: route53:changeResourceRecordSets
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - :route53:::hostedzone/ZQTWE55QZLND0
        Version: "2012-10-17"
      PolicyName: CertificateCertificateRequestorFunctionServiceRoleDefaultPolicy3C8845BC
      Roles:
        - Ref: CertificateCertificateRequestorFunctionServiceRoleC04C13DA
    Metadata:
      aws:cdk:path: LanguageTools/Certificate/CertificateRequestorFunction/ServiceRole/DefaultPolicy/Resource
  CertificateCertificateRequestorFunction5E845413:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: AssetParameters19e461d2ff1a5b90438fed6ceee4c197d7efee8712a6f76d85b501ab20bfb1a2S3BucketFCCD3A76
        S3Key:
          Fn::Join:
            - ""
            - - Fn::Select:
                  - 0
                  - Fn::Split:
                      - "||"
                      - Ref: AssetParameters19e461d2ff1a5b90438fed6ceee4c197d7efee8712a6f76d85b501ab20bfb1a2S3VersionKey07AF06B6
              - Fn::Select:
                  - 1
                  - Fn::Split:
                      - "||"
                      - Ref: AssetParameters19e461d2ff1a5b90438fed6ceee4c197d7efee8712a6f76d85b501ab20bfb1a2S3VersionKey07AF06B6
      Handler: index.certificateRequestHandler
      Role:
        Fn::GetAtt:
          - CertificateCertificateRequestorFunctionServiceRoleC04C13DA
          - Arn
      Runtime: nodejs10.x
      Timeout: 900
    DependsOn:
      - CertificateCertificateRequestorFunctionServiceRoleDefaultPolicy3C8845BC
      - CertificateCertificateRequestorFunctionServiceRoleC04C13DA
    Metadata:
      aws:cdk:path: LanguageTools/Certificate/CertificateRequestorFunction/Resource
      aws:asset:path: asset.19e461d2ff1a5b90438fed6ceee4c197d7efee8712a6f76d85b501ab20bfb1a2
      aws:asset:property: Code
  CertificateCertificateRequestorResource2890C6B7:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CertificateCertificateRequestorFunction5E845413
          - Arn
      DomainName: languagetool.arhea.io
      HostedZoneId: ZQTWE55QZLND0
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: LanguageTools/Certificate/CertificateRequestorResource/Default
  RedisSecurityGroupB05951F6:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: LanguageTools/RedisSecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp:
            Fn::GetAtt:
              - VPCB9E5F0B4
              - CidrBlock
          Description:
            Fn::Join:
              - ""
              - - "from "
                - Fn::GetAtt:
                    - VPCB9E5F0B4
                    - CidrBlock
                - :6379
          FromPort: 6379
          IpProtocol: tcp
          ToPort: 6379
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: LanguageTools/RedisSecurityGroup/Resource
  RedisSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: group of private subnets for the redis cluster
      SubnetIds:
        - Ref: VPCPrivateSubnet1Subnet8BCA10E0
        - Ref: VPCPrivateSubnet2SubnetCFCDAA7A
      CacheSubnetGroupName: redis-languagetool
    Metadata:
      aws:cdk:path: LanguageTools/RedisSubnetGroup
  RedisCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      CacheNodeType: cache.t3.medium
      Engine: redis
      NumCacheNodes: 1
      CacheSubnetGroupName: redis-languagetool
      ClusterName: redis-languagetool
      VpcSecurityGroupIds:
        - Fn::GetAtt:
            - RedisSecurityGroupB05951F6
            - GroupId
    DependsOn:
      - RedisSubnetGroup
    Metadata:
      aws:cdk:path: LanguageTools/RedisCluster
  ServiceLBE9A1ADBC:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: "false"
      Scheme: internet-facing
      SecurityGroups:
        - Fn::GetAtt:
            - ServiceLBSecurityGroupF7435A5C
            - GroupId
      Subnets:
        - Ref: VPCPublicSubnet1SubnetB4246D30
        - Ref: VPCPublicSubnet2Subnet74179F39
      Type: application
    DependsOn:
      - VPCPublicSubnet1DefaultRoute91CEF279
      - VPCPublicSubnet2DefaultRouteB7481BBA
    Metadata:
      aws:cdk:path: LanguageTools/Service/LB/Resource
  ServiceLBSecurityGroupF7435A5C:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatically created Security Group for ELB LanguageToolsServiceLB1AF28015
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: LanguageTools/Service/LB/SecurityGroup/Resource
  ServiceLBSecurityGrouptoLanguageToolsServiceSecurityGroup1F052BEA80803A3A5E92:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId:
        Fn::GetAtt:
          - ServiceLBSecurityGroupF7435A5C
          - GroupId
      IpProtocol: tcp
      Description: Load balancer to target
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - ServiceSecurityGroupEEA09B68
          - GroupId
      FromPort: 8080
      ToPort: 8080
    Metadata:
      aws:cdk:path: LanguageTools/Service/LB/SecurityGroup/to LanguageToolsServiceSecurityGroup1F052BEA:8080
  ServiceLBPublicListener46709EAA:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: ServiceLBPublicListenerECSGroup0CC8688C
          Type: forward
      LoadBalancerArn:
        Ref: ServiceLBE9A1ADBC
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn:
            Fn::GetAtt:
              - CertificateCertificateRequestorResource2890C6B7
              - Arn
    Metadata:
      aws:cdk:path: LanguageTools/Service/LB/PublicListener/Resource
  ServiceLBPublicListenerECSGroup0CC8688C:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /v2/languages
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: LanguageTools/Service/LB/PublicListener/ECSGroup/Resource
  ServiceDNS57754DD9:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: languagetool.arhea.io.
      Type: A
      AliasTarget:
        DNSName:
          Fn::Join:
            - ""
            - - dualstack.
              - Fn::GetAtt:
                  - ServiceLBE9A1ADBC
                  - DNSName
        HostedZoneId:
          Fn::GetAtt:
            - ServiceLBE9A1ADBC
            - CanonicalHostedZoneID
      HostedZoneId: ZQTWE55QZLND0
    Metadata:
      aws:cdk:path: LanguageTools/Service/DNS/Resource
  ServiceTaskDefTaskRole0CFE2F57:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: LanguageTools/Service/TaskDef/TaskRole/Resource
  ServiceTaskDef1922A00F:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Environment:
            - Name: JAVA_MEMORY_LIMIT
              Value: 2048M
            - Name: REDIS_HOST
              Value:
                Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - RedisCluster
                        - RedisEndpoint.Address
                    - ":"
                    - Fn::GetAtt:
                        - RedisCluster
                        - RedisEndpoint.Port
          Essential: true
          Image:
            Fn::Join:
              - ""
              - - Ref: AWS::AccountId
                - .dkr.ecr.
                - Ref: AWS::Region
                - "."
                - Ref: AWS::URLSuffix
                - /aws-cdk/assets:d2fb93cf82ae50bd4dd836bc9caeb627f11f9bf039e4768c72b5cf6e4280d5f5
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: ServiceTaskDefwebLogGroup2A898F61
              awslogs-stream-prefix: Service
              awslogs-region:
                Ref: AWS::Region
          Name: web
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
      Cpu: "1024"
      ExecutionRoleArn:
        Fn::GetAtt:
          - ServiceTaskDefExecutionRole919F7BE3
          - Arn
      Family: LanguageToolsServiceTaskDef28E5948F
      Memory: "2048"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::GetAtt:
          - ServiceTaskDefTaskRole0CFE2F57
          - Arn
    Metadata:
      aws:cdk:path: LanguageTools/Service/TaskDef/Resource
  ServiceTaskDefwebLogGroup2A898F61:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: LanguageTools/Service/TaskDef/web/LogGroup/Resource
  ServiceTaskDefExecutionRole919F7BE3:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: LanguageTools/Service/TaskDef/ExecutionRole/Resource
  ServiceTaskDefExecutionRoleDefaultPolicy3073559D:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":ecr:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :repository/aws-cdk/assets
          - Action: ecr:GetAuthorizationToken
            Effect: Allow
            Resource: "*"
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - ServiceTaskDefwebLogGroup2A898F61
                - Arn
        Version: "2012-10-17"
      PolicyName: ServiceTaskDefExecutionRoleDefaultPolicy3073559D
      Roles:
        - Ref: ServiceTaskDefExecutionRole919F7BE3
    Metadata:
      aws:cdk:path: LanguageTools/Service/TaskDef/ExecutionRole/DefaultPolicy/Resource
  Service9571FDD8:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: ClusterEB0386A7
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 2
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: web
          ContainerPort: 8080
          TargetGroupArn:
            Ref: ServiceLBPublicListenerECSGroup0CC8688C
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::GetAtt:
                - ServiceSecurityGroupEEA09B68
                - GroupId
          Subnets:
            - Ref: VPCPrivateSubnet1Subnet8BCA10E0
            - Ref: VPCPrivateSubnet2SubnetCFCDAA7A
      PlatformVersion: 1.4.0
      TaskDefinition:
        Ref: ServiceTaskDef1922A00F
    DependsOn:
      - ServiceLBPublicListenerECSGroup0CC8688C
      - ServiceLBPublicListener46709EAA
    Metadata:
      aws:cdk:path: LanguageTools/Service/Service/Service
  ServiceSecurityGroupEEA09B68:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: LanguageTools/Service/Service/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: LanguageTools/Service/Service/SecurityGroup/Resource
  ServiceSecurityGroupfromLanguageToolsServiceLBSecurityGroup35DBEBB5808012BF7FF0:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort: 8080
      GroupId:
        Fn::GetAtt:
          - ServiceSecurityGroupEEA09B68
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - ServiceLBSecurityGroupF7435A5C
          - GroupId
      ToPort: 8080
    Metadata:
      aws:cdk:path: LanguageTools/Service/Service/SecurityGroup/from LanguageToolsServiceLBSecurityGroup35DBEBB5:8080
  ServiceTaskCountTargetDF7542A8:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 10
      MinCapacity: 2
      ResourceId:
        Fn::Join:
          - ""
          - - service/
            - Ref: ClusterEB0386A7
            - /
            - Fn::GetAtt:
                - Service9571FDD8
                - Name
      RoleARN:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":iam::"
            - Ref: AWS::AccountId
            - :role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
    Metadata:
      aws:cdk:path: LanguageTools/Service/Service/TaskCount/Target/Resource
  ServiceTaskCountTargetScaleOnCPUUtilizationDC8B3C32:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: LanguageToolsServiceTaskCountTargetScaleOnCPUUtilizationCAF96999
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: ServiceTaskCountTargetDF7542A8
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 0.6
    Metadata:
      aws:cdk:path: LanguageTools/Service/Service/TaskCount/Target/ScaleOnCPUUtilization/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Modules: aws-cdk=2.113.0,@aws-cdk/assets=1.67.0,@aws-cdk/aws-applicationautoscaling=1.67.0,@aws-cdk/aws-autoscaling=1.67.0,@aws-cdk/aws-autoscaling-common=1.67.0,@aws-cdk/aws-autoscaling-hooktargets=1.67.0,@aws-cdk/aws-certificatemanager=1.67.0,@aws-cdk/aws-cloudwatch=1.67.0,@aws-cdk/aws-codeguruprofiler=1.67.0,@aws-cdk/aws-ec2=1.67.0,@aws-cdk/aws-ecr=1.67.0,@aws-cdk/aws-ecr-assets=1.67.0,@aws-cdk/aws-ecs=1.67.0,@aws-cdk/aws-ecs-patterns=1.67.0,@aws-cdk/aws-elasticache=1.67.0,@aws-cdk/aws-elasticloadbalancingv2=1.67.0,@aws-cdk/aws-events=1.67.0,@aws-cdk/aws-events-targets=1.67.0,@aws-cdk/aws-iam=1.67.0,@aws-cdk/aws-kms=1.67.0,@aws-cdk/aws-lambda=1.67.0,@aws-cdk/aws-logs=1.67.0,@aws-cdk/aws-route53=1.67.0,@aws-cdk/aws-route53-targets=1.67.0,@aws-cdk/aws-s3=1.67.0,@aws-cdk/aws-s3-assets=1.67.0,@aws-cdk/aws-servicediscovery=1.67.0,@aws-cdk/aws-sns=1.67.0,@aws-cdk/aws-sns-subscriptions=1.67.0,@aws-cdk/aws-sqs=1.67.0,@aws-cdk/aws-ssm=1.67.0,@aws-cdk/cloud-assembly-schema=1.67.0,@aws-cdk/core=1.67.0,@aws-cdk/custom-resources=1.67.0,@aws-cdk/cx-api=1.67.0,@aws-cdk/region-info=1.67.0,jsii-runtime=node.js/v18.12.1
    Metadata:
      aws:cdk:path: LanguageTools/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Parameters:
  AssetParameters19e461d2ff1a5b90438fed6ceee4c197d7efee8712a6f76d85b501ab20bfb1a2S3BucketFCCD3A76:
    Type: String
    Description: S3 bucket for asset "19e461d2ff1a5b90438fed6ceee4c197d7efee8712a6f76d85b501ab20bfb1a2"
  AssetParameters19e461d2ff1a5b90438fed6ceee4c197d7efee8712a6f76d85b501ab20bfb1a2S3VersionKey07AF06B6:
    Type: String
    Description: S3 key for asset version "19e461d2ff1a5b90438fed6ceee4c197d7efee8712a6f76d85b501ab20bfb1a2"
  AssetParameters19e461d2ff1a5b90438fed6ceee4c197d7efee8712a6f76d85b501ab20bfb1a2ArtifactHash652C125C:
    Type: String
    Description: Artifact hash for asset "19e461d2ff1a5b90438fed6ceee4c197d7efee8712a6f76d85b501ab20bfb1a2"
Outputs:
  ServiceLoadBalancerDNSEC5B149E:
    Value:
      Fn::GetAtt:
        - ServiceLBE9A1ADBC
        - DNSName
  ServiceServiceURL250C0FB6:
    Value:
      Fn::Join:
        - ""
        - - https://
          - Ref: ServiceDNS57754DD9
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2

