Resources:
  CsvUploadDeadLetterQueue43276F86:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 604800
      QueueName: CsvUploadDeadLetterQueue
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: S3SnsSqsLambdaChain/CsvUploadDeadLetterQueue/Resource
  CsvUploadQueue40D0B27B:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: CsvUploadQueue
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
            - CsvUploadDeadLetterQueue43276F86
            - Arn
        maxReceiveCount: 1
      VisibilityTimeout: 30
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: S3SnsSqsLambdaChain/CsvUploadQueue/Resource
  CsvUploadQueuePolicy4A34EA15:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action: sqs:SendMessage
            Condition:
              ArnEquals:
                aws:SourceArn:
                  Ref: CsvUploadTopicF7A9A8F1
            Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Resource:
              Fn::GetAtt:
                - CsvUploadQueue40D0B27B
                - Arn
        Version: "2012-10-17"
      Queues:
        - Ref: CsvUploadQueue40D0B27B
    Metadata:
      aws:cdk:path: S3SnsSqsLambdaChain/CsvUploadQueue/Policy/Resource
  CsvUploadQueueS3SnsSqsLambdaChainCsvUploadTopic95C741C9A3840733:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint:
        Fn::GetAtt:
          - CsvUploadQueue40D0B27B
          - Arn
      Protocol: sqs
      RawMessageDelivery: true
      TopicArn:
        Ref: CsvUploadTopicF7A9A8F1
    DependsOn:
      - CsvUploadQueuePolicy4A34EA15
    Metadata:
      aws:cdk:path: S3SnsSqsLambdaChain/CsvUploadQueue/S3SnsSqsLambdaChainCsvUploadTopic95C741C9/Resource
  CsvUploadTopicF7A9A8F1:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: CsvUploadTopic
    Metadata:
      aws:cdk:path: S3SnsSqsLambdaChain/CsvUploadTopic/Resource
  CsvUploadTopicPolicyF655EDB8:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action: sns:Publish
            Condition:
              ArnLike:
                aws:SourceArn:
                  Fn::GetAtt:
                    - CsvBucketADDA1E74
                    - Arn
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Resource:
              Ref: CsvUploadTopicF7A9A8F1
            Sid: "0"
        Version: "2012-10-17"
      Topics:
        - Ref: CsvUploadTopicF7A9A8F1
    Metadata:
      aws:cdk:path: S3SnsSqsLambdaChain/CsvUploadTopic/Policy/Resource
  CsvBucketADDA1E74:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: aws-cdk:auto-delete-objects
          Value: "true"
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: S3SnsSqsLambdaChain/CsvBucket/Resource
  CsvBucketPolicy289F47E9:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: CsvBucketADDA1E74
      PolicyDocument:
        Statement:
          - Action:
              - s3:PutBucketPolicy
              - s3:GetBucket*
              - s3:List*
              - s3:DeleteObject*
            Effect: Allow
            Principal:
              AWS:
                Fn::GetAtt:
                  - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
                  - Arn
            Resource:
              - Fn::GetAtt:
                  - CsvBucketADDA1E74
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - CsvBucketADDA1E74
                        - Arn
                    - /*
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: S3SnsSqsLambdaChain/CsvBucket/Policy/Resource
  CsvBucketAutoDeleteObjectsCustomResourceEC54C556:
    Type: Custom::S3AutoDeleteObjects
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F
          - Arn
      BucketName:
        Ref: CsvBucketADDA1E74
    DependsOn:
      - CsvBucketPolicy289F47E9
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: S3SnsSqsLambdaChain/CsvBucket/AutoDeleteObjectsCustomResource/Default
  CsvBucketNotificationsF537981F:
    Type: Custom::S3BucketNotifications
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691
          - Arn
      BucketName:
        Ref: CsvBucketADDA1E74
      NotificationConfiguration:
        TopicConfigurations:
          - Events:
              - s3:ObjectCreated:Put
            Filter:
              Key:
                FilterRules:
                  - Name: suffix
                    Value: .csv
            TopicArn:
              Ref: CsvUploadTopicF7A9A8F1
      Managed: true
    DependsOn:
      - CsvUploadTopicPolicyF655EDB8
      - CsvUploadTopicF7A9A8F1
    Metadata:
      aws:cdk:path: S3SnsSqsLambdaChain/CsvBucket/Notifications/Resource
  CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: S3SnsSqsLambdaChain/Custom::S3AutoDeleteObjectsCustomResourceProvider/Role
  CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: b7f33614a69548d6bafe224d751a7ef238cde19097415e553fe8b63a4c8fd8a6.zip
      Timeout: 900
      MemorySize: 128
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
          - Arn
      Runtime: nodejs18.x
      Description:
        Fn::Join:
          - ""
          - - "Lambda function for auto-deleting objects in "
            - Ref: CsvBucketADDA1E74
            - " S3 bucket."
    DependsOn:
      - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
    Metadata:
      aws:cdk:path: S3SnsSqsLambdaChain/Custom::S3AutoDeleteObjectsCustomResourceProvider/Handler
      aws:asset:path: asset.b7f33614a69548d6bafe224d751a7ef238cde19097415e553fe8b63a4c8fd8a6
      aws:asset:property: Code
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: S3SnsSqsLambdaChain/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: s3:PutBucketNotification
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      Roles:
        - Ref: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: S3SnsSqsLambdaChain/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691:
    Type: AWS::Lambda::Function
    Properties:
      Description: AWS CloudFormation handler for "Custom::S3BucketNotifications" resources (@aws-cdk/aws-s3)
      Code:
        ZipFile: |
          import boto3  # type: ignore
          import json
          import logging
          import urllib.request

          s3 = boto3.client("s3")

          EVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'

          CONFIGURATION_TYPES = ["TopicConfigurations", "QueueConfigurations", "LambdaFunctionConfigurations"]

          def handler(event: dict, context):
            response_status = "SUCCESS"
            error_message = ""
            try:
              props = event["ResourceProperties"]
              bucket = props["BucketName"]
              notification_configuration = props["NotificationConfiguration"]
              request_type = event["RequestType"]
              managed = props.get('Managed', 'true').lower() == 'true'
              stack_id = event['StackId']

              if managed:
                config = handle_managed(request_type, notification_configuration)
              else:
                config = handle_unmanaged(bucket, stack_id, request_type, notification_configuration)

              put_bucket_notification_configuration(bucket, config)
            except Exception as e:
              logging.exception("Failed to put bucket notification configuration")
              response_status = "FAILED"
              error_message = f"Error: {str(e)}. "
            finally:
              submit_response(event, context, response_status, error_message)

          def handle_managed(request_type, notification_configuration):
            if request_type == 'Delete':
              return {}
            return notification_configuration

          def handle_unmanaged(bucket, stack_id, request_type, notification_configuration):
            external_notifications = find_external_notifications(bucket, stack_id)

            if request_type == 'Delete':
              return external_notifications

            def with_id(notification):
              notification['Id'] = f"{stack_id}-{hash(json.dumps(notification, sort_keys=True))}"
              return notification

            notifications = {}
            for t in CONFIGURATION_TYPES:
              external = external_notifications.get(t, [])
              incoming = [with_id(n) for n in notification_configuration.get(t, [])]
              notifications[t] = external + incoming

            if EVENTBRIDGE_CONFIGURATION in notification_configuration:
              notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]
            elif EVENTBRIDGE_CONFIGURATION in external_notifications:
              notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]

            return notifications

          def find_external_notifications(bucket, stack_id):
            existing_notifications = get_bucket_notification_configuration(bucket)
            external_notifications = {}
            for t in CONFIGURATION_TYPES:
              external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f"{stack_id}-")]

            if EVENTBRIDGE_CONFIGURATION in existing_notifications:
              external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]

            return external_notifications

          def get_bucket_notification_configuration(bucket):
            return s3.get_bucket_notification_configuration(Bucket=bucket)

          def put_bucket_notification_configuration(bucket, notification_configuration):
            s3.put_bucket_notification_configuration(Bucket=bucket, NotificationConfiguration=notification_configuration)

          def submit_response(event: dict, context, response_status: str, error_message: str):
            response_body = json.dumps(
              {
                "Status": response_status,
                "Reason": f"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}",
                "PhysicalResourceId": event.get("PhysicalResourceId") or event["LogicalResourceId"],
                "StackId": event["StackId"],
                "RequestId": event["RequestId"],
                "LogicalResourceId": event["LogicalResourceId"],
                "NoEcho": False,
              }
            ).encode("utf-8")
            headers = {"content-type": "", "content-length": str(len(response_body))}
            try:
              req = urllib.request.Request(url=event["ResponseURL"], headers=headers, data=response_body, method="PUT")
              with urllib.request.urlopen(req) as response:
                print(response.read().decode("utf-8"))
              print("Status code: " + response.reason)
            except Exception as e:
                print("send(..) failed executing request.urlopen(..): " + str(e))
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
          - Arn
      Runtime: python3.9
      Timeout: 300
    DependsOn:
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: S3SnsSqsLambdaChain/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource
  CsvUploadEventLambdaServiceRoleDEB3D3CE:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: S3SnsSqsLambdaChain/CsvUploadEventLambda/ServiceRole/Resource
  CsvUploadEventLambdaServiceRoleDefaultPolicy3F745427:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - sqs:ReceiveMessage
              - sqs:ChangeMessageVisibility
              - sqs:GetQueueUrl
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - CsvUploadQueue40D0B27B
                - Arn
        Version: "2012-10-17"
      PolicyName: CsvUploadEventLambdaServiceRoleDefaultPolicy3F745427
      Roles:
        - Ref: CsvUploadEventLambdaServiceRoleDEB3D3CE
    Metadata:
      aws:cdk:path: S3SnsSqsLambdaChain/CsvUploadEventLambda/ServiceRole/DefaultPolicy/Resource
  CsvUploadEventLambda8C405FE2:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 1dfecb3b489db2e056946ef0a979c0bc25c6f8d18b1978fcc6782248e4b854a1.zip
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
      FunctionName: CsvUploadEventLambda
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - CsvUploadEventLambdaServiceRoleDEB3D3CE
          - Arn
      Runtime: nodejs16.x
    DependsOn:
      - CsvUploadEventLambdaServiceRoleDefaultPolicy3F745427
      - CsvUploadEventLambdaServiceRoleDEB3D3CE
    Metadata:
      aws:cdk:path: S3SnsSqsLambdaChain/CsvUploadEventLambda/Resource
      aws:asset:path: asset.1dfecb3b489db2e056946ef0a979c0bc25c6f8d18b1978fcc6782248e4b854a1
      aws:asset:is-bundled: true
      aws:asset:property: Code
  CsvUploadEventLambdaSqsEventSourceS3SnsSqsLambdaChainCsvUploadQueue17DBF4BE16CBE99A:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn:
        Fn::GetAtt:
          - CsvUploadQueue40D0B27B
          - Arn
      FunctionName:
        Ref: CsvUploadEventLambda8C405FE2
    Metadata:
      aws:cdk:path: S3SnsSqsLambdaChain/CsvUploadEventLambda/SqsEventSource:S3SnsSqsLambdaChainCsvUploadQueue17DBF4BE/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/2VRyU7DMBD9Fu7uoLQcuNIIboWScI8cx1STxQ4ZOwhF+Xe8lKQRl3nz3qz27CFJHiC549+0E1Wza7GEKTdcNMxJxURfBNO7lVay9FNFJ9izblH8LGKkMyPl8nNbkhiwN6iVz9jwD92j8Gp0gl2b3VDX7ADT0YpGGh+6ehHWig2P5MhJzgx5B1Om27B5wLXob0LLu7LihdKVrAleA7xYJcKmdCg4kTQETx6uyTC5+iXneZTK5NoOQp5436O6+Pb/1XlmqSWju0xS0MNSi78JnQc9YiUHFsa6Y1x829vCN2t6Gz4l1apCv8nM/COgpvsxeYRk725aE+JusMpgJyGL+AvNItIx8AEAAA==
    Metadata:
      aws:cdk:path: S3SnsSqsLambdaChain/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Outputs:
  DeadLetterQueueUrl:
    Value:
      Fn::Join:
        - ""
        - - https://console.aws.amazon.com/sqs/home?region=
          - Ref: AWS::Region
          - "#queue/arn:aws:sqs:"
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Fn::GetAtt:
              - CsvUploadDeadLetterQueue43276F86
              - QueueName
    Export:
      Name: DeadLetterQueue
  LambdaLogsUrl:
    Value:
      Fn::Join:
        - ""
        - - https://console.aws.amazon.com/cloudwatch/home?region=
          - Ref: AWS::Region
          - "#logsV2:log-groups/log-group/$252Faws$252Flambda$252F"
          - Ref: CsvUploadEventLambda8C405FE2
    Export:
      Name: LambdaLogs
  UploadCsvToBucketCommand:
    Value:
      Fn::Join:
        - ""
        - - aws s3 cp example.csv s3://
          - Ref: CsvBucketADDA1E74
          - /example.csv --acl bucket-owner-full-control
    Export:
      Name: UploadCsvToBucketCommand
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - il-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - me-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
Rules:
  CheckBootstrapVersion:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::Contains:
                - - "1"
                  - "2"
                  - "3"
                  - "4"
                  - "5"
                - Ref: BootstrapVersion
        AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.

