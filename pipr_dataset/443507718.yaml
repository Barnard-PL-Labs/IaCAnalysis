Parameters:
  rpcUrl:
    Type: String
    Description: RPC URL of chain provider.
  contractAddress:
    Type: String
    Description: Address of token smart contract.
  tokenId:
    Type: String
    Description: Id of ERC1155 token.
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
Resources:
  Web3DependencyLayer475216EB:
    Type: AWS::Lambda::LayerVersion
    Properties:
      Content:
        S3Bucket: cdk-hnb659fds-assets-036406153779-us-east-1
        S3Key: 056befc796712348c2abfffda67322f1e6e36eb727ccc55fc14494adc17abce3.zip
      CompatibleRuntimes:
        - nodejs14.x
      Description: web3 library
    Metadata:
      aws:cdk:path: NetworkStateBackendStack/Web3DependencyLayer/Resource
      aws:asset:path: asset.056befc796712348c2abfffda67322f1e6e36eb727ccc55fc14494adc17abce3
      aws:asset:is-bundled: false
      aws:asset:property: Content
  CreateAuthChallengeLambdaServiceRole5952D02E:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: NetworkStateBackendStack/CreateAuthChallengeLambda/ServiceRole/Resource
  CreateAuthChallengeLambdaA3F57A2B:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cdk-hnb659fds-assets-036406153779-us-east-1
        S3Key: a4c0f7a504d74a9805b55a287dbbcdb8f9466035e1e9a0951110ada7583c57a7.zip
      Role:
        Fn::GetAtt:
          - CreateAuthChallengeLambdaServiceRole5952D02E
          - Arn
      Handler: index.handler
      Runtime: nodejs14.x
    DependsOn:
      - CreateAuthChallengeLambdaServiceRole5952D02E
    Metadata:
      aws:cdk:path: NetworkStateBackendStack/CreateAuthChallengeLambda/Resource
      aws:asset:path: asset.a4c0f7a504d74a9805b55a287dbbcdb8f9466035e1e9a0951110ada7583c57a7
      aws:asset:is-bundled: false
      aws:asset:property: Code
  CreateAuthChallengeLambdaCreateAuthChallengeCognito577EAADC:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - CreateAuthChallengeLambdaA3F57A2B
          - Arn
      Principal: cognito-idp.amazonaws.com
    Metadata:
      aws:cdk:path: NetworkStateBackendStack/CreateAuthChallengeLambda/CreateAuthChallengeCognito
  DefineAuthChallengeLambdaServiceRole9E42476B:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: NetworkStateBackendStack/DefineAuthChallengeLambda/ServiceRole/Resource
  DefineAuthChallengeLambda9EBBCD97:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cdk-hnb659fds-assets-036406153779-us-east-1
        S3Key: 8e536def7f925a28d51d9ff154877a96cc7ca1387be1a64e3bb9a4bbad44a059.zip
      Role:
        Fn::GetAtt:
          - DefineAuthChallengeLambdaServiceRole9E42476B
          - Arn
      Handler: index.handler
      Runtime: nodejs14.x
    DependsOn:
      - DefineAuthChallengeLambdaServiceRole9E42476B
    Metadata:
      aws:cdk:path: NetworkStateBackendStack/DefineAuthChallengeLambda/Resource
      aws:asset:path: asset.8e536def7f925a28d51d9ff154877a96cc7ca1387be1a64e3bb9a4bbad44a059
      aws:asset:is-bundled: false
      aws:asset:property: Code
  DefineAuthChallengeLambdaDefineAuthChallengeCognito1B7CC373:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - DefineAuthChallengeLambda9EBBCD97
          - Arn
      Principal: cognito-idp.amazonaws.com
    Metadata:
      aws:cdk:path: NetworkStateBackendStack/DefineAuthChallengeLambda/DefineAuthChallengeCognito
  PreSignUpLambdaServiceRoleFA160DE8:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: NetworkStateBackendStack/PreSignUpLambda/ServiceRole/Resource
  PreSignUpLambda2E8F0430:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cdk-hnb659fds-assets-036406153779-us-east-1
        S3Key: 2a3d6b7d8a4a59b4bfb0f47fef74c4433e7046d47b891d410f7362613ccaf9d2.zip
      Role:
        Fn::GetAtt:
          - PreSignUpLambdaServiceRoleFA160DE8
          - Arn
      Handler: index.handler
      Runtime: nodejs14.x
    DependsOn:
      - PreSignUpLambdaServiceRoleFA160DE8
    Metadata:
      aws:cdk:path: NetworkStateBackendStack/PreSignUpLambda/Resource
      aws:asset:path: asset.2a3d6b7d8a4a59b4bfb0f47fef74c4433e7046d47b891d410f7362613ccaf9d2
      aws:asset:is-bundled: false
      aws:asset:property: Code
  PreSignUpLambdaPreSignUpCognito16447808:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - PreSignUpLambda2E8F0430
          - Arn
      Principal: cognito-idp.amazonaws.com
    Metadata:
      aws:cdk:path: NetworkStateBackendStack/PreSignUpLambda/PreSignUpCognito
  VerifyAuthChallengeResponseLambdaServiceRole2D7E3718:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: NetworkStateBackendStack/VerifyAuthChallengeResponseLambda/ServiceRole/Resource
  VerifyAuthChallengeResponseLambda1C1542EC:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cdk-hnb659fds-assets-036406153779-us-east-1
        S3Key: fc9d0664950144c3c10079684acad5bb5e50acf96d7e253b11234601a931d850.zip
      Role:
        Fn::GetAtt:
          - VerifyAuthChallengeResponseLambdaServiceRole2D7E3718
          - Arn
      Environment:
        Variables:
          rpcUrl:
            Ref: rpcUrl
          contractAddress:
            Ref: contractAddress
          tokenId:
            Ref: tokenId
      Handler: index.handler
      Layers:
        - Ref: Web3DependencyLayer475216EB
      Runtime: nodejs14.x
    DependsOn:
      - VerifyAuthChallengeResponseLambdaServiceRole2D7E3718
    Metadata:
      aws:cdk:path: NetworkStateBackendStack/VerifyAuthChallengeResponseLambda/Resource
      aws:asset:path: asset.fc9d0664950144c3c10079684acad5bb5e50acf96d7e253b11234601a931d850
      aws:asset:is-bundled: false
      aws:asset:property: Code
  VerifyAuthChallengeResponseLambdaVerifyAuthChallengeResponseCognitoC930BC53:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - VerifyAuthChallengeResponseLambda1C1542EC
          - Arn
      Principal: cognito-idp.amazonaws.com
    Metadata:
      aws:cdk:path: NetworkStateBackendStack/VerifyAuthChallengeResponseLambda/VerifyAuthChallengeResponseCognito
  UserPool6BA7E5F2:
    Type: AWS::Cognito::UserPool
    Properties:
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: admin_only
            Priority: 1
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      EmailVerificationMessage: The verification code to your new account is {####}
      EmailVerificationSubject: Verify your new account
      LambdaConfig:
        CreateAuthChallenge:
          Fn::GetAtt:
            - CreateAuthChallengeLambdaA3F57A2B
            - Arn
        DefineAuthChallenge:
          Fn::GetAtt:
            - DefineAuthChallengeLambda9EBBCD97
            - Arn
        PreSignUp:
          Fn::GetAtt:
            - PreSignUpLambda2E8F0430
            - Arn
        VerifyAuthChallengeResponse:
          Fn::GetAtt:
            - VerifyAuthChallengeResponseLambda1C1542EC
            - Arn
      SmsVerificationMessage: The verification code to your new account is {####}
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
        EmailMessage: The verification code to your new account is {####}
        EmailSubject: Verify your new account
        SmsMessage: The verification code to your new account is {####}
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: NetworkStateBackendStack/UserPool/Resource
  UserPoolClient2F5918F7:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId:
        Ref: UserPool6BA7E5F2
      AllowedOAuthFlows:
        - implicit
        - code
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - profile
        - phone
        - email
        - openid
        - aws.cognito.signin.user.admin
      CallbackURLs:
        - https://example.com
      SupportedIdentityProviders:
        - COGNITO
    Metadata:
      aws:cdk:path: NetworkStateBackendStack/UserPoolClient/Resource
  UserPoolAuthorizer2F68B0CA:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: NetworkStateBackendStackUserPoolAuthorizerC890633E
      RestApiId:
        Ref: networkstateapi9D930151
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      ProviderARNs:
        - Fn::GetAtt:
            - UserPool6BA7E5F2
            - Arn
    Metadata:
      aws:cdk:path: NetworkStateBackendStack/UserPoolAuthorizer/Resource
  GetJokeLambdaServiceRole5D9C2CFD:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: NetworkStateBackendStack/GetJokeLambda/ServiceRole/Resource
  GetJokeLambdaF272D599:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cdk-hnb659fds-assets-036406153779-us-east-1
        S3Key: 8685bffe7acf0c143f0c1ac7b7d4e6ad2cb9d4f8564980a1be36a77412ac869e.zip
      Role:
        Fn::GetAtt:
          - GetJokeLambdaServiceRole5D9C2CFD
          - Arn
      Handler: index.handler
      Runtime: nodejs14.x
    DependsOn:
      - GetJokeLambdaServiceRole5D9C2CFD
    Metadata:
      aws:cdk:path: NetworkStateBackendStack/GetJokeLambda/Resource
      aws:asset:path: asset.8685bffe7acf0c143f0c1ac7b7d4e6ad2cb9d4f8564980a1be36a77412ac869e
      aws:asset:is-bundled: false
      aws:asset:property: Code
  networkstateapi9D930151:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: network-state-api
    Metadata:
      aws:cdk:path: NetworkStateBackendStack/network-state-api/Resource
  networkstateapiCloudWatchRoleD6683360:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
    Metadata:
      aws:cdk:path: NetworkStateBackendStack/network-state-api/CloudWatchRole/Resource
  networkstateapiAccountFB216D92:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn:
        Fn::GetAtt:
          - networkstateapiCloudWatchRoleD6683360
          - Arn
    DependsOn:
      - networkstateapi9D930151
    Metadata:
      aws:cdk:path: NetworkStateBackendStack/network-state-api/Account
  networkstateapiDeploymentD1757FD5773717a1c75ce11a3cc1c9ebc7cc8f0c:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:
        Ref: networkstateapi9D930151
      Description: Automatically created by the RestApi construct
    DependsOn:
      - networkstateapiproxyANYBF3E42AA
      - networkstateapiproxyB5D1EC29
      - networkstateapiANYC4AEAF0D
    Metadata:
      aws:cdk:path: NetworkStateBackendStack/network-state-api/Deployment/Resource
  networkstateapiDeploymentStageprod33AD29C6:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId:
        Ref: networkstateapi9D930151
      DeploymentId:
        Ref: networkstateapiDeploymentD1757FD5773717a1c75ce11a3cc1c9ebc7cc8f0c
      StageName: prod
    Metadata:
      aws:cdk:path: NetworkStateBackendStack/network-state-api/DeploymentStage.prod/Resource
  networkstateapiproxyB5D1EC29:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
          - networkstateapi9D930151
          - RootResourceId
      PathPart: "{proxy+}"
      RestApiId:
        Ref: networkstateapi9D930151
    Metadata:
      aws:cdk:path: NetworkStateBackendStack/network-state-api/Default/{proxy+}/Resource
  networkstateapiproxyANYApiPermissionNetworkStateBackendStacknetworkstateapiCDBC521FANYproxy53400D2A:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - GetJokeLambdaF272D599
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:us-east-1:036406153779:"
            - Ref: networkstateapi9D930151
            - /
            - Ref: networkstateapiDeploymentStageprod33AD29C6
            - /*/*
    Metadata:
      aws:cdk:path: NetworkStateBackendStack/network-state-api/Default/{proxy+}/ANY/ApiPermission.NetworkStateBackendStacknetworkstateapiCDBC521F.ANY..{proxy+}
  networkstateapiproxyANYApiPermissionTestNetworkStateBackendStacknetworkstateapiCDBC521FANYproxy5FC93DC7:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - GetJokeLambdaF272D599
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:us-east-1:036406153779:"
            - Ref: networkstateapi9D930151
            - /test-invoke-stage/*/*
    Metadata:
      aws:cdk:path: NetworkStateBackendStack/network-state-api/Default/{proxy+}/ANY/ApiPermission.Test.NetworkStateBackendStacknetworkstateapiCDBC521F.ANY..{proxy+}
  networkstateapiproxyANYBF3E42AA:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: ANY
      ResourceId:
        Ref: networkstateapiproxyB5D1EC29
      RestApiId:
        Ref: networkstateapi9D930151
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Ref: UserPoolAuthorizer2F68B0CA
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :apigateway:us-east-1:lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                  - GetJokeLambdaF272D599
                  - Arn
              - /invocations
    Metadata:
      aws:cdk:path: NetworkStateBackendStack/network-state-api/Default/{proxy+}/ANY/Resource
  networkstateapiANYApiPermissionNetworkStateBackendStacknetworkstateapiCDBC521FANY8B5DC3F6:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - GetJokeLambdaF272D599
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:us-east-1:036406153779:"
            - Ref: networkstateapi9D930151
            - /
            - Ref: networkstateapiDeploymentStageprod33AD29C6
            - /*/
    Metadata:
      aws:cdk:path: NetworkStateBackendStack/network-state-api/Default/ANY/ApiPermission.NetworkStateBackendStacknetworkstateapiCDBC521F.ANY..
  networkstateapiANYApiPermissionTestNetworkStateBackendStacknetworkstateapiCDBC521FANYE6C28ECB:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - GetJokeLambdaF272D599
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:us-east-1:036406153779:"
            - Ref: networkstateapi9D930151
            - /test-invoke-stage/*/
    Metadata:
      aws:cdk:path: NetworkStateBackendStack/network-state-api/Default/ANY/ApiPermission.Test.NetworkStateBackendStacknetworkstateapiCDBC521F.ANY..
  networkstateapiANYC4AEAF0D:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: ANY
      ResourceId:
        Fn::GetAtt:
          - networkstateapi9D930151
          - RootResourceId
      RestApiId:
        Ref: networkstateapi9D930151
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Ref: UserPoolAuthorizer2F68B0CA
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :apigateway:us-east-1:lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                  - GetJokeLambdaF272D599
                  - Arn
              - /invocations
    Metadata:
      aws:cdk:path: NetworkStateBackendStack/network-state-api/Default/ANY/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/1VQTVPCMBD9LdzDKnDxWnA84djB0SuzpGtZaJNONhFrp//dpAWtp31v3369XcIK7md4kbkuzvOKD9C9etRntfkwOTqsyZNTUd93FdaHAqHbYkvunZywNansH38KRvurMMU5uZollfRKVnsUIS+QpRA5rIM+k1+jkGKsodvZilJbir3StjTsLXRvQi63tkrSL76BTcVk/FQaM73Chkv0dMEWus0461YiWfBH6/g7uoydE7Yd7O5IfNbwcMsfzLS2Ie56pKaybX1dO2Hxh+VgYASx1QanaTCYO/vV3jLXwSN+pri9SKkR9b0aPpSGsCmT8BJ8E/y0q1fGFgQnuftcPMBiCYvZSZjnLh7INcFujD9OTx1r6QEAAA==
    Metadata:
      aws:cdk:path: NetworkStateBackendStack/CDKMetadata/Default
Outputs:
  networkstateapiEndpointBE4FA9BA:
    Value:
      Fn::Join:
        - ""
        - - https://
          - Ref: networkstateapi9D930151
          - .execute-api.us-east-1.
          - Ref: AWS::URLSuffix
          - /
          - Ref: networkstateapiDeploymentStageprod33AD29C6
          - /
  RestApiName:
    Value: network-state-api
  RestApiEndpoint:
    Value:
      Fn::Join:
        - ""
        - - https://
          - Ref: networkstateapi9D930151
          - .execute-api.us-east-1.
          - Ref: AWS::URLSuffix
          - /
          - Ref: networkstateapiDeploymentStageprod33AD29C6
          - /
  UserPoolId:
    Value:
      Ref: UserPool6BA7E5F2
  UserPoolWebClientId:
    Value:
      Ref: UserPoolClient2F5918F7
Rules:
  CheckBootstrapVersion:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::Contains:
                - - "1"
                  - "2"
                  - "3"
                  - "4"
                  - "5"
                - Ref: BootstrapVersion
        AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.

