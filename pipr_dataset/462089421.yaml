Resources:
  BatchVPCBCF115DF:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: CdkBatchStack/BatchVPC
        - Key: purpose
          Value: BatchTest
    Metadata:
      aws:cdk:path: CdkBatchStack/BatchVPC/Resource
  BatchVPCPublicSubnet1Subnet5BAE427C:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: BatchVPCBCF115DF
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 10.0.0.0/18
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: CdkBatchStack/BatchVPC/PublicSubnet1
        - Key: purpose
          Value: BatchTest
    Metadata:
      aws:cdk:path: CdkBatchStack/BatchVPC/PublicSubnet1/Subnet
  BatchVPCPublicSubnet1RouteTable86AB0677:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: BatchVPCBCF115DF
      Tags:
        - Key: Name
          Value: CdkBatchStack/BatchVPC/PublicSubnet1
        - Key: purpose
          Value: BatchTest
    Metadata:
      aws:cdk:path: CdkBatchStack/BatchVPC/PublicSubnet1/RouteTable
  BatchVPCPublicSubnet1RouteTableAssociation698EA42C:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: BatchVPCPublicSubnet1RouteTable86AB0677
      SubnetId:
        Ref: BatchVPCPublicSubnet1Subnet5BAE427C
    Metadata:
      aws:cdk:path: CdkBatchStack/BatchVPC/PublicSubnet1/RouteTableAssociation
  BatchVPCPublicSubnet1DefaultRouteA192F7AB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: BatchVPCPublicSubnet1RouteTable86AB0677
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: BatchVPCIGW191A5E68
    DependsOn:
      - BatchVPCVPCGW9EF913D1
    Metadata:
      aws:cdk:path: CdkBatchStack/BatchVPC/PublicSubnet1/DefaultRoute
  BatchVPCPublicSubnet1EIP5436ABA5:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: CdkBatchStack/BatchVPC/PublicSubnet1
        - Key: purpose
          Value: BatchTest
    Metadata:
      aws:cdk:path: CdkBatchStack/BatchVPC/PublicSubnet1/EIP
  BatchVPCPublicSubnet1NATGateway835D0E0A:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId:
        Ref: BatchVPCPublicSubnet1Subnet5BAE427C
      AllocationId:
        Fn::GetAtt:
          - BatchVPCPublicSubnet1EIP5436ABA5
          - AllocationId
      Tags:
        - Key: Name
          Value: CdkBatchStack/BatchVPC/PublicSubnet1
        - Key: purpose
          Value: BatchTest
    Metadata:
      aws:cdk:path: CdkBatchStack/BatchVPC/PublicSubnet1/NATGateway
  BatchVPCPublicSubnet2Subnet1A7FFF1F:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: BatchVPCBCF115DF
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: 10.0.64.0/18
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: CdkBatchStack/BatchVPC/PublicSubnet2
        - Key: purpose
          Value: BatchTest
    Metadata:
      aws:cdk:path: CdkBatchStack/BatchVPC/PublicSubnet2/Subnet
  BatchVPCPublicSubnet2RouteTable4FC84E84:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: BatchVPCBCF115DF
      Tags:
        - Key: Name
          Value: CdkBatchStack/BatchVPC/PublicSubnet2
        - Key: purpose
          Value: BatchTest
    Metadata:
      aws:cdk:path: CdkBatchStack/BatchVPC/PublicSubnet2/RouteTable
  BatchVPCPublicSubnet2RouteTableAssociation8F491EF0:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: BatchVPCPublicSubnet2RouteTable4FC84E84
      SubnetId:
        Ref: BatchVPCPublicSubnet2Subnet1A7FFF1F
    Metadata:
      aws:cdk:path: CdkBatchStack/BatchVPC/PublicSubnet2/RouteTableAssociation
  BatchVPCPublicSubnet2DefaultRoute06D13533:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: BatchVPCPublicSubnet2RouteTable4FC84E84
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: BatchVPCIGW191A5E68
    DependsOn:
      - BatchVPCVPCGW9EF913D1
    Metadata:
      aws:cdk:path: CdkBatchStack/BatchVPC/PublicSubnet2/DefaultRoute
  BatchVPCPublicSubnet2EIPB0B7D72B:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: CdkBatchStack/BatchVPC/PublicSubnet2
        - Key: purpose
          Value: BatchTest
    Metadata:
      aws:cdk:path: CdkBatchStack/BatchVPC/PublicSubnet2/EIP
  BatchVPCPublicSubnet2NATGatewayBAC4C028:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId:
        Ref: BatchVPCPublicSubnet2Subnet1A7FFF1F
      AllocationId:
        Fn::GetAtt:
          - BatchVPCPublicSubnet2EIPB0B7D72B
          - AllocationId
      Tags:
        - Key: Name
          Value: CdkBatchStack/BatchVPC/PublicSubnet2
        - Key: purpose
          Value: BatchTest
    Metadata:
      aws:cdk:path: CdkBatchStack/BatchVPC/PublicSubnet2/NATGateway
  BatchVPCPrivateSubnet1Subnet9E0B01C6:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: BatchVPCBCF115DF
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 10.0.128.0/18
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: CdkBatchStack/BatchVPC/PrivateSubnet1
        - Key: purpose
          Value: BatchTest
    Metadata:
      aws:cdk:path: CdkBatchStack/BatchVPC/PrivateSubnet1/Subnet
  BatchVPCPrivateSubnet1RouteTable92CB5A44:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: BatchVPCBCF115DF
      Tags:
        - Key: Name
          Value: CdkBatchStack/BatchVPC/PrivateSubnet1
        - Key: purpose
          Value: BatchTest
    Metadata:
      aws:cdk:path: CdkBatchStack/BatchVPC/PrivateSubnet1/RouteTable
  BatchVPCPrivateSubnet1RouteTableAssociation62063597:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: BatchVPCPrivateSubnet1RouteTable92CB5A44
      SubnetId:
        Ref: BatchVPCPrivateSubnet1Subnet9E0B01C6
    Metadata:
      aws:cdk:path: CdkBatchStack/BatchVPC/PrivateSubnet1/RouteTableAssociation
  BatchVPCPrivateSubnet1DefaultRoute601FB5DC:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: BatchVPCPrivateSubnet1RouteTable92CB5A44
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: BatchVPCPublicSubnet1NATGateway835D0E0A
    Metadata:
      aws:cdk:path: CdkBatchStack/BatchVPC/PrivateSubnet1/DefaultRoute
  BatchVPCPrivateSubnet2SubnetF8E2E6C8:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: BatchVPCBCF115DF
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: 10.0.192.0/18
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: CdkBatchStack/BatchVPC/PrivateSubnet2
        - Key: purpose
          Value: BatchTest
    Metadata:
      aws:cdk:path: CdkBatchStack/BatchVPC/PrivateSubnet2/Subnet
  BatchVPCPrivateSubnet2RouteTable6D5CD5BB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: BatchVPCBCF115DF
      Tags:
        - Key: Name
          Value: CdkBatchStack/BatchVPC/PrivateSubnet2
        - Key: purpose
          Value: BatchTest
    Metadata:
      aws:cdk:path: CdkBatchStack/BatchVPC/PrivateSubnet2/RouteTable
  BatchVPCPrivateSubnet2RouteTableAssociation09C29241:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: BatchVPCPrivateSubnet2RouteTable6D5CD5BB
      SubnetId:
        Ref: BatchVPCPrivateSubnet2SubnetF8E2E6C8
    Metadata:
      aws:cdk:path: CdkBatchStack/BatchVPC/PrivateSubnet2/RouteTableAssociation
  BatchVPCPrivateSubnet2DefaultRoute442AD5C5:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: BatchVPCPrivateSubnet2RouteTable6D5CD5BB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: BatchVPCPublicSubnet2NATGatewayBAC4C028
    Metadata:
      aws:cdk:path: CdkBatchStack/BatchVPC/PrivateSubnet2/DefaultRoute
  BatchVPCIGW191A5E68:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: CdkBatchStack/BatchVPC
        - Key: purpose
          Value: BatchTest
    Metadata:
      aws:cdk:path: CdkBatchStack/BatchVPC/IGW
  BatchVPCVPCGW9EF913D1:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: BatchVPCBCF115DF
      InternetGatewayId:
        Ref: BatchVPCIGW191A5E68
    Metadata:
      aws:cdk:path: CdkBatchStack/BatchVPC/VPCGW
  TestInputBucketD9549596:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
            ExpirationInDays: 7
            Status: Enabled
      Tags:
        - Key: aws-cdk:auto-delete-objects
          Value: "true"
        - Key: purpose
          Value: BatchTest
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: CdkBatchStack/Test/InputBucket/Resource
  TestInputBucketPolicyBB8AE7DF:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: TestInputBucketD9549596
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetBucket*
              - s3:List*
              - s3:DeleteObject*
            Effect: Allow
            Principal:
              AWS:
                Fn::GetAtt:
                  - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
                  - Arn
            Resource:
              - Fn::GetAtt:
                  - TestInputBucketD9549596
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - TestInputBucketD9549596
                        - Arn
                    - /*
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: CdkBatchStack/Test/InputBucket/Policy/Resource
  TestInputBucketAutoDeleteObjectsCustomResourceBA605904:
    Type: Custom::S3AutoDeleteObjects
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F
          - Arn
      BucketName:
        Ref: TestInputBucketD9549596
    DependsOn:
      - TestInputBucketPolicyBB8AE7DF
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: CdkBatchStack/Test/InputBucket/AutoDeleteObjectsCustomResource/Default
  TestInputBucketNotificationsDD625863:
    Type: Custom::S3BucketNotifications
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691
          - Arn
      BucketName:
        Ref: TestInputBucketD9549596
      NotificationConfiguration:
        LambdaFunctionConfigurations:
          - Events:
              - s3:ObjectCreated:*
            LambdaFunctionArn:
              Fn::GetAtt:
                - TestBucketArrivalF04759FD
                - Arn
      Managed: true
    DependsOn:
      - TestInputBucketAllowBucketNotificationsToCdkBatchStackTestBucketArrival87E94BF9913C60EE
    Metadata:
      aws:cdk:path: CdkBatchStack/Test/InputBucket/Notifications/Resource
  TestInputBucketAllowBucketNotificationsToCdkBatchStackTestBucketArrival87E94BF9913C60EE:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - TestBucketArrivalF04759FD
          - Arn
      Principal: s3.amazonaws.com
      SourceAccount:
        Ref: AWS::AccountId
      SourceArn:
        Fn::GetAtt:
          - TestInputBucketD9549596
          - Arn
    Metadata:
      aws:cdk:path: CdkBatchStack/Test/InputBucket/AllowBucketNotificationsToCdkBatchStackTestBucketArrival87E94BF9
  TestOutputBucketE24E351F:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: aws-cdk:auto-delete-objects
          Value: "true"
        - Key: purpose
          Value: BatchTest
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: CdkBatchStack/Test/OutputBucket/Resource
  TestOutputBucketPolicy8F35CAC0:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: TestOutputBucketE24E351F
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetBucket*
              - s3:List*
              - s3:DeleteObject*
            Effect: Allow
            Principal:
              AWS:
                Fn::GetAtt:
                  - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
                  - Arn
            Resource:
              - Fn::GetAtt:
                  - TestOutputBucketE24E351F
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - TestOutputBucketE24E351F
                        - Arn
                    - /*
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: CdkBatchStack/Test/OutputBucket/Policy/Resource
  TestOutputBucketAutoDeleteObjectsCustomResource0F9E8B20:
    Type: Custom::S3AutoDeleteObjects
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F
          - Arn
      BucketName:
        Ref: TestOutputBucketE24E351F
    DependsOn:
      - TestOutputBucketPolicy8F35CAC0
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: CdkBatchStack/Test/OutputBucket/AutoDeleteObjectsCustomResource/Default
  TestbatchServiceRoleDC916500:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: batch.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSBatchServiceRole
      RoleName: batchServiceRole
      Tags:
        - Key: purpose
          Value: BatchTest
    Metadata:
      aws:cdk:path: CdkBatchStack/Test/batchServiceRole/Resource
  TestspotFleetRoleCB7C631A:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: spotfleet.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole
      RoleName: AmazonEC2SpotFleetRole
      Tags:
        - Key: purpose
          Value: BatchTest
    Metadata:
      aws:cdk:path: CdkBatchStack/Test/spotFleetRole/Resource
  TestbatchInstanceRole53818352:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - ec2.
                    - Ref: AWS::URLSuffix
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AmazonS3FullAccess
      RoleName: batchInstanceRole
      Tags:
        - Key: purpose
          Value: BatchTest
    Metadata:
      aws:cdk:path: CdkBatchStack/Test/batchInstanceRole/Resource
  TestbatchInstanceRoleDefaultPolicy8737C3AF:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - TestInputBucketD9549596
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - TestInputBucketD9549596
                        - Arn
                    - /*
          - Action:
              - s3:DeleteObject*
              - s3:PutObject
              - s3:PutObjectLegalHold
              - s3:PutObjectRetention
              - s3:PutObjectTagging
              - s3:PutObjectVersionTagging
              - s3:Abort*
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - TestOutputBucketE24E351F
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - TestOutputBucketE24E351F
                        - Arn
                    - /*
          - Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":ecr:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :repository/
                  - Fn::Sub: cdk-hnb659fds-container-assets-${AWS::AccountId}-${AWS::Region}
          - Action: ecr:GetAuthorizationToken
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: TestbatchInstanceRoleDefaultPolicy8737C3AF
      Roles:
        - Ref: TestbatchInstanceRole53818352
    Metadata:
      aws:cdk:path: CdkBatchStack/Test/batchInstanceRole/DefaultPolicy/Resource
  TestbatchInstanceProfileE44496AC:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: TestbatchInstanceRole53818352
      InstanceProfileName:
        Ref: TestbatchInstanceRole53818352
    Metadata:
      aws:cdk:path: CdkBatchStack/Test/batchInstanceProfile
  TestSpotFleetEnvironmentResourceSecurityGroup1C2236AB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: CdkBatchStack/Test/SpotFleetEnvironment/Resource-Security-Group
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      Tags:
        - Key: purpose
          Value: BatchTest
      VpcId:
        Ref: BatchVPCBCF115DF
    DependsOn:
      - BatchVPCIGW191A5E68
      - BatchVPCPrivateSubnet1DefaultRoute601FB5DC
      - BatchVPCPrivateSubnet1RouteTable92CB5A44
      - BatchVPCPrivateSubnet1RouteTableAssociation62063597
      - BatchVPCPrivateSubnet1Subnet9E0B01C6
      - BatchVPCPrivateSubnet2DefaultRoute442AD5C5
      - BatchVPCPrivateSubnet2RouteTable6D5CD5BB
      - BatchVPCPrivateSubnet2RouteTableAssociation09C29241
      - BatchVPCPrivateSubnet2SubnetF8E2E6C8
      - BatchVPCPublicSubnet1DefaultRouteA192F7AB
      - BatchVPCPublicSubnet1EIP5436ABA5
      - BatchVPCPublicSubnet1NATGateway835D0E0A
      - BatchVPCPublicSubnet1RouteTable86AB0677
      - BatchVPCPublicSubnet1RouteTableAssociation698EA42C
      - BatchVPCPublicSubnet1Subnet5BAE427C
      - BatchVPCPublicSubnet2DefaultRoute06D13533
      - BatchVPCPublicSubnet2EIPB0B7D72B
      - BatchVPCPublicSubnet2NATGatewayBAC4C028
      - BatchVPCPublicSubnet2RouteTable4FC84E84
      - BatchVPCPublicSubnet2RouteTableAssociation8F491EF0
      - BatchVPCPublicSubnet2Subnet1A7FFF1F
      - BatchVPCBCF115DF
      - BatchVPCVPCGW9EF913D1
    Metadata:
      aws:cdk:path: CdkBatchStack/Test/SpotFleetEnvironment/Resource-Security-Group/Resource
  TestSpotFleetEnvironmentResourceServiceInstanceRole8CFDBF23:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: batch.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSBatchServiceRole
      Tags:
        - Key: purpose
          Value: BatchTest
    DependsOn:
      - BatchVPCIGW191A5E68
      - BatchVPCPrivateSubnet1DefaultRoute601FB5DC
      - BatchVPCPrivateSubnet1RouteTable92CB5A44
      - BatchVPCPrivateSubnet1RouteTableAssociation62063597
      - BatchVPCPrivateSubnet1Subnet9E0B01C6
      - BatchVPCPrivateSubnet2DefaultRoute442AD5C5
      - BatchVPCPrivateSubnet2RouteTable6D5CD5BB
      - BatchVPCPrivateSubnet2RouteTableAssociation09C29241
      - BatchVPCPrivateSubnet2SubnetF8E2E6C8
      - BatchVPCPublicSubnet1DefaultRouteA192F7AB
      - BatchVPCPublicSubnet1EIP5436ABA5
      - BatchVPCPublicSubnet1NATGateway835D0E0A
      - BatchVPCPublicSubnet1RouteTable86AB0677
      - BatchVPCPublicSubnet1RouteTableAssociation698EA42C
      - BatchVPCPublicSubnet1Subnet5BAE427C
      - BatchVPCPublicSubnet2DefaultRoute06D13533
      - BatchVPCPublicSubnet2EIPB0B7D72B
      - BatchVPCPublicSubnet2NATGatewayBAC4C028
      - BatchVPCPublicSubnet2RouteTable4FC84E84
      - BatchVPCPublicSubnet2RouteTableAssociation8F491EF0
      - BatchVPCPublicSubnet2Subnet1A7FFF1F
      - BatchVPCBCF115DF
      - BatchVPCVPCGW9EF913D1
    Metadata:
      aws:cdk:path: CdkBatchStack/Test/SpotFleetEnvironment/Resource-Service-Instance-Role/Resource
  TestSpotFleetEnvironment29919AAF:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      Type: MANAGED
      ComputeResources:
        AllocationStrategy: SPOT_CAPACITY_OPTIMIZED
        DesiredvCpus: 0
        InstanceRole:
          Ref: TestbatchInstanceRole53818352
        InstanceTypes:
          - c4.large
        MaxvCpus: 128
        MinvCpus: 0
        SecurityGroupIds:
          - Fn::GetAtt:
              - TestSpotFleetEnvironmentResourceSecurityGroup1C2236AB
              - GroupId
        SpotIamFleetRole:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":iam::"
              - Ref: AWS::AccountId
              - :role/aws-service-role/spotfleet.amazonaws.com/AWSServiceRoleForEC2SpotFleet
        Subnets:
          - Ref: BatchVPCPrivateSubnet1Subnet9E0B01C6
          - Ref: BatchVPCPrivateSubnet2SubnetF8E2E6C8
        Type: SPOT
      ServiceRole:
        Fn::GetAtt:
          - TestSpotFleetEnvironmentResourceServiceInstanceRole8CFDBF23
          - Arn
      State: ENABLED
      Tags:
        purpose: BatchTest
    DependsOn:
      - BatchVPCIGW191A5E68
      - BatchVPCPrivateSubnet1DefaultRoute601FB5DC
      - BatchVPCPrivateSubnet1RouteTable92CB5A44
      - BatchVPCPrivateSubnet1RouteTableAssociation62063597
      - BatchVPCPrivateSubnet1Subnet9E0B01C6
      - BatchVPCPrivateSubnet2DefaultRoute442AD5C5
      - BatchVPCPrivateSubnet2RouteTable6D5CD5BB
      - BatchVPCPrivateSubnet2RouteTableAssociation09C29241
      - BatchVPCPrivateSubnet2SubnetF8E2E6C8
      - BatchVPCPublicSubnet1DefaultRouteA192F7AB
      - BatchVPCPublicSubnet1EIP5436ABA5
      - BatchVPCPublicSubnet1NATGateway835D0E0A
      - BatchVPCPublicSubnet1RouteTable86AB0677
      - BatchVPCPublicSubnet1RouteTableAssociation698EA42C
      - BatchVPCPublicSubnet1Subnet5BAE427C
      - BatchVPCPublicSubnet2DefaultRoute06D13533
      - BatchVPCPublicSubnet2EIPB0B7D72B
      - BatchVPCPublicSubnet2NATGatewayBAC4C028
      - BatchVPCPublicSubnet2RouteTable4FC84E84
      - BatchVPCPublicSubnet2RouteTableAssociation8F491EF0
      - BatchVPCPublicSubnet2Subnet1A7FFF1F
      - BatchVPCBCF115DF
      - BatchVPCVPCGW9EF913D1
    Metadata:
      aws:cdk:path: CdkBatchStack/Test/SpotFleetEnvironment/Resource
  TestJobQueueB38D479B:
    Type: AWS::Batch::JobQueue
    Properties:
      ComputeEnvironmentOrder:
        - ComputeEnvironment:
            Ref: TestSpotFleetEnvironment29919AAF
          Order: 1
      Priority: 1
      State: ENABLED
      Tags:
        purpose: BatchTest
    Metadata:
      aws:cdk:path: CdkBatchStack/Test/JobQueue/Resource
  TestTestJob9A89A3EB:
    Type: AWS::Batch::JobDefinition
    Properties:
      Type: container
      ContainerProperties:
        ExecutionRoleArn:
          Fn::GetAtt:
            - TestbatchInstanceRole53818352
            - Arn
        Image:
          Fn::Sub: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/cdk-hnb659fds-container-assets-${AWS::AccountId}-${AWS::Region}:d2ecc6e4fd8e883491a88659259a74099fe420575026c374262cffc68b81b135
        JobRoleArn:
          Fn::GetAtt:
            - TestbatchInstanceRole53818352
            - Arn
        Privileged: false
        ReadonlyRootFilesystem: false
        ResourceRequirements:
          - Type: VCPU
            Value: "1"
          - Type: MEMORY
            Value: "4"
      PlatformCapabilities:
        - EC2
      RetryStrategy:
        Attempts: 3
      Tags:
        purpose: BatchTest
      Timeout:
        AttemptDurationSeconds: 86400
    Metadata:
      aws:cdk:path: CdkBatchStack/Test/TestJob/Resource
  TestBucketArrivalServiceRole34B4DC8B:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: purpose
          Value: BatchTest
    Metadata:
      aws:cdk:path: CdkBatchStack/Test/BucketArrival/ServiceRole/Resource
  TestBucketArrivalServiceRoleDefaultPolicy75681206:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - TestInputBucketD9549596
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - TestInputBucketD9549596
                        - Arn
                    - /*
        Version: "2012-10-17"
      PolicyName: TestBucketArrivalServiceRoleDefaultPolicy75681206
      Roles:
        - Ref: TestBucketArrivalServiceRole34B4DC8B
    Metadata:
      aws:cdk:path: CdkBatchStack/Test/BucketArrival/ServiceRole/DefaultPolicy/Resource
  TestBucketArrivalF04759FD:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 5cefdc6ef7953ec07a41461e1f90a852bdbf55eb672b4079ce15d8fc7ae6d6fd.zip
      Role:
        Fn::GetAtt:
          - TestBucketArrivalServiceRole34B4DC8B
          - Arn
      Environment:
        Variables:
          JOB_DEFINITION_NAME:
            Ref: TestTestJob9A89A3EB
          JOB_QUEUE_NAME:
            Ref: TestJobQueueB38D479B
          S3_OUTPUT_BUCKET:
            Ref: TestOutputBucketE24E351F
      Handler: bucketarrival.handler
      Runtime: nodejs14.x
      Tags:
        - Key: purpose
          Value: BatchTest
    DependsOn:
      - TestBucketArrivalServiceRoleDefaultPolicy75681206
      - TestBucketArrivalServiceRole34B4DC8B
    Metadata:
      aws:cdk:path: CdkBatchStack/Test/BucketArrival/Resource
      aws:asset:path: asset.5cefdc6ef7953ec07a41461e1f90a852bdbf55eb672b4079ce15d8fc7ae6d6fd
      aws:asset:is-bundled: false
      aws:asset:property: Code
  TestBucketArrivalLogRetention11279D14:
    Type: Custom::LogRetention
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A
          - Arn
      LogGroupName:
        Fn::Join:
          - ""
          - - /aws/lambda/
            - Ref: TestBucketArrivalF04759FD
    Metadata:
      aws:cdk:path: CdkBatchStack/Test/BucketArrival/LogRetention/Resource
  Testsubmitjobspolicy951573EF:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: batch:SubmitJob
            Effect: Allow
            Resource:
              - Ref: TestTestJob9A89A3EB
              - Ref: TestJobQueueB38D479B
        Version: "2012-10-17"
      PolicyName: Testsubmitjobspolicy951573EF
      Roles:
        - Ref: TestBucketArrivalServiceRole34B4DC8B
    Metadata:
      aws:cdk:path: CdkBatchStack/Test/submit-jobs-policy/Resource
  CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: CdkBatchStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Role
  CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 483ae06ed27ef8ca76e011264d772420593a6cfe8544759c306ef3b98c9e25be.zip
      Timeout: 900
      MemorySize: 128
      Handler: __entrypoint__.handler
      Role:
        Fn::GetAtt:
          - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
          - Arn
      Runtime: nodejs12.x
      Description:
        Fn::Join:
          - ""
          - - "Lambda function for auto-deleting objects in "
            - Ref: TestInputBucketD9549596
            - " S3 bucket."
    DependsOn:
      - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
    Metadata:
      aws:cdk:path: CdkBatchStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Handler
      aws:asset:path: asset.483ae06ed27ef8ca76e011264d772420593a6cfe8544759c306ef3b98c9e25be
      aws:asset:property: Code
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: purpose
          Value: BatchTest
    Metadata:
      aws:cdk:path: CdkBatchStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: s3:PutBucketNotification
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      Roles:
        - Ref: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: CdkBatchStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691:
    Type: AWS::Lambda::Function
    Properties:
      Description: AWS CloudFormation handler for "Custom::S3BucketNotifications" resources (@aws-cdk/aws-s3)
      Code:
        ZipFile: |
          import boto3  # type: ignore
          import json
          import logging
          import urllib.request

          s3 = boto3.client("s3")

          CONFIGURATION_TYPES = ["TopicConfigurations", "QueueConfigurations", "LambdaFunctionConfigurations"]

          def handler(event: dict, context):
              response_status = "SUCCESS"
              error_message = ""
              try:
                  props = event["ResourceProperties"]
                  bucket = props["BucketName"]
                  notification_configuration = props["NotificationConfiguration"]
                  request_type = event["RequestType"]
                  managed = props.get('Managed', 'true').lower() == 'true'
                  stack_id = event['StackId']

                  if managed:
                    config = handle_managed(request_type, notification_configuration)
                  else:
                    config = handle_unmanaged(bucket, stack_id, request_type, notification_configuration)

                  put_bucket_notification_configuration(bucket, config)
              except Exception as e:
                  logging.exception("Failed to put bucket notification configuration")
                  response_status = "FAILED"
                  error_message = f"Error: {str(e)}. "
              finally:
                  submit_response(event, context, response_status, error_message)


          def handle_managed(request_type, notification_configuration):
            if request_type == 'Delete':
              return {}
            return notification_configuration


          def handle_unmanaged(bucket, stack_id, request_type, notification_configuration):

            # find external notifications
            external_notifications = find_external_notifications(bucket, stack_id)

            # if delete, that's all we need
            if request_type == 'Delete':
              return external_notifications

            def with_id(notification):
              notification['Id'] = f"{stack_id}-{hash(json.dumps(notification, sort_keys=True))}"
              return notification

            # otherwise, merge external with incoming config and augment with id
            notifications = {}
            for t in CONFIGURATION_TYPES:
              external = external_notifications.get(t, [])
              incoming = [with_id(n) for n in notification_configuration.get(t, [])]
              notifications[t] = external + incoming
            return notifications


          def find_external_notifications(bucket, stack_id):
            existing_notifications = get_bucket_notification_configuration(bucket)
            external_notifications = {}
            for t in CONFIGURATION_TYPES:
              # if the notification was created by us, we know what id to expect
              # so we can filter by it.
              external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f"{stack_id}-")]

            return external_notifications


          def get_bucket_notification_configuration(bucket):
            return s3.get_bucket_notification_configuration(Bucket=bucket)


          def put_bucket_notification_configuration(bucket, notification_configuration):
            s3.put_bucket_notification_configuration(Bucket=bucket, NotificationConfiguration=notification_configuration)


          def submit_response(event: dict, context, response_status: str, error_message: str):
              response_body = json.dumps(
                  {
                      "Status": response_status,
                      "Reason": f"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}",
                      "PhysicalResourceId": event.get("PhysicalResourceId") or event["LogicalResourceId"],
                      "StackId": event["StackId"],
                      "RequestId": event["RequestId"],
                      "LogicalResourceId": event["LogicalResourceId"],
                      "NoEcho": False,
                  }
              ).encode("utf-8")
              headers = {"content-type": "", "content-length": str(len(response_body))}
              try:
                  req = urllib.request.Request(url=event["ResponseURL"], headers=headers, data=response_body, method="PUT")
                  with urllib.request.urlopen(req) as response:
                      print(response.read().decode("utf-8"))
                  print("Status code: " + response.reason)
              except Exception as e:
                  print("send(..) failed executing request.urlopen(..): " + str(e))
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
          - Arn
      Runtime: python3.7
      Timeout: 300
      Tags:
        - Key: purpose
          Value: BatchTest
    DependsOn:
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: CdkBatchStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource
  LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: purpose
          Value: BatchTest
    Metadata:
      aws:cdk:path: CdkBatchStack/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/ServiceRole/Resource
  LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:PutRetentionPolicy
              - logs:DeleteRetentionPolicy
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB
      Roles:
        - Ref: LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB
    Metadata:
      aws:cdk:path: CdkBatchStack/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/ServiceRole/DefaultPolicy/Resource
  LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs14.x
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 558dc75fbdc793c8e2f64f85d2d7ed2cb820c727ec7e9b08666ad1af0103992e.zip
      Role:
        Fn::GetAtt:
          - LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB
          - Arn
      Tags:
        - Key: purpose
          Value: BatchTest
    DependsOn:
      - LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB
      - LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB
    Metadata:
      aws:cdk:path: CdkBatchStack/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/Resource
      aws:asset:path: asset.558dc75fbdc793c8e2f64f85d2d7ed2cb820c727ec7e9b08666ad1af0103992e
      aws:asset:is-bundled: false
      aws:asset:property: Code
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/21STVPjMAz9LdxdQ8uFI1BYpjsMhHSHK+M4aiqaWBnLLtPJ9L+v8oV3d/akpyfF0nvRSnfLG311Yb54YcvDosZCd9tg7EEJ9dGBXenuvbVqvXPv2VplsajRbmPhIPRcQjnFAL9MUUPiE3fHTBZNQHLfzT143GR9eDHhyQT4MieVeTwKTA9vXAAveG4YN5myuyC77htwQW3BRo/h9OQptsMOfxJnxde6u4/2ML46oTFkJKJOiZ7yMbk3DGdVm6Yoje6kJwPfIHMv5Ud0dtY047NC0+gup9GJIaYBCW0cB+MsZJ52WMuIwgS7HyasqWnFoEd3RE9uUCfsTyreIkSY8APs0OE4ESzrNblg0IFPBeH9h2GGwPqBRIzfNKbqf4ZIl5rOoSXGQP7UqxSL5u6xpaaK9TNVOQTZYZiUA1P0VpaIHKhJqSid8fCxHFGFruoLrzGInH++ENlHLMGrQa8rJyXLa321MHW7N3KVt9NZXvZxsGcqdf9x6Nuev705K0cl6E++PMqlL1d6efHJiAsfRVEDOh/jb1Lbx5QJAwAA
    Metadata:
      aws:cdk:path: CdkBatchStack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Outputs:
  TestinputBucketName629733F1:
    Description: Files placed in here will trigger a batch job submission
    Value:
      Ref: TestInputBucketD9549596
    Export:
      Name: inputBucket
  TestoutputBucketNameD0E58CA5:
    Description: Jobs should write output here
    Value:
      Ref: TestOutputBucketE24E351F
    Export:
      Name: outputBucket
  TestjobQueueNameAC5A9B0E:
    Description: The job queue to submit jobs to
    Value:
      Ref: TestJobQueueB38D479B
    Export:
      Name: jobQueuesName
  TestjobDefinitionName52E6FFA0:
    Description: Test job definition
    Value:
      Ref: TestTestJob9A89A3EB
    Export:
      Name: testJobDefinitionName
  TestsubmissionLogGroupA9CCA281:
    Description: Logs of batch submission by the lambda function will be here
    Value:
      Fn::Join:
        - ""
        - - "arn:"
          - Ref: AWS::Partition
          - ":logs:"
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":log-group:"
          - Fn::GetAtt:
              - TestBucketArrivalLogRetention11279D14
              - LogGroupName
          - :*
    Export:
      Name: submissionLogGroup
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
Rules:
  CheckBootstrapVersion:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::Contains:
                - - "1"
                  - "2"
                  - "3"
                  - "4"
                  - "5"
                - Ref: BootstrapVersion
        AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.

