Resources:
  vpcA2121C38:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: EcsEc2AutoscalingStack/vpc
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/vpc/Resource
  vpcPublicSubnet1Subnet2E65531E:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/18
      VpcId:
        Ref: vpcA2121C38
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: EcsEc2AutoscalingStack/vpc/PublicSubnet1
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/vpc/PublicSubnet1/Subnet
  vpcPublicSubnet1RouteTable48A2DF9B:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: vpcA2121C38
      Tags:
        - Key: Name
          Value: EcsEc2AutoscalingStack/vpc/PublicSubnet1
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/vpc/PublicSubnet1/RouteTable
  vpcPublicSubnet1RouteTableAssociation5D3F4579:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: vpcPublicSubnet1RouteTable48A2DF9B
      SubnetId:
        Ref: vpcPublicSubnet1Subnet2E65531E
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/vpc/PublicSubnet1/RouteTableAssociation
  vpcPublicSubnet1DefaultRoute10708846:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: vpcPublicSubnet1RouteTable48A2DF9B
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: vpcIGWE57CBDCA
    DependsOn:
      - vpcVPCGW7984C166
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/vpc/PublicSubnet1/DefaultRoute
  vpcPublicSubnet1EIPDA49DCBE:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/vpc/PublicSubnet1/EIP
  vpcPublicSubnet1NATGateway9C16659E:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - vpcPublicSubnet1EIPDA49DCBE
          - AllocationId
      SubnetId:
        Ref: vpcPublicSubnet1Subnet2E65531E
      Tags:
        - Key: Name
          Value: EcsEc2AutoscalingStack/vpc/PublicSubnet1
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/vpc/PublicSubnet1/NATGateway
  vpcPublicSubnet2Subnet009B674F:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.64.0/18
      VpcId:
        Ref: vpcA2121C38
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: EcsEc2AutoscalingStack/vpc/PublicSubnet2
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/vpc/PublicSubnet2/Subnet
  vpcPublicSubnet2RouteTableEB40D4CB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: vpcA2121C38
      Tags:
        - Key: Name
          Value: EcsEc2AutoscalingStack/vpc/PublicSubnet2
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/vpc/PublicSubnet2/RouteTable
  vpcPublicSubnet2RouteTableAssociation21F81B59:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: vpcPublicSubnet2RouteTableEB40D4CB
      SubnetId:
        Ref: vpcPublicSubnet2Subnet009B674F
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/vpc/PublicSubnet2/RouteTableAssociation
  vpcPublicSubnet2DefaultRouteA1EC0F60:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: vpcPublicSubnet2RouteTableEB40D4CB
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: vpcIGWE57CBDCA
    DependsOn:
      - vpcVPCGW7984C166
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/vpc/PublicSubnet2/DefaultRoute
  vpcPublicSubnet2EIP9B3743B1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/vpc/PublicSubnet2/EIP
  vpcPublicSubnet2NATGateway9B8AE11A:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - vpcPublicSubnet2EIP9B3743B1
          - AllocationId
      SubnetId:
        Ref: vpcPublicSubnet2Subnet009B674F
      Tags:
        - Key: Name
          Value: EcsEc2AutoscalingStack/vpc/PublicSubnet2
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/vpc/PublicSubnet2/NATGateway
  vpcPrivateSubnet1Subnet934893E8:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.128.0/18
      VpcId:
        Ref: vpcA2121C38
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: EcsEc2AutoscalingStack/vpc/PrivateSubnet1
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/vpc/PrivateSubnet1/Subnet
  vpcPrivateSubnet1RouteTableB41A48CC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: vpcA2121C38
      Tags:
        - Key: Name
          Value: EcsEc2AutoscalingStack/vpc/PrivateSubnet1
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/vpc/PrivateSubnet1/RouteTable
  vpcPrivateSubnet1RouteTableAssociation67945127:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: vpcPrivateSubnet1RouteTableB41A48CC
      SubnetId:
        Ref: vpcPrivateSubnet1Subnet934893E8
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/vpc/PrivateSubnet1/RouteTableAssociation
  vpcPrivateSubnet1DefaultRoute1AA8E2E5:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: vpcPrivateSubnet1RouteTableB41A48CC
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: vpcPublicSubnet1NATGateway9C16659E
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/vpc/PrivateSubnet1/DefaultRoute
  vpcPrivateSubnet2Subnet7031C2BA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.192.0/18
      VpcId:
        Ref: vpcA2121C38
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: EcsEc2AutoscalingStack/vpc/PrivateSubnet2
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/vpc/PrivateSubnet2/Subnet
  vpcPrivateSubnet2RouteTable7280F23E:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: vpcA2121C38
      Tags:
        - Key: Name
          Value: EcsEc2AutoscalingStack/vpc/PrivateSubnet2
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/vpc/PrivateSubnet2/RouteTable
  vpcPrivateSubnet2RouteTableAssociation007E94D3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: vpcPrivateSubnet2RouteTable7280F23E
      SubnetId:
        Ref: vpcPrivateSubnet2Subnet7031C2BA
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/vpc/PrivateSubnet2/RouteTableAssociation
  vpcPrivateSubnet2DefaultRouteB0E07F99:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: vpcPrivateSubnet2RouteTable7280F23E
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: vpcPublicSubnet2NATGateway9B8AE11A
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/vpc/PrivateSubnet2/DefaultRoute
  vpcIGWE57CBDCA:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: EcsEc2AutoscalingStack/vpc
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/vpc/IGW
  vpcVPCGW7984C166:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: vpcA2121C38
      InternetGatewayId:
        Ref: vpcIGWE57CBDCA
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/vpc/VPCGW
  alb8A8B13C2:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes: []
      Scheme: internet-facing
      SecurityGroups:
        - Fn::GetAtt:
            - albSecurityGroup49866104
            - GroupId
      Subnets:
        - Ref: vpcPublicSubnet1Subnet2E65531E
        - Ref: vpcPublicSubnet2Subnet009B674F
      Type: application
    DependsOn:
      - vpcPublicSubnet1DefaultRoute10708846
      - vpcPublicSubnet2DefaultRouteA1EC0F60
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/alb/Resource
  albSecurityGroup49866104:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatically created Security Group for ELB EcsEc2AutoscalingStackalb6E6E413D
      SecurityGroupEgress: []
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Ref: vpcA2121C38
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/alb/SecurityGroup/Resource
  albSecurityGrouptoEcsEc2AutoscalingStackasgInstanceSecurityGroupC361C5353276865535AD78F15E:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId:
        Fn::GetAtt:
          - albSecurityGroup49866104
          - GroupId
      IpProtocol: tcp
      Description: Load balancer to target
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - asgInstanceSecurityGroup5CEB2975
          - GroupId
      FromPort: 32768
      ToPort: 65535
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/alb/SecurityGroup/to EcsEc2AutoscalingStackasgInstanceSecurityGroupC361C535:32768-65535
  alblistenerC508FBF5:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: blackholetarget66E85395
          Type: forward
      LoadBalancerArn:
        Ref: alb8A8B13C2
      Port: 80
      Protocol: HTTP
      Certificates: []
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/alb/listener/Resource
  alblistenerwebservice1Group4A86C90B:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /api/v2/health
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes: []
      Targets: []
      TargetType: instance
      VpcId:
        Ref: vpcA2121C38
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/alb/listener/web-service-1Group/Resource
  alblistenerwebservice1RuleE0581356:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn:
            Ref: alblistenerwebservice1Group4A86C90B
          Type: forward
      Conditions:
        - Field: host-header
          Values:
            - web-1.com
      ListenerArn:
        Ref: alblistenerC508FBF5
      Priority: 1
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/alb/listener/web-service-1Rule/Resource
  alblistenerwebservice2GroupBCE0FAEA:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /api/v2/health
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes: []
      Targets: []
      TargetType: instance
      VpcId:
        Ref: vpcA2121C38
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/alb/listener/web-service-2Group/Resource
  alblistenerwebservice2RuleFCA26EBA:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn:
            Ref: alblistenerwebservice2GroupBCE0FAEA
          Type: forward
      Conditions:
        - Field: host-header
          Values:
            - web-2.com
      ListenerArn:
        Ref: alblistenerC508FBF5
      Priority: 2
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/alb/listener/web-service-2Rule/Resource
  blackholetarget66E85395:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes: []
      Targets: []
      VpcId:
        Ref: vpcA2121C38
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/black-hole-target/Resource
  cluster611F8AFF:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: ecs-ec2-autoscaling
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/cluster/Resource
  asgInstanceSecurityGroup5CEB2975:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EcsEc2AutoscalingStack/asg/InstanceSecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress: []
      Tags:
        - Key: Name
          Value: EcsEc2AutoscalingStack/asg
      VpcId:
        Ref: vpcA2121C38
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/asg/InstanceSecurityGroup/Resource
  asgInstanceSecurityGroupfromEcsEc2AutoscalingStackalbSecurityGroupA6E1A2163276865535F85CC189:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort: 32768
      GroupId:
        Fn::GetAtt:
          - asgInstanceSecurityGroup5CEB2975
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - albSecurityGroup49866104
          - GroupId
      ToPort: 65535
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/asg/InstanceSecurityGroup/from EcsEc2AutoscalingStackalbSecurityGroupA6E1A216:32768-65535
  asgInstanceRole8AC4201C:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - ec2.
                    - Ref: AWS::URLSuffix
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/asg/InstanceRole/Resource
  asgInstanceRoleDefaultPolicyFF611E81:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecs:CreateCluster
              - ecs:DeregisterContainerInstance
              - ecs:DiscoverPollEndpoint
              - ecs:Poll
              - ecs:RegisterContainerInstance
              - ecs:StartTelemetrySession
              - ecs:Submit*
              - ecr:GetAuthorizationToken
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: asgInstanceRoleDefaultPolicyFF611E81
      Roles:
        - Ref: asgInstanceRole8AC4201C
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/asg/InstanceRole/DefaultPolicy/Resource
  asgInstanceProfile4E44E320:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: asgInstanceRole8AC4201C
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/asg/InstanceProfile
  asgLaunchConfig37FDE42B:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        Ref: SsmParameterValueawsserviceecsoptimizedamiamazonlinuxrecommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter
      InstanceType: t2.large
      IamInstanceProfile:
        Ref: asgInstanceProfile4E44E320
      SecurityGroups:
        - Fn::GetAtt:
            - asgInstanceSecurityGroup5CEB2975
            - GroupId
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - |-
                #!/bin/bash
                echo ECS_CLUSTER=
              - Ref: cluster611F8AFF
              - |-2
                 >> /etc/ecs/ecs.config
                sudo iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP
                sudo service iptables save
                echo ECS_AWSVPC_BLOCK_IMDS=true >> /etc/ecs/ecs.config
    DependsOn:
      - asgInstanceRoleDefaultPolicyFF611E81
      - asgInstanceRole8AC4201C
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/asg/LaunchConfig
  asgASG4D014670:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MaxSize: "20"
      MinSize: "3"
      Cooldown: "60"
      DesiredCapacity: "3"
      LaunchConfigurationName:
        Ref: asgLaunchConfig37FDE42B
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: EcsEc2AutoscalingStack/asg
      VPCZoneIdentifier:
        - Ref: vpcPrivateSubnet1Subnet934893E8
        - Ref: vpcPrivateSubnet2Subnet7031C2BA
    UpdatePolicy:
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: true
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/asg/ASG
  asgScalingPolicycpuinstancescaling9EE34D86:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName:
        Ref: asgASG4D014670
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 60
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/asg/ScalingPolicycpu-instance-scaling/Resource
  asgDrainECSHookFunctionServiceRoleC052B966:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - lambda.
                    - Ref: AWS::URLSuffix
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/asg/DrainECSHook/Function/ServiceRole/Resource
  asgDrainECSHookFunctionServiceRoleDefaultPolicy4BFB0871:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ec2:DescribeInstances
              - ec2:DescribeInstanceAttribute
              - ec2:DescribeInstanceStatus
              - ec2:DescribeHosts
            Effect: Allow
            Resource: "*"
          - Action: autoscaling:CompleteLifecycleAction
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":autoscaling:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :autoScalingGroup:*:autoScalingGroupName/
                  - Ref: asgASG4D014670
          - Action:
              - ecs:DescribeContainerInstances
              - ecs:DescribeTasks
            Effect: Allow
            Resource: "*"
          - Action:
              - ecs:ListContainerInstances
              - ecs:SubmitContainerStateChange
              - ecs:SubmitTaskStateChange
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - cluster611F8AFF
                - Arn
          - Action:
              - ecs:UpdateContainerInstancesState
              - ecs:ListTasks
            Condition:
              ArnEquals:
                ecs:cluster:
                  Fn::GetAtt:
                    - cluster611F8AFF
                    - Arn
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: asgDrainECSHookFunctionServiceRoleDefaultPolicy4BFB0871
      Roles:
        - Ref: asgDrainECSHookFunctionServiceRoleC052B966
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/asg/DrainECSHook/Function/ServiceRole/DefaultPolicy/Resource
  asgDrainECSHookFunction4A673AE9:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3, json, os, time

          ecs = boto3.client('ecs')
          autoscaling = boto3.client('autoscaling')


          def lambda_handler(event, context):
            print(json.dumps(event))
            cluster = os.environ['CLUSTER']
            snsTopicArn = event['Records'][0]['Sns']['TopicArn']
            lifecycle_event = json.loads(event['Records'][0]['Sns']['Message'])
            instance_id = lifecycle_event.get('EC2InstanceId')
            if not instance_id:
              print('Got event without EC2InstanceId: %s', json.dumps(event))
              return

            instance_arn = container_instance_arn(cluster, instance_id)
            print('Instance %s has container instance ARN %s' % (lifecycle_event['EC2InstanceId'], instance_arn))

            if not instance_arn:
              return

            while has_tasks(cluster, instance_arn):
              time.sleep(10)

            try:
              print('Terminating instance %s' % instance_id)
              autoscaling.complete_lifecycle_action(
                  LifecycleActionResult='CONTINUE',
                  **pick(lifecycle_event, 'LifecycleHookName', 'LifecycleActionToken', 'AutoScalingGroupName'))
            except Exception as e:
              # Lifecycle action may have already completed.
              print(str(e))


          def container_instance_arn(cluster, instance_id):
            """Turn an instance ID into a container instance ARN."""
            arns = ecs.list_container_instances(cluster=cluster, filter='ec2InstanceId==' + instance_id)['containerInstanceArns']
            if not arns:
              return None
            return arns[0]


          def has_tasks(cluster, instance_arn):
            """Return True if the instance is running tasks for the given cluster."""
            instances = ecs.describe_container_instances(cluster=cluster, containerInstances=[instance_arn])['containerInstances']
            if not instances:
              return False
            instance = instances[0]

            if instance['status'] == 'ACTIVE':
              # Start draining, then try again later
              set_container_instance_to_draining(cluster, instance_arn)
              return True

            tasks = instance['runningTasksCount'] + instance['pendingTasksCount']
            print('Instance %s has %s tasks' % (instance_arn, tasks))

            return tasks > 0


          def set_container_instance_to_draining(cluster, instance_arn):
            ecs.update_container_instances_state(
                cluster=cluster,
                containerInstances=[instance_arn], status='DRAINING')


          def pick(dct, *keys):
            """Pick a subset of a dict."""
            return {k: v for k, v in dct.items() if k in keys}
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
          - asgDrainECSHookFunctionServiceRoleC052B966
          - Arn
      Runtime: python3.6
      Environment:
        Variables:
          CLUSTER:
            Ref: cluster611F8AFF
      Tags:
        - Key: Name
          Value: EcsEc2AutoscalingStack/asg
      Timeout: 310
    DependsOn:
      - asgDrainECSHookFunctionServiceRoleDefaultPolicy4BFB0871
      - asgDrainECSHookFunctionServiceRoleC052B966
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/asg/DrainECSHook/Function/Resource
  asgDrainECSHookFunctionAllowInvokeEcsEc2AutoscalingStackasgLifecycleHookDrainHookTopicAC2BEB5C4D82C3AE:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - asgDrainECSHookFunction4A673AE9
          - Arn
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: asgLifecycleHookDrainHookTopicC6CABF48
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/asg/DrainECSHook/Function/AllowInvoke:EcsEc2AutoscalingStackasgLifecycleHookDrainHookTopicAC2BEB5C
  asgDrainECSHookFunctionTopicFFE1E612:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      TopicArn:
        Ref: asgLifecycleHookDrainHookTopicC6CABF48
      Endpoint:
        Fn::GetAtt:
          - asgDrainECSHookFunction4A673AE9
          - Arn
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/asg/DrainECSHook/Function/Topic/Resource
  asgLifecycleHookDrainHookRole3C1C981B:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - autoscaling.
                    - Ref: AWS::URLSuffix
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/asg/LifecycleHookDrainHook/Role/Resource
  asgLifecycleHookDrainHookRoleDefaultPolicy0B1C44ED:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: sns:Publish
            Effect: Allow
            Resource:
              Ref: asgLifecycleHookDrainHookTopicC6CABF48
        Version: "2012-10-17"
      PolicyName: asgLifecycleHookDrainHookRoleDefaultPolicy0B1C44ED
      Roles:
        - Ref: asgLifecycleHookDrainHookRole3C1C981B
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/asg/LifecycleHookDrainHook/Role/DefaultPolicy/Resource
  asgLifecycleHookDrainHookTopicC6CABF48:
    Type: AWS::SNS::Topic
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/asg/LifecycleHookDrainHook/Topic/Resource
  asgLifecycleHookDrainHook7D987AD1:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName:
        Ref: asgASG4D014670
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
      DefaultResult: CONTINUE
      HeartbeatTimeout: 300
      NotificationTargetARN:
        Ref: asgLifecycleHookDrainHookTopicC6CABF48
      RoleARN:
        Fn::GetAtt:
          - asgLifecycleHookDrainHookRole3C1C981B
          - Arn
    DependsOn:
      - asgLifecycleHookDrainHookRoleDefaultPolicy0B1C44ED
      - asgLifecycleHookDrainHookRole3C1C981B
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/asg/LifecycleHookDrainHook/Resource
  service1taskdefinitionTaskRoleDBDC79D1:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - ecs-tasks.
                    - Ref: AWS::URLSuffix
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/service-1-task-definition/TaskRole/Resource
  service1taskdefinition25AA8AFC:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Cpu: 128
          Essential: true
          Image: legdba/servicebox-nodejs
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: service1taskdefinitionwebLogGroup41E4DDE2
              awslogs-stream-prefix: ecs-ec2-autoscaling-service-1
              awslogs-region:
                Ref: AWS::Region
          Memory: 256
          Name: web
          PortMappings:
            - ContainerPort: 8080
              HostPort: 0
              Protocol: tcp
      ExecutionRoleArn:
        Fn::GetAtt:
          - service1taskdefinitionExecutionRole1329B8CC
          - Arn
      Family: EcsEc2AutoscalingStackservice1taskdefinition7042D217
      NetworkMode: bridge
      RequiresCompatibilities:
        - EC2
      TaskRoleArn:
        Fn::GetAtt:
          - service1taskdefinitionTaskRoleDBDC79D1
          - Arn
      Volumes: []
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/service-1-task-definition/Resource
  service1taskdefinitionwebLogGroup41E4DDE2:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/service-1-task-definition/web/LogGroup/Resource
  service1taskdefinitionExecutionRole1329B8CC:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - ecs-tasks.
                    - Ref: AWS::URLSuffix
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/service-1-task-definition/ExecutionRole/Resource
  service1taskdefinitionExecutionRoleDefaultPolicy3BD4DC4A:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - service1taskdefinitionwebLogGroup41E4DDE2
                - Arn
        Version: "2012-10-17"
      PolicyName: service1taskdefinitionExecutionRoleDefaultPolicy3BD4DC4A
      Roles:
        - Ref: service1taskdefinitionExecutionRole1329B8CC
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/service-1-task-definition/ExecutionRole/DefaultPolicy/Resource
  service1Service48DA6F6A:
    Type: AWS::ECS::Service
    Properties:
      TaskDefinition:
        Ref: service1taskdefinition25AA8AFC
      Cluster:
        Ref: cluster611F8AFF
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: 60
      LaunchType: EC2
      LoadBalancers:
        - ContainerName: web
          ContainerPort: 8080
          TargetGroupArn:
            Ref: alblistenerwebservice1Group4A86C90B
      SchedulingStrategy: REPLICA
      ServiceName: ecs-ec2-autoscaling-service-1
      ServiceRegistries: []
    DependsOn:
      - alblistenerwebservice1RuleE0581356
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/service-1/Service
  service1TaskCountTarget3DEE703A:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 1000
      MinCapacity: 2
      ResourceId:
        Fn::Join:
          - ""
          - - service/
            - Ref: cluster611F8AFF
            - /
            - Fn::GetAtt:
                - service1Service48DA6F6A
                - Name
      RoleARN:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":iam:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - :role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      ScheduledActions: []
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/service-1/TaskCount/Target/Resource
  service1TaskCountTargetservice1cputaskscalingAE3512C0:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: EcsEc2AutoscalingStackservice1TaskCountTargetservice1cputaskscaling08274FC8
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: service1TaskCountTarget3DEE703A
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 30
        ScaleOutCooldown: 30
        TargetValue: 50
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/service-1/TaskCount/Target/service-1-cpu-task-scaling/Resource
  service2taskdefinitionTaskRole65B3BAF2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - ecs-tasks.
                    - Ref: AWS::URLSuffix
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/service-2-task-definition/TaskRole/Resource
  service2taskdefinition5262F05F:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Cpu: 128
          Essential: true
          Image: legdba/servicebox-nodejs
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: service2taskdefinitionwebLogGroup9CB11321
              awslogs-stream-prefix: ecs-ec2-autoscaling-service-2
              awslogs-region:
                Ref: AWS::Region
          Memory: 256
          Name: web
          PortMappings:
            - ContainerPort: 8080
              HostPort: 0
              Protocol: tcp
      ExecutionRoleArn:
        Fn::GetAtt:
          - service2taskdefinitionExecutionRole2D2563A5
          - Arn
      Family: EcsEc2AutoscalingStackservice2taskdefinition4C21A07E
      NetworkMode: bridge
      RequiresCompatibilities:
        - EC2
      TaskRoleArn:
        Fn::GetAtt:
          - service2taskdefinitionTaskRole65B3BAF2
          - Arn
      Volumes: []
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/service-2-task-definition/Resource
  service2taskdefinitionwebLogGroup9CB11321:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/service-2-task-definition/web/LogGroup/Resource
  service2taskdefinitionExecutionRole2D2563A5:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - ecs-tasks.
                    - Ref: AWS::URLSuffix
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/service-2-task-definition/ExecutionRole/Resource
  service2taskdefinitionExecutionRoleDefaultPolicyE27C26B1:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - service2taskdefinitionwebLogGroup9CB11321
                - Arn
        Version: "2012-10-17"
      PolicyName: service2taskdefinitionExecutionRoleDefaultPolicyE27C26B1
      Roles:
        - Ref: service2taskdefinitionExecutionRole2D2563A5
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/service-2-task-definition/ExecutionRole/DefaultPolicy/Resource
  service2Service7BCCA61B:
    Type: AWS::ECS::Service
    Properties:
      TaskDefinition:
        Ref: service2taskdefinition5262F05F
      Cluster:
        Ref: cluster611F8AFF
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: 60
      LaunchType: EC2
      LoadBalancers:
        - ContainerName: web
          ContainerPort: 8080
          TargetGroupArn:
            Ref: alblistenerwebservice2GroupBCE0FAEA
      SchedulingStrategy: REPLICA
      ServiceName: ecs-ec2-autoscaling-service-2
      ServiceRegistries: []
    DependsOn:
      - alblistenerwebservice2RuleFCA26EBA
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/service-2/Service
  service2TaskCountTarget3A8B455C:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 1000
      MinCapacity: 2
      ResourceId:
        Fn::Join:
          - ""
          - - service/
            - Ref: cluster611F8AFF
            - /
            - Fn::GetAtt:
                - service2Service7BCCA61B
                - Name
      RoleARN:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":iam:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - :role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      ScheduledActions: []
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/service-2/TaskCount/Target/Resource
  service2TaskCountTargetservice2cputaskscaling3A60AD53:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: EcsEc2AutoscalingStackservice2TaskCountTargetservice2cputaskscaling78B028BA
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: service2TaskCountTarget3A8B455C
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 30
        ScaleOutCooldown: 30
        TargetValue: 50
    Metadata:
      aws:cdk:path: EcsEc2AutoscalingStack/service-2/TaskCount/Target/service-2-cpu-task-scaling/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Modules: aws-cdk=2.113.0,@aws-cdk/assets=1.4.0,@aws-cdk/aws-applicationautoscaling=1.4.0,@aws-cdk/aws-autoscaling=1.4.0,@aws-cdk/aws-autoscaling-common=1.4.0,@aws-cdk/aws-autoscaling-hooktargets=1.4.0,@aws-cdk/aws-cloudformation=1.4.0,@aws-cdk/aws-cloudwatch=1.4.0,@aws-cdk/aws-ec2=1.4.0,@aws-cdk/aws-ecr=1.4.0,@aws-cdk/aws-ecr-assets=1.4.0,@aws-cdk/aws-ecs=1.4.0,@aws-cdk/aws-elasticloadbalancingv2=1.4.0,@aws-cdk/aws-events=1.4.0,@aws-cdk/aws-iam=1.4.0,@aws-cdk/aws-kms=1.4.0,@aws-cdk/aws-lambda=1.4.0,@aws-cdk/aws-logs=1.4.0,@aws-cdk/aws-s3=1.4.0,@aws-cdk/aws-s3-assets=1.4.0,@aws-cdk/aws-servicediscovery=1.4.0,@aws-cdk/aws-sns=1.4.0,@aws-cdk/aws-sns-subscriptions=1.4.0,@aws-cdk/aws-sqs=1.4.0,@aws-cdk/aws-ssm=1.4.0,@aws-cdk/core=1.4.0,@aws-cdk/cx-api=1.4.0,@aws-cdk/region-info=1.4.0,jsii-runtime=node.js/v18.12.1
    Condition: CDKMetadataAvailable
Parameters:
  SsmParameterValueawsserviceecsoptimizedamiamazonlinuxrecommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /aws/service/ecs/optimized-ami/amazon-linux/recommended/image_id
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - il-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - me-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2

