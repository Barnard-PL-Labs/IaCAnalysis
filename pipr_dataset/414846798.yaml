Resources:
  network39EEAA36:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: LambdaRdsStack/network
    Metadata:
      aws:cdk:path: LambdaRdsStack/network/Resource
  networkpublicSubnet1SubnetF2DF3E13:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/19
      VpcId:
        Ref: network39EEAA36
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: LambdaRdsStack/network/publicSubnet1
    Metadata:
      aws:cdk:path: LambdaRdsStack/network/publicSubnet1/Subnet
  networkpublicSubnet1RouteTable4FDB3670:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: network39EEAA36
      Tags:
        - Key: Name
          Value: LambdaRdsStack/network/publicSubnet1
    Metadata:
      aws:cdk:path: LambdaRdsStack/network/publicSubnet1/RouteTable
  networkpublicSubnet1RouteTableAssociationAAF71326:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: networkpublicSubnet1RouteTable4FDB3670
      SubnetId:
        Ref: networkpublicSubnet1SubnetF2DF3E13
    Metadata:
      aws:cdk:path: LambdaRdsStack/network/publicSubnet1/RouteTableAssociation
  networkpublicSubnet1DefaultRoute179C2B6B:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: networkpublicSubnet1RouteTable4FDB3670
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: networkIGW8898B9FD
    DependsOn:
      - networkVPCGW59CD9EEC
    Metadata:
      aws:cdk:path: LambdaRdsStack/network/publicSubnet1/DefaultRoute
  networkpublicSubnet1EIP05DA1B34:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: LambdaRdsStack/network/publicSubnet1
    Metadata:
      aws:cdk:path: LambdaRdsStack/network/publicSubnet1/EIP
  networkpublicSubnet1NATGateway764AA2FE:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId:
        Ref: networkpublicSubnet1SubnetF2DF3E13
      AllocationId:
        Fn::GetAtt:
          - networkpublicSubnet1EIP05DA1B34
          - AllocationId
      Tags:
        - Key: Name
          Value: LambdaRdsStack/network/publicSubnet1
    Metadata:
      aws:cdk:path: LambdaRdsStack/network/publicSubnet1/NATGateway
  networkpublicSubnet2SubnetBE912D6C:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.32.0/19
      VpcId:
        Ref: network39EEAA36
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: LambdaRdsStack/network/publicSubnet2
    Metadata:
      aws:cdk:path: LambdaRdsStack/network/publicSubnet2/Subnet
  networkpublicSubnet2RouteTableD25F80CD:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: network39EEAA36
      Tags:
        - Key: Name
          Value: LambdaRdsStack/network/publicSubnet2
    Metadata:
      aws:cdk:path: LambdaRdsStack/network/publicSubnet2/RouteTable
  networkpublicSubnet2RouteTableAssociationE3F1A642:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: networkpublicSubnet2RouteTableD25F80CD
      SubnetId:
        Ref: networkpublicSubnet2SubnetBE912D6C
    Metadata:
      aws:cdk:path: LambdaRdsStack/network/publicSubnet2/RouteTableAssociation
  networkpublicSubnet2DefaultRouteC4EF038A:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: networkpublicSubnet2RouteTableD25F80CD
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: networkIGW8898B9FD
    DependsOn:
      - networkVPCGW59CD9EEC
    Metadata:
      aws:cdk:path: LambdaRdsStack/network/publicSubnet2/DefaultRoute
  networkprivateSubnet1Subnet159CEADA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.64.0/19
      VpcId:
        Ref: network39EEAA36
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: LambdaRdsStack/network/privateSubnet1
    Metadata:
      aws:cdk:path: LambdaRdsStack/network/privateSubnet1/Subnet
  networkprivateSubnet1RouteTable4522C3E7:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: network39EEAA36
      Tags:
        - Key: Name
          Value: LambdaRdsStack/network/privateSubnet1
    Metadata:
      aws:cdk:path: LambdaRdsStack/network/privateSubnet1/RouteTable
  networkprivateSubnet1RouteTableAssociation8F5E0398:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: networkprivateSubnet1RouteTable4522C3E7
      SubnetId:
        Ref: networkprivateSubnet1Subnet159CEADA
    Metadata:
      aws:cdk:path: LambdaRdsStack/network/privateSubnet1/RouteTableAssociation
  networkprivateSubnet1DefaultRouteC5381FD9:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: networkprivateSubnet1RouteTable4522C3E7
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: networkpublicSubnet1NATGateway764AA2FE
    Metadata:
      aws:cdk:path: LambdaRdsStack/network/privateSubnet1/DefaultRoute
  networkprivateSubnet2SubnetCAB40FED:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.96.0/19
      VpcId:
        Ref: network39EEAA36
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: LambdaRdsStack/network/privateSubnet2
    Metadata:
      aws:cdk:path: LambdaRdsStack/network/privateSubnet2/Subnet
  networkprivateSubnet2RouteTable46413B74:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: network39EEAA36
      Tags:
        - Key: Name
          Value: LambdaRdsStack/network/privateSubnet2
    Metadata:
      aws:cdk:path: LambdaRdsStack/network/privateSubnet2/RouteTable
  networkprivateSubnet2RouteTableAssociation2ACF79BA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: networkprivateSubnet2RouteTable46413B74
      SubnetId:
        Ref: networkprivateSubnet2SubnetCAB40FED
    Metadata:
      aws:cdk:path: LambdaRdsStack/network/privateSubnet2/RouteTableAssociation
  networkprivateSubnet2DefaultRoute138E08BD:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: networkprivateSubnet2RouteTable46413B74
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: networkpublicSubnet1NATGateway764AA2FE
    Metadata:
      aws:cdk:path: LambdaRdsStack/network/privateSubnet2/DefaultRoute
  networkdbnetSubnet1Subnet6BFCC48A:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.128.0/19
      VpcId:
        Ref: network39EEAA36
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: db-net
        - Key: aws-cdk:subnet-type
          Value: Isolated
        - Key: Name
          Value: LambdaRdsStack/network/db-netSubnet1
    Metadata:
      aws:cdk:path: LambdaRdsStack/network/db-netSubnet1/Subnet
  networkdbnetSubnet1RouteTableE9E5519C:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: network39EEAA36
      Tags:
        - Key: Name
          Value: LambdaRdsStack/network/db-netSubnet1
    Metadata:
      aws:cdk:path: LambdaRdsStack/network/db-netSubnet1/RouteTable
  networkdbnetSubnet1RouteTableAssociationA0C5B68E:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: networkdbnetSubnet1RouteTableE9E5519C
      SubnetId:
        Ref: networkdbnetSubnet1Subnet6BFCC48A
    Metadata:
      aws:cdk:path: LambdaRdsStack/network/db-netSubnet1/RouteTableAssociation
  networkdbnetSubnet2Subnet95F34BDC:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.160.0/19
      VpcId:
        Ref: network39EEAA36
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: db-net
        - Key: aws-cdk:subnet-type
          Value: Isolated
        - Key: Name
          Value: LambdaRdsStack/network/db-netSubnet2
    Metadata:
      aws:cdk:path: LambdaRdsStack/network/db-netSubnet2/Subnet
  networkdbnetSubnet2RouteTable24BF2480:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: network39EEAA36
      Tags:
        - Key: Name
          Value: LambdaRdsStack/network/db-netSubnet2
    Metadata:
      aws:cdk:path: LambdaRdsStack/network/db-netSubnet2/RouteTable
  networkdbnetSubnet2RouteTableAssociationFCC3C14A:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: networkdbnetSubnet2RouteTable24BF2480
      SubnetId:
        Ref: networkdbnetSubnet2Subnet95F34BDC
    Metadata:
      aws:cdk:path: LambdaRdsStack/network/db-netSubnet2/RouteTableAssociation
  networkIGW8898B9FD:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: LambdaRdsStack/network
    Metadata:
      aws:cdk:path: LambdaRdsStack/network/IGW
  networkVPCGW59CD9EEC:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: network39EEAA36
      InternetGatewayId:
        Ref: networkIGW8898B9FD
    Metadata:
      aws:cdk:path: LambdaRdsStack/network/VPCGW
  dbsubnet:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Isolated DB net
      SubnetIds:
        - Ref: networkdbnetSubnet1Subnet6BFCC48A
        - Ref: networkdbnetSubnet2Subnet95F34BDC
    Metadata:
      aws:cdk:path: LambdaRdsStack/db-subnet/Default
  dbSecurityGroup633AC648:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: RDS security group
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: network39EEAA36
    Metadata:
      aws:cdk:path: LambdaRdsStack/db/SecurityGroup/Resource
  dbSecurityGroupfromLambdaRdsStackreaderfunctionSecurityGroup63311C5DIndirectPort145129BD:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: from LambdaRdsStackreaderfunctionSecurityGroup63311C5D:{IndirectPort}
      FromPort:
        Fn::GetAtt:
          - dbECC37780
          - Endpoint.Port
      GroupId:
        Fn::GetAtt:
          - dbSecurityGroup633AC648
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - readerfunctionSecurityGroup29A5FCC3
          - GroupId
      ToPort:
        Fn::GetAtt:
          - dbECC37780
          - Endpoint.Port
    Metadata:
      aws:cdk:path: LambdaRdsStack/db/SecurityGroup/from LambdaRdsStackreaderfunctionSecurityGroup63311C5D:{IndirectPort}
  LambdaRdsStackdbSecret893A560B3fdaad7efa858a3daf9490cf0a702aeb:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description:
        Fn::Join:
          - ""
          - - "Generated by the CDK for stack: "
            - Ref: AWS::StackName
      GenerateSecretString:
        ExcludeCharacters: " %+~`#$&*()|[]{}:;<>?!'/@\"\\"
        GenerateStringKey: password
        PasswordLength: 30
        SecretStringTemplate: '{"username":"serverless"}'
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: LambdaRdsStack/db/Secret/Resource
  dbSecretAttachment5D338442:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId:
        Ref: LambdaRdsStackdbSecret893A560B3fdaad7efa858a3daf9490cf0a702aeb
      TargetId:
        Ref: dbECC37780
      TargetType: AWS::RDS::DBCluster
    Metadata:
      aws:cdk:path: LambdaRdsStack/db/Secret/Attachment/Resource
  dbECC37780:
    Type: AWS::RDS::DBCluster
    Properties:
      Engine: aurora-mysql
      DatabaseName: serverless
      DBClusterParameterGroupName: default.aurora-mysql5.7
      DBSubnetGroupName:
        Ref: dbsubnet
      DeletionProtection: false
      EngineMode: serverless
      MasterUsername: serverless
      MasterUserPassword:
        Fn::Join:
          - ""
          - - "{{resolve:secretsmanager:"
            - Ref: LambdaRdsStackdbSecret893A560B3fdaad7efa858a3daf9490cf0a702aeb
            - :SecretString:password::}}
      ScalingConfiguration:
        AutoPause: true
        MaxCapacity: 4
        MinCapacity: 1
        SecondsUntilAutoPause: 600
      StorageEncrypted: true
      VpcSecurityGroupIds:
        - Fn::GetAtt:
            - dbSecurityGroup633AC648
            - GroupId
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: LambdaRdsStack/db/Resource
  readerfunctionServiceRoleCED28626:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
    Metadata:
      aws:cdk:path: LambdaRdsStack/reader-function/ServiceRole/Resource
  readerfunctionServiceRoleDefaultPolicyCEC0FBEA:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - xray:PutTraceSegments
              - xray:PutTelemetryRecords
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: readerfunctionServiceRoleDefaultPolicyCEC0FBEA
      Roles:
        - Ref: readerfunctionServiceRoleCED28626
    Metadata:
      aws:cdk:path: LambdaRdsStack/reader-function/ServiceRole/DefaultPolicy/Resource
  readerfunctionSecurityGroup29A5FCC3:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatic security group for Lambda Function LambdaRdsStackreaderfunction7B8EB9EC
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: network39EEAA36
    Metadata:
      aws:cdk:path: LambdaRdsStack/reader-function/SecurityGroup/Resource
  readerfunctionF7A54412:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: d5fb7f5f59db33d5c4cb5b918f76747a09f6e3d738a446f418fa482aaaf2683c.zip
      Role:
        Fn::GetAtt:
          - readerfunctionServiceRoleCED28626
          - Arn
      Architectures:
        - arm64
      Environment:
        Variables:
          HOST:
            Fn::GetAtt:
              - dbECC37780
              - Endpoint.Address
          DBNAME:
            Fn::Join:
              - ""
              - - "{{resolve:secretsmanager:"
                - Ref: dbSecretAttachment5D338442
                - :SecretString:dbname::}}
          USER:
            Fn::Join:
              - ""
              - - "{{resolve:secretsmanager:"
                - Ref: dbSecretAttachment5D338442
                - :SecretString:username::}}
          SECRET:
            Fn::Join:
              - ""
              - - "{{resolve:secretsmanager:"
                - Ref: dbSecretAttachment5D338442
                - :SecretString:password::}}
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
      Handler: index.main
      Runtime: nodejs14.x
      TracingConfig:
        Mode: Active
      VpcConfig:
        SecurityGroupIds:
          - Fn::GetAtt:
              - readerfunctionSecurityGroup29A5FCC3
              - GroupId
        SubnetIds:
          - Ref: networkprivateSubnet1Subnet159CEADA
          - Ref: networkprivateSubnet2SubnetCAB40FED
    DependsOn:
      - readerfunctionServiceRoleDefaultPolicyCEC0FBEA
      - readerfunctionServiceRoleCED28626
    Metadata:
      aws:cdk:path: LambdaRdsStack/reader-function/Resource
      aws:asset:path: asset.d5fb7f5f59db33d5c4cb5b918f76747a09f6e3d738a446f418fa482aaaf2683c
      aws:asset:is-bundled: true
      aws:asset:property: Code
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/31SwXLCIBT8Fu9IG3tor0Zbx4vNJI5X54W8pmgCDg90nEz+vQTUdHroaZdlWTaPzHjyyp8ncKGpqI7TRpa8KyyII/PSvkMx493uJNjiS+2yBctc2UhRuFKhHbSR5dpZ3ELZ4KiP2pxICwlWavUwD+R9nQ2wAbsCixe4sszIs6dj8FpZNJ7fDbHJbTW3vut3i8qyAoUz0l5XRrtT6PCvsFa1QaKemYr8J4frHs5l+lso0JzRNN69aBz5NmwJFkog9Ikmtlymt72eURCpBQU1Gt7FmwdfhC2YGu2v5g/D352eNdCWFeyVrvBAfBPgwykRBimh5V2u48QDZtq/ThhRZL7Myx6IfB0+H8CveerEEW3q69/iufffQ3uWI2lnBLJwwP8LtVT1EPnp7MnFt75bPF9oVcl4cmjJD/R0Tt54MuPJ5EBSTo1TVrbI84g/PXkTv3ECAAA=
    Metadata:
      aws:cdk:path: LambdaRdsStack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Outputs:
  VPCid:
    Description: VPC id
    Value:
      Ref: network39EEAA36
    Export:
      Name: vpc-id
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
Rules:
  CheckBootstrapVersion:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::Contains:
                - - "1"
                  - "2"
                  - "3"
                  - "4"
                  - "5"
                - Ref: BootstrapVersion
        AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.

