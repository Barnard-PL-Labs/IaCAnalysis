Resources:
  keypairEC2KeyPairkeypairEB19913E:
    Type: Custom::EC2-Key-Pair
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - EC2KeyNameManagerLambdaBE629145
          - Arn
      Name: keypair
      Description: Key Pair for nosqlDemo acces to flask app
      KmsPrivate: alias/aws/secretsmanager
      KmsPublic: alias/aws/secretsmanager
      PublicKey: ""
      StorePublicKey: true
      ExposePublicKey: false
      PublicKeyFormat: OPENSSH
      RemoveKeySecretsAfterDays: 0
      SecretPrefix: /nosqldemo/ec2/
      StackName: noSqlDemoStack
      Tags:
        CreatedByCfnCustomResource: CFN::Resource::Custom::EC2-Key-Pair
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: noSqlDemoStack/keypair/EC2-Key-Pair-keypair/Default
  EC2KeyPairManagerPolicyEBBC1576:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ec2:DescribeKeyPairs
              - secretsmanager:ListSecrets
            Effect: Allow
            Resource: "*"
          - Action:
              - ec2:CreateKeyPair
              - ec2:CreateTags
              - ec2:ImportKeyPair
            Condition:
              StringLike:
                aws:RequestTag/CreatedByCfnCustomResource: CFN::Resource::Custom::EC2-Key-Pair
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - :ec2:*:*:key-pair/*
          - Action:
              - ec2:CreateTags
              - ec2:DeleteKeyPair
              - ec2:DeleteTags
            Condition:
              StringLike:
                ec2:ResourceTag/CreatedByCfnCustomResource: CFN::Resource::Custom::EC2-Key-Pair
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - :ec2:*:*:key-pair/*
          - Action:
              - secretsmanager:CreateSecret
              - secretsmanager:TagResource
            Condition:
              StringLike:
                aws:RequestTag/CreatedByCfnCustomResource: CFN::Resource::Custom::EC2-Key-Pair
            Effect: Allow
            Resource: "*"
          - Action:
              - secretsmanager:DeleteResourcePolicy
              - secretsmanager:DeleteSecret
              - secretsmanager:DescribeSecret
              - secretsmanager:GetResourcePolicy
              - secretsmanager:GetSecretValue
              - secretsmanager:ListSecretVersionIds
              - secretsmanager:PutResourcePolicy
              - secretsmanager:PutSecretValue
              - secretsmanager:RestoreSecret
              - secretsmanager:UntagResource
              - secretsmanager:UpdateSecret
              - secretsmanager:UpdateSecretVersionStage
            Condition:
              StringLike:
                secretsmanager:ResourceTag/CreatedByCfnCustomResource: CFN::Resource::Custom::EC2-Key-Pair
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      Description: Used by Lambda CFN-Resource-Custom-EC2-Key-Pair, which is a custom CFN resource, managing EC2 Key Pairs
      ManagedPolicyName: noSqlDemoStack-CFN-Resource-Custom-EC2-Key-Pair
      Path: /
    Metadata:
      aws:cdk:path: noSqlDemoStack/EC2-Key-Pair-Manager-Policy/Resource
  EC2KeyPairManagerRoleB243C519:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      Description: Used by Lambda CFN-Resource-Custom-EC2-Key-Pair, which is a custom CFN resource, managing EC2 Key Pairs
      ManagedPolicyArns:
        - Ref: EC2KeyPairManagerPolicyEBBC1576
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      RoleName: noSqlDemoStack-CFN-Resource-Custom-EC2-Key-Pair
    Metadata:
      aws:cdk:path: noSqlDemoStack/EC2-Key-Pair-Manager-Role/Resource
  EC2KeyNameManagerLambdaBE629145:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 4b53adc667dcab419bec9e03553dce125d10f1d9c6ac1d2c082001b9332f150f.zip
      Role:
        Fn::GetAtt:
          - EC2KeyPairManagerRoleB243C519
          - Arn
      Description: "Custom CFN resource: Manage EC2 Key Pairs"
      FunctionName: noSqlDemoStack-CFN-Resource-Custom-EC2-Key-Pair
      Handler: index.handler
      Runtime: nodejs14.x
      Timeout: 180
    DependsOn:
      - EC2KeyPairManagerRoleB243C519
    Metadata:
      aws:cdk:path: noSqlDemoStack/EC2-Key-Name-Manager-Lambda/Resource
      aws:asset:path: asset.4b53adc667dcab419bec9e03553dce125d10f1d9c6ac1d2c082001b9332f150f.zip
      aws:asset:is-bundled: false
      aws:asset:property: Code
  VPCB9E5F0B4:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: noSqlDemoStack/VPC
    Metadata:
      aws:cdk:path: noSqlDemoStack/VPC/Resource
  VPCpublicSubSubnet1SubnetE356A882:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 10.0.0.0/28
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: publicSub
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: noSqlDemoStack/VPC/publicSubSubnet1
    Metadata:
      aws:cdk:path: noSqlDemoStack/VPC/publicSubSubnet1/Subnet
  VPCpublicSubSubnet1RouteTable5F240C35:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      Tags:
        - Key: Name
          Value: noSqlDemoStack/VPC/publicSubSubnet1
    Metadata:
      aws:cdk:path: noSqlDemoStack/VPC/publicSubSubnet1/RouteTable
  VPCpublicSubSubnet1RouteTableAssociation42982A35:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCpublicSubSubnet1RouteTable5F240C35
      SubnetId:
        Ref: VPCpublicSubSubnet1SubnetE356A882
    Metadata:
      aws:cdk:path: noSqlDemoStack/VPC/publicSubSubnet1/RouteTableAssociation
  VPCpublicSubSubnet1DefaultRoute59D7182E:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VPCpublicSubSubnet1RouteTable5F240C35
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VPCIGWB7E252D3
    DependsOn:
      - VPCVPCGW99B986DC
    Metadata:
      aws:cdk:path: noSqlDemoStack/VPC/publicSubSubnet1/DefaultRoute
  VPCpublicSubSubnet2SubnetC347F538:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: 10.0.0.16/28
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: publicSub
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: noSqlDemoStack/VPC/publicSubSubnet2
    Metadata:
      aws:cdk:path: noSqlDemoStack/VPC/publicSubSubnet2/Subnet
  VPCpublicSubSubnet2RouteTable4036DF5D:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      Tags:
        - Key: Name
          Value: noSqlDemoStack/VPC/publicSubSubnet2
    Metadata:
      aws:cdk:path: noSqlDemoStack/VPC/publicSubSubnet2/RouteTable
  VPCpublicSubSubnet2RouteTableAssociationA3677BD5:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCpublicSubSubnet2RouteTable4036DF5D
      SubnetId:
        Ref: VPCpublicSubSubnet2SubnetC347F538
    Metadata:
      aws:cdk:path: noSqlDemoStack/VPC/publicSubSubnet2/RouteTableAssociation
  VPCpublicSubSubnet2DefaultRouteA59748C1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VPCpublicSubSubnet2RouteTable4036DF5D
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VPCIGWB7E252D3
    DependsOn:
      - VPCVPCGW99B986DC
    Metadata:
      aws:cdk:path: noSqlDemoStack/VPC/publicSubSubnet2/DefaultRoute
  VPCprivateSubSubnet1Subnet1A8F4B88:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 10.0.0.32/28
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: privateSub
        - Key: aws-cdk:subnet-type
          Value: Isolated
        - Key: Name
          Value: noSqlDemoStack/VPC/privateSubSubnet1
    Metadata:
      aws:cdk:path: noSqlDemoStack/VPC/privateSubSubnet1/Subnet
  VPCprivateSubSubnet1RouteTable0797090F:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      Tags:
        - Key: Name
          Value: noSqlDemoStack/VPC/privateSubSubnet1
    Metadata:
      aws:cdk:path: noSqlDemoStack/VPC/privateSubSubnet1/RouteTable
  VPCprivateSubSubnet1RouteTableAssociation3E94E46D:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCprivateSubSubnet1RouteTable0797090F
      SubnetId:
        Ref: VPCprivateSubSubnet1Subnet1A8F4B88
    Metadata:
      aws:cdk:path: noSqlDemoStack/VPC/privateSubSubnet1/RouteTableAssociation
  VPCprivateSubSubnet2SubnetBAAF7221:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: 10.0.0.48/28
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: privateSub
        - Key: aws-cdk:subnet-type
          Value: Isolated
        - Key: Name
          Value: noSqlDemoStack/VPC/privateSubSubnet2
    Metadata:
      aws:cdk:path: noSqlDemoStack/VPC/privateSubSubnet2/Subnet
  VPCprivateSubSubnet2RouteTableD29E42C1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      Tags:
        - Key: Name
          Value: noSqlDemoStack/VPC/privateSubSubnet2
    Metadata:
      aws:cdk:path: noSqlDemoStack/VPC/privateSubSubnet2/RouteTable
  VPCprivateSubSubnet2RouteTableAssociationB6B3C44B:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCprivateSubSubnet2RouteTableD29E42C1
      SubnetId:
        Ref: VPCprivateSubSubnet2SubnetBAAF7221
    Metadata:
      aws:cdk:path: noSqlDemoStack/VPC/privateSubSubnet2/RouteTableAssociation
  VPCIGWB7E252D3:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: noSqlDemoStack/VPC
    Metadata:
      aws:cdk:path: noSqlDemoStack/VPC/IGW
  VPCVPCGW99B986DC:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      InternetGatewayId:
        Ref: VPCIGWB7E252D3
    Metadata:
      aws:cdk:path: noSqlDemoStack/VPC/VPCGW
  sgWebAppC5D90D63:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH (TCP port 22 and 80) in
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow SSH Access
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          Description: Allow HTTP Access
          FromPort: 8080
          IpProtocol: tcp
          ToPort: 8080
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: noSqlDemoStack/sgWebApp/Resource
  WebAppRoleCC05E1D4:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - ec2.
                    - Ref: AWS::URLSuffix
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AmazonSSMFullAccess
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/SecretsManagerReadWrite
      MaxSessionDuration: 43200
    Metadata:
      aws:cdk:path: noSqlDemoStack/WebAppRole/Resource
  WebAppRoleDefaultPolicy31FCAF39:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: dynamodb:*
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - DynamoDBTable59784FC0
                  - Arn
              - Ref: AWS::NoValue
        Version: "2012-10-17"
      PolicyName: WebAppRoleDefaultPolicy31FCAF39
      Roles:
        - Ref: WebAppRoleCC05E1D4
    Metadata:
      aws:cdk:path: noSqlDemoStack/WebAppRole/DefaultPolicy/Resource
  ec2instanceInstanceProfile9BCE9015:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: WebAppRoleCC05E1D4
    Metadata:
      aws:cdk:path: noSqlDemoStack/ec2-instance/InstanceProfile
  ec2instance42082E81:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      IamInstanceProfile:
        Ref: ec2instanceInstanceProfile9BCE9015
      ImageId:
        Ref: SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter
      InstanceType: t2.micro
      KeyName:
        Fn::GetAtt:
          - keypairEC2KeyPairkeypairEB19913E
          - KeyPairName
      SecurityGroupIds:
        - Fn::GetAtt:
            - sgWebAppC5D90D63
            - GroupId
      SubnetId:
        Ref: VPCpublicSubSubnet1SubnetE356A882
      Tags:
        - Key: Name
          Value: noSqlDemoStack/ec2-instance
      UserData:
        Fn::Base64: |-
          Content-Type: multipart/mixed; boundary="//"
          MIME-Version: 1.0

          --//
          Content-Type: text/cloud-config; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="cloud-config.txt"

          #cloud-config
          cloud_final_modules:
          - [scripts-user, always]

          --//
          Content-Type: text/x-shellscript; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="userdata.txt"

          #!/bin/bash
          sudo yum install git -y
          sudo yum install jq -y

          export region=$(curl http://169.254.169.254/latest/meta-data/placement/region)
          export rediscluster=$(aws ssm get-parameter --name redis-endpoint --region $region | jq --raw-output .Parameter | jq -r .Value)
          export clusterendpoint=$(aws ssm get-parameter --name docdb-endpoint --region $region | jq --raw-output .Parameter | jq -r .Value)
          export NEPTUNE_ENDPOINT=$(aws ssm get-parameter --name neptune-endpoint --region $region | jq --raw-output .Parameter | jq -r .Value)
          export username=$(aws secretsmanager get-secret-value --secret-id /nosqldemo/docdb/masteruser --region $region | jq --raw-output .SecretString | jq -r .username)
          export password=$(aws secretsmanager get-secret-value --secret-id /nosqldemo/docdb/masteruser --region $region | jq --raw-output .SecretString | jq -r .password)


          mkdir ~/.aws
          cat << EOF > ~/.aws/config
          [default]
          region=$region
          EOF

          cat << EOF > /etc/yum.repos.d/mongodb-org-5.0.repo
          [mongodb-org-5.0]
          name=MongoDB Repository
          baseurl=https://repo.mongodb.org/yum/amazon/2/mongodb-org/5.0/x86_64/
          gpgcheck=1
          enabled=1
          gpgkey=https://www.mongodb.org/static/pgp/server-5.0.asc
          EOF

          sudo yum install -y mongodb-org


          sudo git clone https://github.com/emmanueldeletang/nosqlwebapp /usr/src/app
          cd /usr/src/app
          python3 -m pip install -r requirements.txt
          pip3 install markupsafe==2.0.1
          pip3 install Flask==2.0.1

          wget https://s3.amazonaws.com/rds-downloads/rds-combined-ca-bundle.pem

          mongoimport --ssl --host ${clusterendpoint}:27017 --sslCAFile=rds-combined-ca-bundle.pem --username $username --password $password -d restaurant -c menu --file=menu.json

          python3 /usr/src/app/app.py 
    DependsOn:
      - WebAppRoleDefaultPolicy31FCAF39
      - WebAppRoleCC05E1D4
    Metadata:
      aws:cdk:path: noSqlDemoStack/ec2-instance/Resource
  redisgroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: The redis subnet group id
      SubnetIds:
        - Ref: VPCprivateSubSubnet1Subnet1A8F4B88
        - Ref: VPCprivateSubSubnet2SubnetBAAF7221
      CacheSubnetGroupName: redis-group
    Metadata:
      aws:cdk:path: noSqlDemoStack/redis-group
  sgRedis80D58A8E:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: redis-security-group
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow SSH Access
          FromPort: 6379
          IpProtocol: tcp
          ToPort: 6379
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: noSqlDemoStack/sgRedis/Resource
  rediscluster:
    Type: AWS::ElastiCache::ReplicationGroup
    Properties:
      ReplicationGroupDescription: cluster redis
      AutomaticFailoverEnabled: true
      AutoMinorVersionUpgrade: true
      CacheNodeType: cache.t2.micro
      CacheSubnetGroupName: redis-group
      Engine: redis
      MultiAZEnabled: true
      NumNodeGroups: 1
      Port: 6379
      ReplicasPerNodeGroup: 1
      SecurityGroupIds:
        - Fn::GetAtt:
            - sgRedis80D58A8E
            - GroupId
    DependsOn:
      - redisgroup
    Metadata:
      aws:cdk:path: noSqlDemoStack/redis-cluster
  Parameterredisendpoint6F696F29:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value:
        Fn::GetAtt:
          - rediscluster
          - PrimaryEndPoint.Address
      Description: The redis endpoint
      Name: redis-endpoint
    Metadata:
      aws:cdk:path: noSqlDemoStack/Parameter-redis-endpoint/Resource
  neptunesubnetgroup:
    Type: AWS::Neptune::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: The neptune subnet group id
      SubnetIds:
        - Ref: VPCprivateSubSubnet1Subnet1A8F4B88
        - Ref: VPCprivateSubSubnet2SubnetBAAF7221
      DBSubnetGroupName: neptune-subnet-group
    Metadata:
      aws:cdk:path: noSqlDemoStack/neptune-subnet-group
  sgneptuneE33A7282:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: neptune-security-group
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow neptune Access
          FromPort: 8182
          IpProtocol: tcp
          ToPort: 8182
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: noSqlDemoStack/sg-neptune/Resource
  neptunecluster:
    Type: AWS::Neptune::DBCluster
    Properties:
      DBClusterIdentifier: my-cluster
      DBSubnetGroupName: neptune-subnet-group
      IamAuthEnabled: false
      VpcSecurityGroupIds:
        - Fn::GetAtt:
            - sgneptuneE33A7282
            - GroupId
    DependsOn:
      - neptunesubnetgroup
    Metadata:
      aws:cdk:path: noSqlDemoStack/neptune-cluster
  neptuneinstance:
    Type: AWS::Neptune::DBInstance
    Properties:
      DBInstanceClass: db.t3.medium
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: false
      DBClusterIdentifier: my-cluster
    DependsOn:
      - neptunecluster
    Metadata:
      aws:cdk:path: noSqlDemoStack/neptune-instance
  Parameterneptuneendpoint5EF0F92E:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value:
        Fn::GetAtt:
          - neptunecluster
          - Endpoint
      Description: The Neptune endpoint
      Name: neptune-endpoint
    Metadata:
      aws:cdk:path: noSqlDemoStack/Parameter-neptune-endpoint/Resource
  docdbclusterSubnetsC547EB9D:
    Type: AWS::DocDB::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnets for docdb-cluster database
      SubnetIds:
        - Ref: VPCpublicSubSubnet1SubnetE356A882
        - Ref: VPCpublicSubSubnet2SubnetC347F538
    Metadata:
      aws:cdk:path: noSqlDemoStack/docdb-cluster/Subnets
  docdbclusterSecurityGroup94B0531F:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: DocumentDB security group
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: 10.0.0.0/24
          Description: Allow mongo api Access
          FromPort: 27017
          IpProtocol: tcp
          ToPort: 27017
      VpcId:
        Ref: VPCB9E5F0B4
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: noSqlDemoStack/docdb-cluster/SecurityGroup/Resource
  docdbclusterSecret8960ABD9:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description:
        Fn::Join:
          - ""
          - - "Generated by the CDK for stack: "
            - Ref: AWS::StackName
      GenerateSecretString:
        ExcludeCharacters: '"@/:'
        GenerateStringKey: password
        PasswordLength: 41
        SecretStringTemplate: '{"username":"myuser"}'
      Name: /nosqldemo/docdb/masteruser
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: noSqlDemoStack/docdb-cluster/Secret/Resource
  docdbclusterSecretAttachment02282BB0:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId:
        Ref: docdbclusterSecret8960ABD9
      TargetId:
        Ref: docdbcluster9D0B0898
      TargetType: AWS::DocDB::DBCluster
    Metadata:
      aws:cdk:path: noSqlDemoStack/docdb-cluster/Secret/Attachment/Resource
  docdbcluster9D0B0898:
    Type: AWS::DocDB::DBCluster
    Properties:
      DBSubnetGroupName:
        Ref: docdbclusterSubnetsC547EB9D
      DeletionProtection: false
      MasterUsername:
        Fn::Join:
          - ""
          - - "{{resolve:secretsmanager:"
            - Ref: docdbclusterSecret8960ABD9
            - :SecretString:username::}}
      MasterUserPassword:
        Fn::Join:
          - ""
          - - "{{resolve:secretsmanager:"
            - Ref: docdbclusterSecret8960ABD9
            - :SecretString:password::}}
      StorageEncrypted: true
      VpcSecurityGroupIds:
        - Fn::GetAtt:
            - docdbclusterSecurityGroup94B0531F
            - GroupId
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: noSqlDemoStack/docdb-cluster/Resource
  docdbclusterInstance1EEAF243B:
    Type: AWS::DocDB::DBInstance
    Properties:
      DBClusterIdentifier:
        Ref: docdbcluster9D0B0898
      DBInstanceClass: db.r5.large
    DependsOn:
      - VPCpublicSubSubnet1DefaultRoute59D7182E
      - VPCpublicSubSubnet2DefaultRouteA59748C1
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: noSqlDemoStack/docdb-cluster/Instance1
  docdbclusterInstance2BFC16653:
    Type: AWS::DocDB::DBInstance
    Properties:
      DBClusterIdentifier:
        Ref: docdbcluster9D0B0898
      DBInstanceClass: db.r5.large
    DependsOn:
      - VPCpublicSubSubnet1DefaultRoute59D7182E
      - VPCpublicSubSubnet2DefaultRouteA59748C1
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: noSqlDemoStack/docdb-cluster/Instance2
  Parameterdocdbendpoint6790C784:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value:
        Fn::GetAtt:
          - docdbcluster9D0B0898
          - Endpoint
      Description: The docDB endpoint
      Name: docdb-endpoint
    Metadata:
      aws:cdk:path: noSqlDemoStack/Parameter-docdb-endpoint/Resource
  rdsinstanceSubnetGroup18087AB3:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for rds-instance database
      SubnetIds:
        - Ref: VPCprivateSubSubnet1Subnet1A8F4B88
        - Ref: VPCprivateSubSubnet2SubnetBAAF7221
    Metadata:
      aws:cdk:path: noSqlDemoStack/rds-instance/SubnetGroup/Default
  rdsinstanceSecurityGroupD99CB613:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for rds-instance database
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: noSqlDemoStack/rds-instance/SecurityGroup/Resource
  noSqlDemoStackrdsinstanceSecretE754F8323fdaad7efa858a3daf9490cf0a702aeb:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description:
        Fn::Join:
          - ""
          - - "Generated by the CDK for stack: "
            - Ref: AWS::StackName
      GenerateSecretString:
        ExcludeCharacters: " %+~`#$&*()|[]{}:;<>?!'/@\"\\"
        GenerateStringKey: password
        PasswordLength: 30
        SecretStringTemplate: '{"username":"admin"}'
      Name: /nosqldemo/rds/masteruser
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: noSqlDemoStack/rds-instance/Secret/Resource
  rdsinstanceSecretAttachment3968FB15:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId:
        Ref: noSqlDemoStackrdsinstanceSecretE754F8323fdaad7efa858a3daf9490cf0a702aeb
      TargetId:
        Ref: rdsinstance46C79398
      TargetType: AWS::RDS::DBInstance
    Metadata:
      aws:cdk:path: noSqlDemoStack/rds-instance/Secret/Attachment/Resource
  rdsinstance46C79398:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t3.micro
      AllocatedStorage: "100"
      AutoMinorVersionUpgrade: true
      CopyTagsToSnapshot: true
      DBName: rdsnosqldemo
      DBSubnetGroupName:
        Ref: rdsinstanceSubnetGroup18087AB3
      DeleteAutomatedBackups: true
      DeletionProtection: false
      Engine: mysql
      EngineVersion: 8.0.21
      MasterUsername: admin
      MasterUserPassword:
        Fn::Join:
          - ""
          - - "{{resolve:secretsmanager:"
            - Ref: noSqlDemoStackrdsinstanceSecretE754F8323fdaad7efa858a3daf9490cf0a702aeb
            - :SecretString:password::}}
      MultiAZ: true
      PubliclyAccessible: false
      StorageType: gp2
      VPCSecurityGroups:
        - Fn::GetAtt:
            - rdsinstanceSecurityGroupD99CB613
            - GroupId
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: noSqlDemoStack/rds-instance/Resource
  ParameterrdsendpointB913FDF7:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value:
        Fn::GetAtt:
          - rdsinstance46C79398
          - Endpoint.Address
      Description: The RDS endpoint
      Name: rds-endpoint
    Metadata:
      aws:cdk:path: noSqlDemoStack/Parameter-rds-endpoint/Resource
  DynamoDBTable59784FC0:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: email
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: userdata
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: noSqlDemoStack/DynamoDBTable/Resource
  Parameterdynamotablename67506C41:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value: userdata
      Description: The dynamoDB table name
      Name: dynamo-table
    Metadata:
      aws:cdk:path: noSqlDemoStack/Parameter-dynamo-tablename/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/4VTTW/bMAz9LbsrGpJddq0drOhhmOEUvRa0zGZqLMmQqBaB4f8+Wqo/0mHYiRT1+Eg+UQd52Mv9F3gPO9Vedp1u5HAiUBdRxkDO1Bhc9ApF+WIXn9HPgwYjh59g4Yxt5TqtrhPmNlC7LmdOdgWt3oMNBFZh5d2L7nAUHZimBTn8iFaRdnYCzf4owrdnCAEpyLvJ8FkWUV2QCggoUB3k8NSrKeepKkUVG65zio1lKMdWr3aR8BGa3F2OrzHmdkrDXD5diMrrNyBcOR4soWf/nqPvcP0o+nG6I9bwt0FL4oQqek3Xe+9in8rdBGYFtmqMAjsIpBVzoByWFheKGnueLHWYYqxMMNPDeW3PFXgwyM0lqefDKCz2FG3mOxafGI9F2fGD56RjsXbSOtXyThyBoGGRb1BbjhnA0/ks0D8pQ4IEk1bF5/lyVjaP4M9IGwkXwOebUfg2rM0tWv413P863cx7tWDcNPKyH8kZR5F2jj/HmUUW249xo/ivSH1MtKWzrc6La12L8jV8fdt/l/sDf7jXoPXOR0vaoKyz/QNOXMW0jAMAAA==
    Metadata:
      aws:cdk:path: noSqlDemoStack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Parameters:
  SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
Outputs:
  DownloadKeyCommand:
    Value: aws secretsmanager get-secret-value --secret-id /nosqldemo/ec2/keypair/private --query SecretString --output text > cdk-key.pem && chmod 400 cdk-key.pem
  sshcommand:
    Value:
      Fn::Join:
        - ""
        - - ssh -i cdk-key.pem -o IdentitiesOnly=yes ec2-user@
          - Fn::GetAtt:
              - ec2instance42082E81
              - PublicIp
  applicationlink:
    Value:
      Fn::Join:
        - ""
        - - Fn::GetAtt:
              - ec2instance42082E81
              - PublicDnsName
          - :8080
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2
Rules:
  CheckBootstrapVersion:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::Contains:
                - - "1"
                  - "2"
                  - "3"
                  - "4"
                  - "5"
                - Ref: BootstrapVersion
        AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.

