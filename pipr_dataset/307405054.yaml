Resources:
  myCertificateC6E9D8A3:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: forhead.online
      ValidationMethod: DNS
    Metadata:
      aws:cdk:path: LambdaWordpressStack/myCertificate/Resource
  serverlessWordpressVPCE212FBEB:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: LambdaWordpressStack/serverlessWordpressVPC
    Metadata:
      aws:cdk:path: LambdaWordpressStack/serverlessWordpressVPC/Resource
  serverlessWordpressVPCpublicSubnet1Subnet8A32F799:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      VpcId:
        Ref: serverlessWordpressVPCE212FBEB
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: LambdaWordpressStack/serverlessWordpressVPC/publicSubnet1
    Metadata:
      aws:cdk:path: LambdaWordpressStack/serverlessWordpressVPC/publicSubnet1/Subnet
  serverlessWordpressVPCpublicSubnet1RouteTable5D918F5C:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: serverlessWordpressVPCE212FBEB
      Tags:
        - Key: Name
          Value: LambdaWordpressStack/serverlessWordpressVPC/publicSubnet1
    Metadata:
      aws:cdk:path: LambdaWordpressStack/serverlessWordpressVPC/publicSubnet1/RouteTable
  serverlessWordpressVPCpublicSubnet1RouteTableAssociation1E6EAB4A:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: serverlessWordpressVPCpublicSubnet1RouteTable5D918F5C
      SubnetId:
        Ref: serverlessWordpressVPCpublicSubnet1Subnet8A32F799
    Metadata:
      aws:cdk:path: LambdaWordpressStack/serverlessWordpressVPC/publicSubnet1/RouteTableAssociation
  serverlessWordpressVPCpublicSubnet1DefaultRouteE21DC9BD:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: serverlessWordpressVPCpublicSubnet1RouteTable5D918F5C
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: serverlessWordpressVPCIGWA5B4F222
    DependsOn:
      - serverlessWordpressVPCVPCGWFD3A1A06
    Metadata:
      aws:cdk:path: LambdaWordpressStack/serverlessWordpressVPC/publicSubnet1/DefaultRoute
  serverlessWordpressVPCpublicSubnet1EIP9E860855:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: LambdaWordpressStack/serverlessWordpressVPC/publicSubnet1
    Metadata:
      aws:cdk:path: LambdaWordpressStack/serverlessWordpressVPC/publicSubnet1/EIP
  serverlessWordpressVPCpublicSubnet1NATGatewayEB4595FE:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - serverlessWordpressVPCpublicSubnet1EIP9E860855
          - AllocationId
      SubnetId:
        Ref: serverlessWordpressVPCpublicSubnet1Subnet8A32F799
      Tags:
        - Key: Name
          Value: LambdaWordpressStack/serverlessWordpressVPC/publicSubnet1
    Metadata:
      aws:cdk:path: LambdaWordpressStack/serverlessWordpressVPC/publicSubnet1/NATGateway
  serverlessWordpressVPCpublicSubnet2Subnet6190876F:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      VpcId:
        Ref: serverlessWordpressVPCE212FBEB
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: LambdaWordpressStack/serverlessWordpressVPC/publicSubnet2
    Metadata:
      aws:cdk:path: LambdaWordpressStack/serverlessWordpressVPC/publicSubnet2/Subnet
  serverlessWordpressVPCpublicSubnet2RouteTable5ED74127:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: serverlessWordpressVPCE212FBEB
      Tags:
        - Key: Name
          Value: LambdaWordpressStack/serverlessWordpressVPC/publicSubnet2
    Metadata:
      aws:cdk:path: LambdaWordpressStack/serverlessWordpressVPC/publicSubnet2/RouteTable
  serverlessWordpressVPCpublicSubnet2RouteTableAssociation3685463A:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: serverlessWordpressVPCpublicSubnet2RouteTable5ED74127
      SubnetId:
        Ref: serverlessWordpressVPCpublicSubnet2Subnet6190876F
    Metadata:
      aws:cdk:path: LambdaWordpressStack/serverlessWordpressVPC/publicSubnet2/RouteTableAssociation
  serverlessWordpressVPCpublicSubnet2DefaultRoute883A66CF:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: serverlessWordpressVPCpublicSubnet2RouteTable5ED74127
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: serverlessWordpressVPCIGWA5B4F222
    DependsOn:
      - serverlessWordpressVPCVPCGWFD3A1A06
    Metadata:
      aws:cdk:path: LambdaWordpressStack/serverlessWordpressVPC/publicSubnet2/DefaultRoute
  serverlessWordpressVPCpublicSubnet2EIP679A1A4D:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: LambdaWordpressStack/serverlessWordpressVPC/publicSubnet2
    Metadata:
      aws:cdk:path: LambdaWordpressStack/serverlessWordpressVPC/publicSubnet2/EIP
  serverlessWordpressVPCpublicSubnet2NATGatewayF388D0FD:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - serverlessWordpressVPCpublicSubnet2EIP679A1A4D
          - AllocationId
      SubnetId:
        Ref: serverlessWordpressVPCpublicSubnet2Subnet6190876F
      Tags:
        - Key: Name
          Value: LambdaWordpressStack/serverlessWordpressVPC/publicSubnet2
    Metadata:
      aws:cdk:path: LambdaWordpressStack/serverlessWordpressVPC/publicSubnet2/NATGateway
  serverlessWordpressVPCprivateSubnet1SubnetD30380E2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.2.0/24
      VpcId:
        Ref: serverlessWordpressVPCE212FBEB
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: LambdaWordpressStack/serverlessWordpressVPC/privateSubnet1
    Metadata:
      aws:cdk:path: LambdaWordpressStack/serverlessWordpressVPC/privateSubnet1/Subnet
  serverlessWordpressVPCprivateSubnet1RouteTableD051F698:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: serverlessWordpressVPCE212FBEB
      Tags:
        - Key: Name
          Value: LambdaWordpressStack/serverlessWordpressVPC/privateSubnet1
    Metadata:
      aws:cdk:path: LambdaWordpressStack/serverlessWordpressVPC/privateSubnet1/RouteTable
  serverlessWordpressVPCprivateSubnet1RouteTableAssociation7754B07B:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: serverlessWordpressVPCprivateSubnet1RouteTableD051F698
      SubnetId:
        Ref: serverlessWordpressVPCprivateSubnet1SubnetD30380E2
    Metadata:
      aws:cdk:path: LambdaWordpressStack/serverlessWordpressVPC/privateSubnet1/RouteTableAssociation
  serverlessWordpressVPCprivateSubnet1DefaultRouteC39FAE04:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: serverlessWordpressVPCprivateSubnet1RouteTableD051F698
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: serverlessWordpressVPCpublicSubnet1NATGatewayEB4595FE
    Metadata:
      aws:cdk:path: LambdaWordpressStack/serverlessWordpressVPC/privateSubnet1/DefaultRoute
  serverlessWordpressVPCprivateSubnet2Subnet61EA0B6B:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.3.0/24
      VpcId:
        Ref: serverlessWordpressVPCE212FBEB
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: LambdaWordpressStack/serverlessWordpressVPC/privateSubnet2
    Metadata:
      aws:cdk:path: LambdaWordpressStack/serverlessWordpressVPC/privateSubnet2/Subnet
  serverlessWordpressVPCprivateSubnet2RouteTable35A5528E:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: serverlessWordpressVPCE212FBEB
      Tags:
        - Key: Name
          Value: LambdaWordpressStack/serverlessWordpressVPC/privateSubnet2
    Metadata:
      aws:cdk:path: LambdaWordpressStack/serverlessWordpressVPC/privateSubnet2/RouteTable
  serverlessWordpressVPCprivateSubnet2RouteTableAssociation82E1E4DD:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: serverlessWordpressVPCprivateSubnet2RouteTable35A5528E
      SubnetId:
        Ref: serverlessWordpressVPCprivateSubnet2Subnet61EA0B6B
    Metadata:
      aws:cdk:path: LambdaWordpressStack/serverlessWordpressVPC/privateSubnet2/RouteTableAssociation
  serverlessWordpressVPCprivateSubnet2DefaultRoute57911420:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: serverlessWordpressVPCprivateSubnet2RouteTable35A5528E
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: serverlessWordpressVPCpublicSubnet2NATGatewayF388D0FD
    Metadata:
      aws:cdk:path: LambdaWordpressStack/serverlessWordpressVPC/privateSubnet2/DefaultRoute
  serverlessWordpressVPCIGWA5B4F222:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: LambdaWordpressStack/serverlessWordpressVPC
    Metadata:
      aws:cdk:path: LambdaWordpressStack/serverlessWordpressVPC/IGW
  serverlessWordpressVPCVPCGWFD3A1A06:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: serverlessWordpressVPCE212FBEB
      InternetGatewayId:
        Ref: serverlessWordpressVPCIGWA5B4F222
    Metadata:
      aws:cdk:path: LambdaWordpressStack/serverlessWordpressVPC/VPCGW
  NFSAllowAllSG1B23B86D:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow 2049 inbound for ec2
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: allow 2049 inbound from ec2
          FromPort: 2049
          IpProtocol: tcp
          ToPort: 2049
      VpcId:
        Ref: serverlessWordpressVPCE212FBEB
    Metadata:
      aws:cdk:path: LambdaWordpressStack/NFSAllowAllSG/Resource
  NFSAllowAllSGfromLambdaWordpressStackwordpressLambdaFUnctionSecurityGroupB5CF52962049C4D71739:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: from LambdaWordpressStackwordpressLambdaFUnctionSecurityGroupB5CF5296:2049
      FromPort: 2049
      GroupId:
        Fn::GetAtt:
          - NFSAllowAllSG1B23B86D
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - wordpressLambdaFUnctionSecurityGroup8997B874
          - GroupId
      ToPort: 2049
    Metadata:
      aws:cdk:path: LambdaWordpressStack/NFSAllowAllSG/from LambdaWordpressStackwordpressLambdaFUnctionSecurityGroupB5CF5296:2049
  albSG8D3A1F76:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow 80 and 443
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: allow 80 inbound
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          Description: allow 443 inbound
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId:
        Ref: serverlessWordpressVPCE212FBEB
    Metadata:
      aws:cdk:path: LambdaWordpressStack/albSG/Resource
  ec2SGD28476DB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow 22 inbound for ec2
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: allow 22 inbound from ec2
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      VpcId:
        Ref: serverlessWordpressVPCE212FBEB
    Metadata:
      aws:cdk:path: LambdaWordpressStack/ec2SG/Resource
  wordpressRdsSecurityGroupB2FA9EAC:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow 3306 inbound
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: allow 3306 inbound from lambda
          FromPort: 3306
          IpProtocol: tcp
          ToPort: 3306
      VpcId:
        Ref: serverlessWordpressVPCE212FBEB
    Metadata:
      aws:cdk:path: LambdaWordpressStack/wordpressRdsSecurityGroup/Resource
  wordpressEFS6765B40C:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: false
      FileSystemTags:
        - Key: Name
          Value: LambdaWordpressStack/wordpressEFS
      PerformanceMode: generalPurpose
      ThroughputMode: bursting
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: LambdaWordpressStack/wordpressEFS/Resource
  wordpressEFSEfsMountTarget19B0649B3:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: wordpressEFS6765B40C
      SecurityGroups:
        - Fn::GetAtt:
            - NFSAllowAllSG1B23B86D
            - GroupId
      SubnetId:
        Ref: serverlessWordpressVPCprivateSubnet1SubnetD30380E2
    Metadata:
      aws:cdk:path: LambdaWordpressStack/wordpressEFS/EfsMountTarget1
  wordpressEFSEfsMountTarget26BAC7EE1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: wordpressEFS6765B40C
      SecurityGroups:
        - Fn::GetAtt:
            - NFSAllowAllSG1B23B86D
            - GroupId
      SubnetId:
        Ref: serverlessWordpressVPCprivateSubnet2Subnet61EA0B6B
    Metadata:
      aws:cdk:path: LambdaWordpressStack/wordpressEFS/EfsMountTarget2
  wordpressEFSLambdaAccessPointCFB61517:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId:
        Ref: wordpressEFS6765B40C
      PosixUser:
        Gid: "1000"
        Uid: "1000"
      RootDirectory:
        CreationInfo:
          OwnerGid: "1000"
          OwnerUid: "1000"
          Permissions: "0777"
        Path: /wordpress
    Metadata:
      aws:cdk:path: LambdaWordpressStack/wordpressEFS/LambdaAccessPoint/Resource
  wordpressLambdaFUnctionServiceRoleBC66FCD3:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
    DependsOn:
      - wordpressEFSEfsMountTarget19B0649B3
      - wordpressEFSEfsMountTarget26BAC7EE1
    Metadata:
      aws:cdk:path: LambdaWordpressStack/wordpressLambdaFUnction/ServiceRole/Resource
  wordpressLambdaFUnctionServiceRoleDefaultPolicy4FB56362:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: elasticfilesystem:ClientMount
            Condition:
              StringEquals:
                elasticfilesystem:AccessPointArn:
                  Fn::Join:
                    - ""
                    - - "arn:"
                      - Ref: AWS::Partition
                      - ":elasticfilesystem:"
                      - Ref: AWS::Region
                      - ":"
                      - Ref: AWS::AccountId
                      - :access-point/
                      - Ref: wordpressEFSLambdaAccessPointCFB61517
            Effect: Allow
            Resource: "*"
          - Action: elasticfilesystem:ClientWrite
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":elasticfilesystem:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :file-system/
                  - Ref: wordpressEFS6765B40C
          - Action:
              - xray:PutTraceSegments
              - xray:PutTelemetryRecords
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: wordpressLambdaFUnctionServiceRoleDefaultPolicy4FB56362
      Roles:
        - Ref: wordpressLambdaFUnctionServiceRoleBC66FCD3
    DependsOn:
      - wordpressEFSEfsMountTarget19B0649B3
      - wordpressEFSEfsMountTarget26BAC7EE1
    Metadata:
      aws:cdk:path: LambdaWordpressStack/wordpressLambdaFUnction/ServiceRole/DefaultPolicy/Resource
  wordpressLambdaFUnctionSecurityGroup8997B874:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatic security group for Lambda Function LambdaWordpressStackwordpressLambdaFUnction1EEE52D3
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: serverlessWordpressVPCE212FBEB
    DependsOn:
      - wordpressEFSEfsMountTarget19B0649B3
      - wordpressEFSEfsMountTarget26BAC7EE1
    Metadata:
      aws:cdk:path: LambdaWordpressStack/wordpressLambdaFUnction/SecurityGroup/Resource
  wordpressLambdaFUnctionCA55384D:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: AssetParametersf661a8a8dbe01343c029153082bb69c2267c14596822d2a6345551da0084050bS3BucketEA924CA0
        S3Key:
          Fn::Join:
            - ""
            - - Fn::Select:
                  - 0
                  - Fn::Split:
                      - "||"
                      - Ref: AssetParametersf661a8a8dbe01343c029153082bb69c2267c14596822d2a6345551da0084050bS3VersionKey19D591C8
              - Fn::Select:
                  - 1
                  - Fn::Split:
                      - "||"
                      - Ref: AssetParametersf661a8a8dbe01343c029153082bb69c2267c14596822d2a6345551da0084050bS3VersionKey19D591C8
      Role:
        Fn::GetAtt:
          - wordpressLambdaFUnctionServiceRoleBC66FCD3
          - Arn
      Environment:
        Variables:
          DB_HOST:
            Fn::GetAtt:
              - ServerlessWordpressAuroraCluster5B0C9262
              - Endpoint.Address
          DB_NAME: wordpress
          DB_USER: wordpressuser
          DB_PASSWORD: dbPassword0!
          WORDPRESS_PATH: /mnt/efs
          HTTP_HOST:
            Fn::GetAtt:
              - serverlessALB431D0A42
              - DNSName
      FileSystemConfigs:
        - Arn:
            Fn::Join:
              - ""
              - - "arn:"
                - Ref: AWS::Partition
                - ":elasticfilesystem:"
                - Ref: AWS::Region
                - ":"
                - Ref: AWS::AccountId
                - :access-point/
                - Ref: wordpressEFSLambdaAccessPointCFB61517
          LocalMountPath: /mnt/efs
      Handler: handler.php
      Layers:
        - arn:aws:lambda:us-east-1:887080169480:layer:php73:3
      MemorySize: 1024
      Runtime: provided
      Timeout: 900
      TracingConfig:
        Mode: Active
      VpcConfig:
        SecurityGroupIds:
          - Fn::GetAtt:
              - wordpressLambdaFUnctionSecurityGroup8997B874
              - GroupId
        SubnetIds:
          - Ref: serverlessWordpressVPCprivateSubnet1SubnetD30380E2
          - Ref: serverlessWordpressVPCprivateSubnet2Subnet61EA0B6B
    DependsOn:
      - NFSAllowAllSGfromLambdaWordpressStackwordpressLambdaFUnctionSecurityGroupB5CF52962049C4D71739
      - wordpressEFSEfsMountTarget19B0649B3
      - wordpressEFSEfsMountTarget26BAC7EE1
      - wordpressLambdaFUnctionServiceRoleDefaultPolicy4FB56362
      - wordpressLambdaFUnctionServiceRoleBC66FCD3
    Metadata:
      aws:cdk:path: LambdaWordpressStack/wordpressLambdaFUnction/Resource
      aws:asset:path: asset.f661a8a8dbe01343c029153082bb69c2267c14596822d2a6345551da0084050b
      aws:asset:property: Code
  wordpressLambdaFUnctionInvokeServicePrincipalelasticloadbalancingamazonawscomAF3754F0:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - wordpressLambdaFUnctionCA55384D
          - Arn
      Principal: elasticloadbalancing.amazonaws.com
    DependsOn:
      - wordpressEFSEfsMountTarget19B0649B3
      - wordpressEFSEfsMountTarget26BAC7EE1
    Metadata:
      aws:cdk:path: LambdaWordpressStack/wordpressLambdaFUnction/InvokeServicePrincipal(elasticloadbalancing.amazonaws.com)
  serverlessALB431D0A42:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: "false"
      Scheme: internet-facing
      SecurityGroups:
        - Fn::GetAtt:
            - albSG8D3A1F76
            - GroupId
      Subnets:
        - Ref: serverlessWordpressVPCpublicSubnet1Subnet8A32F799
        - Ref: serverlessWordpressVPCpublicSubnet2Subnet6190876F
      Type: application
    DependsOn:
      - serverlessWordpressVPCpublicSubnet1DefaultRouteE21DC9BD
      - serverlessWordpressVPCpublicSubnet2DefaultRoute883A66CF
    Metadata:
      aws:cdk:path: LambdaWordpressStack/serverlessALB/Resource
  serverlessALBListener80F792BF8A:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: albTargetGroup34598B19
          Type: forward
      LoadBalancerArn:
        Ref: serverlessALB431D0A42
      Port: 80
      Protocol: HTTP
    Metadata:
      aws:cdk:path: LambdaWordpressStack/serverlessALB/Listener80/Resource
  serverlessALBListener443B1106BFB:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: albTargetGroup34598B19
          Type: forward
      LoadBalancerArn:
        Ref: serverlessALB431D0A42
      Certificates:
        - CertificateArn:
            Ref: myCertificateC6E9D8A3
      Port: 443
      Protocol: HTTPS
    Metadata:
      aws:cdk:path: LambdaWordpressStack/serverlessALB/Listener443/Resource
  albTargetGroup34598B19:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetGroupAttributes:
        - Key: lambda.multi_value_headers.enabled
          Value: "true"
      Targets:
        - Id:
            Fn::GetAtt:
              - wordpressLambdaFUnctionCA55384D
              - Arn
      TargetType: lambda
    DependsOn:
      - wordpressLambdaFUnctionInvokeServicePrincipalelasticloadbalancingamazonawscomAF3754F0
    Metadata:
      aws:cdk:path: LambdaWordpressStack/albTargetGroup/Resource
  ServerlessWordpressAuroraClusterSubnets73189BF4:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnets for ServerlessWordpressAuroraCluster database
      SubnetIds:
        - Ref: serverlessWordpressVPCprivateSubnet1SubnetD30380E2
        - Ref: serverlessWordpressVPCprivateSubnet2Subnet61EA0B6B
    Metadata:
      aws:cdk:path: LambdaWordpressStack/ServerlessWordpressAuroraCluster/Subnets/Default
  ServerlessWordpressAuroraCluster5B0C9262:
    Type: AWS::RDS::DBCluster
    Properties:
      Engine: aurora-mysql
      DatabaseName: wordpress
      DBClusterParameterGroupName: default.aurora-mysql5.7
      DBSubnetGroupName:
        Ref: ServerlessWordpressAuroraClusterSubnets73189BF4
      MasterUsername: wordpressuser
      MasterUserPassword: dbPassword0!
      VpcSecurityGroupIds:
        - Fn::GetAtt:
            - wordpressRdsSecurityGroupB2FA9EAC
            - GroupId
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: LambdaWordpressStack/ServerlessWordpressAuroraCluster/Resource
  ServerlessWordpressAuroraClusterInstance130420D81:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t3.medium
      DBClusterIdentifier:
        Ref: ServerlessWordpressAuroraCluster5B0C9262
      DBSubnetGroupName:
        Ref: ServerlessWordpressAuroraClusterSubnets73189BF4
      Engine: aurora-mysql
    DependsOn:
      - serverlessWordpressVPCprivateSubnet1DefaultRouteC39FAE04
      - serverlessWordpressVPCprivateSubnet2DefaultRoute57911420
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: LambdaWordpressStack/ServerlessWordpressAuroraCluster/Instance1
  ServerlessWordpressAuroraClusterInstance2B246CC03:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t3.medium
      DBClusterIdentifier:
        Ref: ServerlessWordpressAuroraCluster5B0C9262
      DBSubnetGroupName:
        Ref: ServerlessWordpressAuroraClusterSubnets73189BF4
      Engine: aurora-mysql
    DependsOn:
      - serverlessWordpressVPCprivateSubnet1DefaultRouteC39FAE04
      - serverlessWordpressVPCprivateSubnet2DefaultRoute57911420
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: LambdaWordpressStack/ServerlessWordpressAuroraCluster/Instance2
  efsInstanceInstanceRole8000A1DE:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - ec2.
                    - Ref: AWS::URLSuffix
        Version: "2012-10-17"
      Tags:
        - Key: Name
          Value: LambdaWordpressStack/efsInstance
    Metadata:
      aws:cdk:path: LambdaWordpressStack/efsInstance/InstanceRole/Resource
  efsInstanceInstanceProfile0316DB05:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: efsInstanceInstanceRole8000A1DE
    Metadata:
      aws:cdk:path: LambdaWordpressStack/efsInstance/InstanceProfile
  efsInstance69FDCEE3:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      IamInstanceProfile:
        Ref: efsInstanceInstanceProfile0316DB05
      ImageId:
        Ref: SsmParameterValueawsserviceamiamazonlinuxlatestamznamihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter
      InstanceType: t2.large
      KeyName: virginia
      SecurityGroupIds:
        - Fn::GetAtt:
            - ec2SGD28476DB
            - GroupId
      SubnetId:
        Ref: serverlessWordpressVPCpublicSubnet1Subnet8A32F799
      Tags:
        - Key: Name
          Value: LambdaWordpressStack/efsInstance
      UserData:
        Fn::Base64: |-
          #!/bin/bash
          sudo yum install -y amazon-efs-utils
          sudo mkdir /mnt
          sudo mkdir /mnt/efs
    DependsOn:
      - efsInstanceInstanceRole8000A1DE
    Metadata:
      aws:cdk:path: LambdaWordpressStack/efsInstance/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAAE31T227bMAz9lr0r6twBwx6XulsRYBchKfpOy4yn1pYMUUoRGP73UXJ9KQbsSeeQlEgeUoUsPn6WxYev8Eo7Xb/cDNp5lMMpgH4RRyQXvUaxJ8LAtsbYRpTOUvBRB1GerQIPHQb0ifyOoY/ZvNxkzPG1CcbZUaQsg0YfzNloCNiBhQa9HMrVlq+sdBSob+Xw1OvkeFKlULFqjT7FymLOtaKjiwEfoWpxta82bsJpA6mSJTiBbweVjl8QHjjfK1yF8ubCcH34YLlDxnPAVMkb2wcW60+HNogT6uhNuD54F/tcw38NB9t4JBIHFhTspNaMue8zyeG7afF0JZYqOd+zny7a8Ai+4SL3WvNLyhmbC97QUbTQVTXwW9HqufstVug7Q5QnZKCTw9FNCuZTOVY7t7yiuUjl3ZlLGgV92kHaEZJ5VQS2QMHo1kFdQcuhvDgXHuO+79s0Vs71g3132Tctzzu+jTPcr32LmfHGPwmwCLyho/A1S3gPASogLNtIaVGnsS4X7u/+McyRmSwDGUdhXY3ymW4uxRdZ3PK/eSZjdp7HYDqUx+n8C/SeFPBUAwAA
    Metadata:
      aws:cdk:path: LambdaWordpressStack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Parameters:
  AssetParametersf661a8a8dbe01343c029153082bb69c2267c14596822d2a6345551da0084050bS3BucketEA924CA0:
    Type: String
    Description: S3 bucket for asset "f661a8a8dbe01343c029153082bb69c2267c14596822d2a6345551da0084050b"
  AssetParametersf661a8a8dbe01343c029153082bb69c2267c14596822d2a6345551da0084050bS3VersionKey19D591C8:
    Type: String
    Description: S3 key for asset version "f661a8a8dbe01343c029153082bb69c2267c14596822d2a6345551da0084050b"
  AssetParametersf661a8a8dbe01343c029153082bb69c2267c14596822d2a6345551da0084050bArtifactHash69ADDABB:
    Type: String
    Description: Artifact hash for asset "f661a8a8dbe01343c029153082bb69c2267c14596822d2a6345551da0084050b"
  SsmParameterValueawsserviceamiamazonlinuxlatestamznamihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-gp2
Outputs:
  outputEFS:
    Description: efs id
    Value:
      Fn::Join:
        - ""
        - - "efs id: "
          - Ref: wordpressEFS6765B40C
  outputALBDNS:
    Description: alb dns name
    Value:
      Fn::Join:
        - ""
        - - "alb dns name: "
          - Fn::GetAtt:
              - serverlessALB431D0A42
              - DNSName
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2

