Resources:
  SmartProductSettingsTableF8EB85E2:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: settingId
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: settingId
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductSettingsTable/Resource
  SmartProductRegistrationTableF43C70F1:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: deviceId
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: deviceId
          AttributeType: S
        - AttributeName: deviceName
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: deviceId-index
          KeySchema:
            - AttributeName: deviceId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: userId-deviceName-index
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: deviceName
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      SSESpecification:
        SSEEnabled: true
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductRegistrationTable/Resource
  SmartProductCommandTableAA40DC37:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: deviceId
          KeyType: HASH
        - AttributeName: commandId
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: deviceId
          AttributeType: S
        - AttributeName: commandId
          AttributeType: S
        - AttributeName: updatedAt
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: deviceId-updatedAt-index
          KeySchema:
            - AttributeName: deviceId
              KeyType: HASH
            - AttributeName: updatedAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      SSESpecification:
        SSEEnabled: true
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductCommandTable/Resource
  SmartProductEventsTableB072870B:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: deviceId
          KeyType: HASH
        - AttributeName: id
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: deviceId
          AttributeType: S
        - AttributeName: id
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: "N"
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: userId-timestamp-index
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: deviceId-timestamp-index
          KeySchema:
            - AttributeName: deviceId
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      SSESpecification:
        SSEEnabled: true
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductEventsTable/Resource
  SmartProductReferenceTableD6286FA8:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: deviceId
          KeyType: HASH
        - AttributeName: modelNumber
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: deviceId
          AttributeType: S
        - AttributeName: modelNumber
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductReferenceTable/Resource
  SmartProductHelperPolicyA0A5503C:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws-cn:logs:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :log-group:/aws/lambda/*
          - Action:
              - iot:UpdateAccountAuditConfiguration
              - iot:CreateScheduledAudit
              - iot:DeleteAccountAuditConfiguration
              - iot:DeleteScheduledAudit
              - iot:DescribeEndpoint
              - iot:DescribeAccountAuditConfiguration
            Effect: Allow
            Resource: "*"
          - Action: iot:CreateThingType
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws-cn:iot:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :thingtype/SmartProduct
          - Action: iam:PassRole
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws-cn:iam::"
                  - Ref: AWS::AccountId
                  - :role/*
        Version: "2012-10-17"
      PolicyName: SmartProductHelperPolicyA0A5503C
      Roles:
        - Ref: SmartProductHelperRoleE097088F
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: The * resource allows exchange information with solution resources.
  SmartProductCognitoHelperPolicy82CB11AF:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws-cn:logs:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :log-group:/aws/lambda/*
          - Action: dynamodb:PutItem
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - SmartProductSettingsTableF8EB85E2
                - Arn
        Version: "2012-10-17"
      PolicyName: SmartProductCognitoHelperPolicy82CB11AF
      Roles:
        - Ref: SmartProductCognitoHelperRole0C850A6A
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: The * resource allows to access its own logs.
  SmartProductHelperRoleE097088F:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductHelperRole/Resource
  SingletonLambdahelperFunction069AB33D:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: undefined
        S3Key: smart-product-solution/v0.0.1/smart-product-helper.zip
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - SmartProductHelperRoleE097088F
          - Arn
      Runtime: nodejs12.x
      Description: Smart Product Solution deployment helper
      Environment:
        Variables:
          LOGGING_LEVEL: "2"
      FunctionName: SmartProductHelper
      MemorySize: 256
      Timeout: 300
    DependsOn:
      - SmartProductHelperRoleE097088F
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SingletonLambdahelperFunction/Resource
  SmartProductCognitoHelperRole0C850A6A:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductCognitoHelperRole/Resource
  SmartProductCognitoHelper037698E4:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: undefined
        S3Key: smart-product-solution/v0.0.1/smart-product-cognito.zip
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - SmartProductCognitoHelperRole0C850A6A
          - Arn
      Runtime: nodejs12.x
      Description: Smart Product Solution Cognito trigger
      Environment:
        Variables:
          SETTINGS_TBL:
            Ref: SmartProductSettingsTableF8EB85E2
          LOGGING_LEVEL: "2"
      FunctionName: SmartProductCognitoHelper
      MemorySize: 128
      Timeout: 60
    DependsOn:
      - SmartProductCognitoHelperRole0C850A6A
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductCognitoHelper/Resource
  SmartProductCheckRequirements:
    Type: Custom::CheckRequirements
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - SingletonLambdahelperFunction069AB33D
          - Arn
      Region:
        Ref: AWS::Region
      DeploySmartProductTelemetry: true
      DeploySmartProductEvent: true
      DeploySmartProductJitr: true
      DeploySmartProductApi: true
      DeploySmartProductSampleOwnerWebApp: true
      EnableSmartProductDefenderEnable: false
      TelemetryTopic: smartproduct/telemetry
      EventTopic: smartproduct/event
    DependsOn:
      - SmartProductHelperPolicyA0A5503C
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductCheckRequirements/Default
  SmartProductAppUuid:
    Type: Custom::CreateUuid
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - SingletonLambdahelperFunction069AB33D
          - Arn
      Region:
        Ref: AWS::Region
    DependsOn:
      - SmartProductHelperPolicyA0A5503C
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductAppUuid/Default
  SmartProductApiHelperIoTSearchIndexPolicy84943D47:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: iot:UpdateIndexingConfiguration
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: SmartProductApiHelperIoTSearchIndexPolicy84943D47
      Roles:
        - Ref: SmartProductHelperRoleE097088F
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason:
              Fn::Join:
                - ""
                - - "The * resource allows "
                  - Ref: SmartProductHelperRoleE097088F
                  - " to update IoT Search Index."
  SmartProductApiUpdateIoTSearchIndex5070E97D:
    Type: Custom::UpdateIoTSearchIndex
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - SingletonLambdahelperFunction069AB33D
          - Arn
      Region:
        Ref: AWS::Region
      CustomAction: updateIoTSearchIndex
    DependsOn:
      - SmartProductApiHelperIoTSearchIndexPolicy84943D47
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/UpdateIoTSearchIndex/Default
  SmartProductApihelperDynamoDBPolicy92683468:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: dynamodb:PutItem
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - SmartProductSettingsTableF8EB85E2
                - Arn
        Version: "2012-10-17"
      PolicyName: SmartProductApihelperDynamoDBPolicy92683468
      Roles:
        - Ref: SmartProductHelperRoleE097088F
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/helperDynamoDBPolicy/Resource
  SmartProductApiSaveDdbItem0BB2B1F4:
    Type: Custom::SaveDdbItem
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - SingletonLambdahelperFunction069AB33D
          - Arn
      Region:
        Ref: AWS::Region
      CustomAction: SaveDdbItem
      DdbTable:
        Ref: SmartProductSettingsTableF8EB85E2
      DdbItem:
        settingId: app-config
        setting: {}
    DependsOn:
      - SmartProductApihelperDynamoDBPolicy92683468
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/SaveDdbItem/Default
  SmartProductApiAdminServiceRoleC0422DFB:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/AdminServiceRole/Resource
  SmartProductApiAdminServiceB24A2D8F:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: undefined
        S3Key: smart-product-solution/v0.0.1/smart-product-admin-service.zip
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - SmartProductApiAdminServiceRoleC0422DFB
          - Arn
      Runtime: nodejs12.x
      Description: Smart Product administration API microservice
      Environment:
        Variables:
          LOGGING_LEVEL: "2"
          SETTINGS_TBL:
            Ref: SmartProductSettingsTableF8EB85E2
      FunctionName: SmartProductAPI-AdminService
      MemorySize: 256
      Timeout: 60
    DependsOn:
      - SmartProductApiAdminServiceRoleC0422DFB
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/AdminService/Resource
  SmartProductApiRegistrationServiceRole57349EA2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/RegistrationServiceRole/Resource
  SmartProductApiRegistrationService02A587E3:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: undefined
        S3Key: smart-product-solution/v0.0.1/smart-product-registration-service.zip
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - SmartProductApiRegistrationServiceRole57349EA2
          - Arn
      Runtime: nodejs12.x
      Description: Smart Product Solution registration API microservice
      Environment:
        Variables:
          LOGGING_LEVEL: "2"
          REGISTRATION_TBL:
            Ref: SmartProductRegistrationTableF43C70F1
          REFERENCE_TBL:
            Ref: SmartProductReferenceTableD6286FA8
          THING_TYPE: SmartProduct
          solutionId: SO0046
          solutionUuid:
            Fn::GetAtt:
              - SmartProductAppUuid
              - UUID
          anonymousData: "true"
      FunctionName: SmartProductAPI-RegistrationService
      MemorySize: 256
      Timeout: 60
    DependsOn:
      - SmartProductApiRegistrationServiceRole57349EA2
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/RegistrationService/Resource
  SmartProductApiEventServiceRoleF5F91897:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/EventServiceRole/Resource
  SmartProductApiEventService4EB5B483:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: undefined
        S3Key: smart-product-solution/v0.0.1/smart-product-event-service.zip
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - SmartProductApiEventServiceRoleF5F91897
          - Arn
      Runtime: nodejs12.x
      Description: Smart Product Solution event API microservice
      Environment:
        Variables:
          LOGGING_LEVEL: "2"
          SETTINGS_TBL:
            Ref: SmartProductSettingsTableF8EB85E2
          REGISTRATION_TBL:
            Ref: SmartProductRegistrationTableF43C70F1
          EVENTS_TBL:
            Ref: SmartProductEventsTableB072870B
      FunctionName: SmartProductAPI-EventService
      MemorySize: 256
      Timeout: 60
    DependsOn:
      - SmartProductApiEventServiceRoleF5F91897
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/EventService/Resource
  SmartProductApiCommandServiceRole0C068453:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/CommandServiceRole/Resource
  SmartProductApiCommandServiceC57E3CB1:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: undefined
        S3Key: smart-product-solution/v0.0.1/smart-product-command-service.zip
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - SmartProductApiCommandServiceRole0C068453
          - Arn
      Runtime: nodejs12.x
      Description: Smart Product Solution command API microservice
      Environment:
        Variables:
          LOGGING_LEVEL: "2"
          REGISTRATION_TBL:
            Ref: SmartProductRegistrationTableF43C70F1
          COMMANDS_TBL:
            Ref: SmartProductCommandTableAA40DC37
          solutionId: SO0046
          solutionUuid:
            Fn::GetAtt:
              - SmartProductAppUuid
              - UUID
          anonymousData: "true"
      FunctionName: SmartProductAPI-CommandService
      MemorySize: 256
      Timeout: 300
    DependsOn:
      - SmartProductApiCommandServiceRole0C068453
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/CommandService/Resource
  SmartProductApiStatusServiceRole881763B1:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/StatusServiceRole/Resource
  SmartProductApiStatusService01ABED9D:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: undefined
        S3Key: smart-product-solution/v0.0.1/smart-product-status-service.zip
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - SmartProductApiStatusServiceRole881763B1
          - Arn
      Runtime: nodejs12.x
      Description: Smart Product Solution status API microservice
      Environment:
        Variables:
          LOGGING_LEVEL: "2"
          REGISTRATION_TBL:
            Ref: SmartProductRegistrationTableF43C70F1
      FunctionName: SmartProductAPI-StatusService
      MemorySize: 256
      Timeout: 300
    DependsOn:
      - SmartProductApiStatusServiceRole881763B1
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/StatusService/Resource
  SmartProductApiDeviceServiceRole24229FD1:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/DeviceServiceRole/Resource
  SmartProductApiDeviceService94BBECC9:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: undefined
        S3Key: smart-product-solution/v0.0.1/smart-product-device-service.zip
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - SmartProductApiDeviceServiceRole24229FD1
          - Arn
      Runtime: nodejs12.x
      Description: Smart Product Solution device microservice
      Environment:
        Variables:
          LOGGING_LEVEL: "2"
          REGISTRATION_TBL:
            Ref: SmartProductRegistrationTableF43C70F1
      FunctionName: SmartProductAPI-DeviceService
      MemorySize: 256
      Timeout: 60
    DependsOn:
      - SmartProductApiDeviceServiceRole24229FD1
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/DeviceService/Resource
  SmartProductApiCommandStatusService087A0540:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: undefined
        S3Key: smart-product-solution/v0.0.1/smart-product-command-status.zip
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - SmartProductApiCommandServiceRole0C068453
          - Arn
      Runtime: nodejs12.x
      Description: Smart Product Solution command status microservice
      Environment:
        Variables:
          LOGGING_LEVEL: "2"
          COMMANDS_TBL:
            Ref: SmartProductCommandTableAA40DC37
      FunctionName: SmartProductAPI-CommandStatusService
      MemorySize: 256
      Timeout: 60
    DependsOn:
      - SmartProductApiCommandServiceRole0C068453
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/CommandStatusService/Resource
  SmartProductApiApiLambdaExecRoleD355757C:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/ApiLambdaExecRole/Resource
  SmartProductApismartproductapiEDB85C10:
    Type: AWS::ApiGateway::RestApi
    Properties:
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: SmartProductAPI
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/smart-product-api/Resource
  SmartProductApismartproductapiCloudWatchRole90E98525:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/smart-product-api/CloudWatchRole/Resource
  SmartProductApismartproductapiAccountC09C279F:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn:
        Fn::GetAtt:
          - SmartProductApismartproductapiCloudWatchRole90E98525
          - Arn
    DependsOn:
      - SmartProductApismartproductapiEDB85C10
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/smart-product-api/Account
  SmartProductApismartproductapiadminB2C3BEAE:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
          - SmartProductApismartproductapiEDB85C10
          - RootResourceId
      PathPart: admin
      RestApiId:
        Ref: SmartProductApismartproductapiEDB85C10
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/smart-product-api/Default/admin/Resource
  SmartProductApismartproductapiadminsettings90E63FBE:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: SmartProductApismartproductapiadminB2C3BEAE
      PathPart: settings
      RestApiId:
        Ref: SmartProductApismartproductapiEDB85C10
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/smart-product-api/Default/admin/settings/Resource
  SmartProductApismartproductapiadminsettingsconfig006A6925:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: SmartProductApismartproductapiadminsettings90E63FBE
      PathPart: config
      RestApiId:
        Ref: SmartProductApismartproductapiEDB85C10
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/smart-product-api/Default/admin/settings/config/Resource
  SmartProductApismartproductapiadminsettingsconfigsettingId9DD05B16:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: SmartProductApismartproductapiadminsettingsconfig006A6925
      PathPart: "{settingId}"
      RestApiId:
        Ref: SmartProductApismartproductapiEDB85C10
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/smart-product-api/Default/admin/settings/config/{settingId}/Resource
  SmartProductApismartproductapiadminsettingsconfigsettingIdOPTIONS3183230F:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: SmartProductApismartproductapiadminsettingsconfigsettingId9DD05B16
      RestApiId:
        Ref: SmartProductApismartproductapiEDB85C10
      AuthorizationType: NONE
      Integration:
        Credentials:
          Fn::GetAtt:
            - SmartProductApiApiLambdaExecRoleD355757C
            - Arn
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
            StatusCode: "200"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/smart-product-api/Default/admin/settings/config/{settingId}/OPTIONS/Resource
  SmartProductApismartproductapiregistration79EA2FD6:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
          - SmartProductApismartproductapiEDB85C10
          - RootResourceId
      PathPart: registration
      RestApiId:
        Ref: SmartProductApismartproductapiEDB85C10
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/smart-product-api/Default/registration/Resource
  SmartProductApismartproductapiregistrationOPTIONS31C9FD80:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: SmartProductApismartproductapiregistration79EA2FD6
      RestApiId:
        Ref: SmartProductApismartproductapiEDB85C10
      AuthorizationType: NONE
      Integration:
        Credentials:
          Fn::GetAtt:
            - SmartProductApiApiLambdaExecRoleD355757C
            - Arn
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
            StatusCode: "200"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/smart-product-api/Default/registration/OPTIONS/Resource
  SmartProductApismartproductapidevicesABE4D41D:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
          - SmartProductApismartproductapiEDB85C10
          - RootResourceId
      PathPart: devices
      RestApiId:
        Ref: SmartProductApismartproductapiEDB85C10
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/smart-product-api/Default/devices/Resource
  SmartProductApismartproductapideviceseventsA7610363:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: SmartProductApismartproductapidevicesABE4D41D
      PathPart: events
      RestApiId:
        Ref: SmartProductApismartproductapiEDB85C10
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/smart-product-api/Default/devices/events/Resource
  SmartProductApismartproductapideviceseventsOPTIONS6479067C:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: SmartProductApismartproductapideviceseventsA7610363
      RestApiId:
        Ref: SmartProductApismartproductapiEDB85C10
      AuthorizationType: NONE
      Integration:
        Credentials:
          Fn::GetAtt:
            - SmartProductApiApiLambdaExecRoleD355757C
            - Arn
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
            StatusCode: "200"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/smart-product-api/Default/devices/events/OPTIONS/Resource
  SmartProductApismartproductapidevicesalerts07305F81:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: SmartProductApismartproductapidevicesABE4D41D
      PathPart: alerts
      RestApiId:
        Ref: SmartProductApismartproductapiEDB85C10
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/smart-product-api/Default/devices/alerts/Resource
  SmartProductApismartproductapidevicesalertscountCFFB56BD:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: SmartProductApismartproductapidevicesalerts07305F81
      PathPart: count
      RestApiId:
        Ref: SmartProductApismartproductapiEDB85C10
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/smart-product-api/Default/devices/alerts/count/Resource
  SmartProductApismartproductapidevicesalertscountOPTIONSAB515C20:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: SmartProductApismartproductapidevicesalertscountCFFB56BD
      RestApiId:
        Ref: SmartProductApismartproductapiEDB85C10
      AuthorizationType: NONE
      Integration:
        Credentials:
          Fn::GetAtt:
            - SmartProductApiApiLambdaExecRoleD355757C
            - Arn
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
            StatusCode: "200"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/smart-product-api/Default/devices/alerts/count/OPTIONS/Resource
  SmartProductApismartproductapidevicesalertsOPTIONS78393BE9:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: SmartProductApismartproductapidevicesalerts07305F81
      RestApiId:
        Ref: SmartProductApismartproductapiEDB85C10
      AuthorizationType: NONE
      Integration:
        Credentials:
          Fn::GetAtt:
            - SmartProductApiApiLambdaExecRoleD355757C
            - Arn
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
            StatusCode: "200"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/smart-product-api/Default/devices/alerts/OPTIONS/Resource
  SmartProductApismartproductapidevicesdeviceIdAEE6DF55:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: SmartProductApismartproductapidevicesABE4D41D
      PathPart: "{deviceId}"
      RestApiId:
        Ref: SmartProductApismartproductapiEDB85C10
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/smart-product-api/Default/devices/{deviceId}/Resource
  SmartProductApismartproductapidevicesdeviceIdcommandsB58AC29B:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: SmartProductApismartproductapidevicesdeviceIdAEE6DF55
      PathPart: commands
      RestApiId:
        Ref: SmartProductApismartproductapiEDB85C10
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/smart-product-api/Default/devices/{deviceId}/commands/Resource
  SmartProductApismartproductapidevicesdeviceIdcommandscommandId27541EDE:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: SmartProductApismartproductapidevicesdeviceIdcommandsB58AC29B
      PathPart: "{commandId}"
      RestApiId:
        Ref: SmartProductApismartproductapiEDB85C10
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/smart-product-api/Default/devices/{deviceId}/commands/{commandId}/Resource
  SmartProductApismartproductapidevicesdeviceIdcommandscommandIdOPTIONS11C83690:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: SmartProductApismartproductapidevicesdeviceIdcommandscommandId27541EDE
      RestApiId:
        Ref: SmartProductApismartproductapiEDB85C10
      AuthorizationType: NONE
      Integration:
        Credentials:
          Fn::GetAtt:
            - SmartProductApiApiLambdaExecRoleD355757C
            - Arn
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
            StatusCode: "200"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/smart-product-api/Default/devices/{deviceId}/commands/{commandId}/OPTIONS/Resource
  SmartProductApismartproductapidevicesdeviceIdcommandsOPTIONS5B23AA9A:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: SmartProductApismartproductapidevicesdeviceIdcommandsB58AC29B
      RestApiId:
        Ref: SmartProductApismartproductapiEDB85C10
      AuthorizationType: NONE
      Integration:
        Credentials:
          Fn::GetAtt:
            - SmartProductApiApiLambdaExecRoleD355757C
            - Arn
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
            StatusCode: "200"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/smart-product-api/Default/devices/{deviceId}/commands/OPTIONS/Resource
  SmartProductApismartproductapidevicesdeviceIdeventsA35C6A82:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: SmartProductApismartproductapidevicesdeviceIdAEE6DF55
      PathPart: events
      RestApiId:
        Ref: SmartProductApismartproductapiEDB85C10
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/smart-product-api/Default/devices/{deviceId}/events/Resource
  SmartProductApismartproductapidevicesdeviceIdeventseventIdF705C917:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: SmartProductApismartproductapidevicesdeviceIdeventsA35C6A82
      PathPart: "{eventId}"
      RestApiId:
        Ref: SmartProductApismartproductapiEDB85C10
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/smart-product-api/Default/devices/{deviceId}/events/{eventId}/Resource
  SmartProductApismartproductapidevicesdeviceIdeventseventIdOPTIONS43A831DA:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: SmartProductApismartproductapidevicesdeviceIdeventseventIdF705C917
      RestApiId:
        Ref: SmartProductApismartproductapiEDB85C10
      AuthorizationType: NONE
      Integration:
        Credentials:
          Fn::GetAtt:
            - SmartProductApiApiLambdaExecRoleD355757C
            - Arn
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
            StatusCode: "200"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/smart-product-api/Default/devices/{deviceId}/events/{eventId}/OPTIONS/Resource
  SmartProductApismartproductapidevicesdeviceIdeventsOPTIONSC9F0B5F0:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: SmartProductApismartproductapidevicesdeviceIdeventsA35C6A82
      RestApiId:
        Ref: SmartProductApismartproductapiEDB85C10
      AuthorizationType: NONE
      Integration:
        Credentials:
          Fn::GetAtt:
            - SmartProductApiApiLambdaExecRoleD355757C
            - Arn
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
            StatusCode: "200"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/smart-product-api/Default/devices/{deviceId}/events/OPTIONS/Resource
  SmartProductApismartproductapidevicesdeviceIdstatusF643590E:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: SmartProductApismartproductapidevicesdeviceIdAEE6DF55
      PathPart: status
      RestApiId:
        Ref: SmartProductApismartproductapiEDB85C10
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/smart-product-api/Default/devices/{deviceId}/status/Resource
  SmartProductApismartproductapidevicesdeviceIdstatusOPTIONS1763B016:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: SmartProductApismartproductapidevicesdeviceIdstatusF643590E
      RestApiId:
        Ref: SmartProductApismartproductapiEDB85C10
      AuthorizationType: NONE
      Integration:
        Credentials:
          Fn::GetAtt:
            - SmartProductApiApiLambdaExecRoleD355757C
            - Arn
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
            StatusCode: "200"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/smart-product-api/Default/devices/{deviceId}/status/OPTIONS/Resource
  SmartProductApismartproductapidevicesdeviceIdOPTIONS9526764E:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: SmartProductApismartproductapidevicesdeviceIdAEE6DF55
      RestApiId:
        Ref: SmartProductApismartproductapiEDB85C10
      AuthorizationType: NONE
      Integration:
        Credentials:
          Fn::GetAtt:
            - SmartProductApiApiLambdaExecRoleD355757C
            - Arn
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
            StatusCode: "200"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/smart-product-api/Default/devices/{deviceId}/OPTIONS/Resource
  SmartProductApismartproductapidevicesOPTIONS21960C4F:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: SmartProductApismartproductapidevicesABE4D41D
      RestApiId:
        Ref: SmartProductApismartproductapiEDB85C10
      AuthorizationType: NONE
      Integration:
        Credentials:
          Fn::GetAtt:
            - SmartProductApiApiLambdaExecRoleD355757C
            - Arn
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
            StatusCode: "200"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/smart-product-api/Default/devices/OPTIONS/Resource
  SmartProductApiDeploymentFA23A027:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:
        Ref: SmartProductApismartproductapiEDB85C10
      Description: Production
    DependsOn:
      - SmartProductApismartproductapiadminB2C3BEAE
      - SmartProductApismartproductapiadminsettingsconfigsettingIdOPTIONS3183230F
      - SmartProductApismartproductapiadminsettingsconfigsettingId9DD05B16
      - SmartProductApismartproductapidevicesdeviceIdcommandscommandIdOPTIONS11C83690
      - SmartProductApismartproductapidevicesdeviceIdcommandscommandId27541EDE
      - SmartProductApismartproductapidevicesdeviceIdcommandsOPTIONS5B23AA9A
      - SmartProductApismartproductapidevicesdeviceIdcommandsB58AC29B
      - SmartProductApismartproductapidevicesdeviceIdeventseventIdOPTIONS43A831DA
      - SmartProductApismartproductapidevicesdeviceIdeventseventIdF705C917
      - SmartProductApismartproductapidevicesdeviceIdeventsOPTIONSC9F0B5F0
      - SmartProductApismartproductapidevicesdeviceIdeventsA35C6A82
      - SmartProductApismartproductapidevicesdeviceIdOPTIONS9526764E
      - SmartProductApismartproductapidevicesdeviceIdAEE6DF55
      - SmartProductApismartproductapidevicesdeviceIdstatusOPTIONS1763B016
      - SmartProductApismartproductapidevicesdeviceIdstatusF643590E
      - SmartProductApismartproductapidevicesalertscountOPTIONSAB515C20
      - SmartProductApismartproductapidevicesalertscountCFFB56BD
      - SmartProductApismartproductapidevicesalertsOPTIONS78393BE9
      - SmartProductApismartproductapidevicesalerts07305F81
      - SmartProductApismartproductapideviceseventsOPTIONS6479067C
      - SmartProductApismartproductapideviceseventsA7610363
      - SmartProductApismartproductapidevicesOPTIONS21960C4F
      - SmartProductApismartproductapidevicesABE4D41D
      - SmartProductApismartproductapiregistrationOPTIONS31C9FD80
      - SmartProductApismartproductapiregistration79EA2FD6
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W45
            reason: The access logging is enabled at API Gateway stage.
  SmartProductApiStage47732F94:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId:
        Ref: SmartProductApismartproductapiEDB85C10
      AccessLogSetting:
        DestinationArn:
          Fn::Join:
            - ""
            - - "arn:aws-cn:logs:"
              - Ref: AWS::Region
              - ":"
              - Ref: AWS::AccountId
              - :log-group:API-Gateway-Execution-Logs_
              - Ref: SmartProductApismartproductapiEDB85C10
              - /prod
        Format: '{ "requestId": "$context.requestId",        "ip": "$context.identity.sourceIp",        "caller": "$context.identity.caller",        "user": "$context.identity.user",        "userAgent": "$context.identity.userAgent",        "requestTime": "$context.requestTime",        "httpMethod": "$context.httpMethod",        "resourcePath": "$context.resourcePath",        "status": "$context.status",        "protocol": "$context.protocol",        "responseLength": "$context.responseLength"      }'
      DeploymentId:
        Ref: SmartProductApiDeploymentFA23A027
      Description: Smart Product Stage
      StageName: prod
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/Stage/Resource
  SmartProductApiCommandStatusRuleD3EE526C:
    Type: AWS::IoT::TopicRule
    Properties:
      TopicRulePayload:
        Actions:
          - Lambda:
              FunctionArn:
                Fn::GetAtt:
                  - SmartProductApiCommandStatusService087A0540
                  - Arn
        Description: Command status for Smart Product Solution.
        RuleDisabled: false
        Sql: select * from 'smartproduct/commands/#'
      RuleName: SmartProductCommandStatusRule
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/CommandStatusRule
  SmartProductApiapiLambdaExecPolicy053AC70D:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: lambda:InvokeFunction
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - SmartProductApiAdminServiceB24A2D8F
                  - Arn
              - Fn::GetAtt:
                  - SmartProductApiRegistrationService02A587E3
                  - Arn
              - Fn::GetAtt:
                  - SmartProductApiCommandServiceC57E3CB1
                  - Arn
              - Fn::GetAtt:
                  - SmartProductApiStatusService01ABED9D
                  - Arn
              - Fn::GetAtt:
                  - SmartProductApiEventService4EB5B483
                  - Arn
              - Fn::GetAtt:
                  - SmartProductApiDeviceService94BBECC9
                  - Arn
        Version: "2012-10-17"
      PolicyName: SmartProductApiapiLambdaExecPolicy053AC70D
      Roles:
        - Ref: SmartProductApiApiLambdaExecRoleD355757C
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/apiLambdaExecPolicy/Resource
  SmartProductApiLambdaInvokeCommandStatusPermission31C1402A:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - SmartProductApiCommandStatusService087A0540
          - Arn
      Principal: iot.amazonaws.com
      SourceAccount:
        Ref: AWS::AccountId
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:aws-cn:iot:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - :rule/SmartProductCommandStatusRule
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductApi/LambdaInvokeCommandStatusPermission
  SmartProductApiregistrationPolicy57725702:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws-cn:logs:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :log-group:/aws/lambda/
                  - Ref: SmartProductApiRegistrationService02A587E3
                  - :*
          - Action:
              - dynamodb:DeleteItem
              - dynamodb:PutItem
              - dynamodb:Query
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - SmartProductRegistrationTableF43C70F1
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - SmartProductRegistrationTableF43C70F1
                        - Arn
                    - /index/userId-deviceName-index
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - SmartProductRegistrationTableF43C70F1
                        - Arn
                    - /index/deviceId-index
          - Action: dynamodb:GetItem
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - SmartProductReferenceTableD6286FA8
                - Arn
          - Action: iot:CreateThing
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws-cn:iot:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :thing/*
        Version: "2012-10-17"
      PolicyName: SmartProductApiregistrationPolicy57725702
      Roles:
        - Ref: SmartProductApiRegistrationServiceRole57349EA2
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason:
              Fn::Join:
                - ""
                - - "The * resource allows "
                  - Ref: SmartProductApiRegistrationServiceRole57349EA2
                  - " to access its own logs and create things."
  SmartProductApiAdminPolicyD5A528D7:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws-cn:logs:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :log-group:/aws/lambda/
                  - Ref: SmartProductApiAdminServiceB24A2D8F
                  - :*
          - Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - SmartProductSettingsTableF8EB85E2
                - Arn
        Version: "2012-10-17"
      PolicyName: SmartProductApiAdminPolicyD5A528D7
      Roles:
        - Ref: SmartProductApiAdminServiceRoleC0422DFB
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason:
              Fn::Join:
                - ""
                - - "The * resource allows "
                  - Ref: SmartProductApiAdminServiceRoleC0422DFB
                  - " to access its own logs."
  SmartProductApiEventPolicy87B63F28:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws-cn:logs:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :log-group:/aws/lambda/
                  - Ref: SmartProductApiEventService4EB5B483
                  - :*
          - Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:Query
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - SmartProductEventsTableB072870B
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - SmartProductEventsTableB072870B
                        - Arn
                    - /index/userId-timestamp-index
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - SmartProductEventsTableB072870B
                        - Arn
                    - /index/deviceId-timestamp-index
          - Action: dynamodb:GetItem
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - SmartProductSettingsTableF8EB85E2
                - Arn
          - Action:
              - dynamodb:Query
              - dynamodb:GetItem
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - SmartProductRegistrationTableF43C70F1
                - Arn
        Version: "2012-10-17"
      PolicyName: SmartProductApiEventPolicy87B63F28
      Roles:
        - Ref: SmartProductApiEventServiceRoleF5F91897
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason:
              Fn::Join:
                - ""
                - - "The * resource allows "
                  - Ref: SmartProductApiEventServiceRoleF5F91897
                  - " to access its own logs."
  SmartProductApiCommandPolicyC1BD8116:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ""
                  - - "arn:aws-cn:logs:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - :log-group:/aws/lambda/
                    - Ref: SmartProductApiCommandServiceC57E3CB1
                    - :*
              - Fn::Join:
                  - ""
                  - - "arn:aws-cn:logs:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - :log-group:/aws/lambda/
                    - Ref: SmartProductApiCommandStatusService087A0540
                    - :*
          - Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:UpdateItem
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - SmartProductCommandTableAA40DC37
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - SmartProductCommandTableAA40DC37
                        - Arn
                    - /index/deviceId-updatedAt-index
          - Action: dynamodb:GetItem
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - SmartProductRegistrationTableF43C70F1
                - Arn
          - Action:
              - iot:DescribeEndpoint
              - iot:GetThingShadow
              - iot:UpdateThingShadow
              - iot:Publish
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: SmartProductApiCommandPolicyC1BD8116
      Roles:
        - Ref: SmartProductApiCommandServiceRole0C068453
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason:
              Fn::Join:
                - ""
                - - "The * resource allows "
                  - Ref: SmartProductApiCommandServiceRole0C068453
                  - " to access its own logs and exchange information with IoT devices."
  SmartProductApiStatusPolicy70F2744D:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws-cn:logs:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :log-group:/aws/lambda/
                  - Ref: SmartProductApiStatusService01ABED9D
                  - :*
          - Action: dynamodb:GetItem
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - SmartProductRegistrationTableF43C70F1
                - Arn
          - Action:
              - iot:DescribeEndpoint
              - iot:GetThingShadow
              - iot:SearchIndex
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: SmartProductApiStatusPolicy70F2744D
      Roles:
        - Ref: SmartProductApiStatusServiceRole881763B1
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason:
              Fn::Join:
                - ""
                - - "The * resource allows "
                  - Ref: SmartProductApiStatusServiceRole881763B1
                  - " to access its own logs and exchange information with IoT devices."
  SmartProductApiDevicePolicyEA0864D8:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws-cn:logs:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :log-group:/aws/lambda/
                  - Ref: SmartProductApiDeviceService94BBECC9
                  - :*
          - Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - SmartProductRegistrationTableF43C70F1
                - Arn
          - Action:
              - iot:SearchIndex
              - iot:DescribeIndex
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws-cn:iot:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :index/AWS_Things
          - Action:
              - iot:DeleteThing
              - iot:DescribeThing
              - iot:ListThingPrincipals
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws-cn:iot:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :thing/*
          - Action: iot:DeletePolicy
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws-cn:iot:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :policy/*
          - Action:
              - iot:DetachThingPrincipal
              - iot:DeleteCertificate
              - iot:UpdateCertificate
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws-cn:iot:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :cert/*
        Version: "2012-10-17"
      PolicyName: SmartProductApiDevicePolicyEA0864D8
      Roles:
        - Ref: SmartProductApiDeviceServiceRole24229FD1
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason:
              Fn::Join:
                - ""
                - - "The * resource allows "
                  - Ref: SmartProductApiDeviceServiceRole24229FD1
                  - " to access its own logs and exchange information with IoT devices."
  SmartProductEventTopic0626C21F:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: SmartProductNotificationSNS
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductEvent/Topic/Resource
  SmartProductEventNotificationRole17E3D765:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductEvent/NotificationRole/Resource
  SmartProductEventNotificationServiceF64B2362:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Key: smart-product-solution/v0.0.1/smart-product-notification-service.zip
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - SmartProductEventNotificationRole17E3D765
          - Arn
      Runtime: nodejs12.x
      Description: Smart Product Solution SNS and MQTT notification microservice
      Environment:
        Variables:
          SETTINGS_TBL:
            Ref: SmartProductSettingsTableF8EB85E2
          REGISTRATION_TBL:
            Ref: SmartProductRegistrationTableF43C70F1
          LOGGING_LEVEL: "2"
          SNS_TOPIC:
            Fn::GetAtt:
              - SmartProductEventTopic0626C21F
              - TopicName
      FunctionName: SmartProductEvent-NotificationService-afc51284e472
      MemorySize: 256
      Timeout: 300
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductEvent/NotificationService
  SmartProductEventEventProxyRoleE7A063AD:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductEvent/EventProxyRole/Resource
  SmartProductEventEventProxyF3590DD6:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Key: smart-product-solution/v0.0.1/smart-product-event-proxy.zip
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - SmartProductEventEventProxyRoleE7A063AD
          - Arn
      Runtime: nodejs12.x
      Description: Smart Product Solution event proxy microservice
      Environment:
        Variables:
          EVENTS_TBL:
            Ref: SmartProductEventsTableB072870B
          REGISTRATION_TBL:
            Ref: SmartProductRegistrationTableF43C70F1
          LOGGING_LEVEL: "2"
          NOTIFICATION_LAMBDA: SmartProductEvent-NotificationService-afc51284e472
      FunctionName: SmartProductEvent-EventProxyService-7cc54b70f760
      MemorySize: 256
      Timeout: 60
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductEvent/EventProxy
  SmartProductEventEventRule79F5C718:
    Type: AWS::IoT::TopicRule
    Properties:
      TopicRulePayload:
        Actions:
          - Lambda:
              FunctionArn:
                Fn::GetAtt:
                  - SmartProductEventEventProxyF3590DD6
                  - Arn
        Description: Processing of event messages from smart products.
        RuleDisabled: false
        Sql: select * from 'smartproduct/event/#'
      RuleName: SmartProductEventRule
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductEvent/EventRule
  SmartProductEventNotificationLogPolicyFF309318:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws-cn:logs:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :log-group:/aws/lambda/SmartProductEvent-NotificationService-afc51284e472:*
        Version: "2012-10-17"
      PolicyName: SmartProductEventNotificationLogPolicyFF309318
      Roles:
        - Ref: SmartProductEventNotificationRole17E3D765
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason:
              Fn::Join:
                - ""
                - - "The * resource allows "
                  - Ref: SmartProductEventNotificationRole17E3D765
                  - " to access its own logs."
  SmartProductEventNotificationDynamoPolicyE37A7975:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: dynamodb:GetItem
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - SmartProductSettingsTableF8EB85E2
                - Arn
          - Action: dynamodb:Query
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - SmartProductRegistrationTableF43C70F1
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - SmartProductRegistrationTableF43C70F1
                        - Arn
                    - /index/deviceId-index
        Version: "2012-10-17"
      PolicyName: SmartProductEventNotificationDynamoPolicyE37A7975
      Roles:
        - Ref: SmartProductEventNotificationRole17E3D765
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductEvent/NotificationDynamoPolicy/Resource
  SmartProductEventNotificationSnsPolicyD2A54AA7:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: sns:Publish
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: SmartProductEventNotificationSnsPolicyD2A54AA7
      Roles:
        - Ref: SmartProductEventNotificationRole17E3D765
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason:
              Fn::Join:
                - ""
                - - "The * resource allows "
                  - Ref: SmartProductEventNotificationRole17E3D765
                  - " to publish notifications to users."
  SmartProductEventEventProxyLogPolicyF481B546:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws-cn:logs:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :log-group:/aws/lambda/SmartProductEvent-EventProxyService-7cc54b70f760:*
        Version: "2012-10-17"
      PolicyName: SmartProductEventEventProxyLogPolicyF481B546
      Roles:
        - Ref: SmartProductEventEventProxyRoleE7A063AD
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason:
              Fn::Join:
                - ""
                - - "The * resource allows "
                  - Ref: SmartProductEventEventProxyRoleE7A063AD
                  - " to access its own logs."
  SmartProductEventEventProxyDynamoPolicyBEFD45F0:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: dynamodb:Query
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - SmartProductRegistrationTableF43C70F1
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - SmartProductRegistrationTableF43C70F1
                        - Arn
                    - /index/deviceId-index
          - Action: dynamodb:PutItem
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - SmartProductEventsTableB072870B
                - Arn
        Version: "2012-10-17"
      PolicyName: SmartProductEventEventProxyDynamoPolicyBEFD45F0
      Roles:
        - Ref: SmartProductEventEventProxyRoleE7A063AD
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductEvent/EventProxyDynamoPolicy/Resource
  SmartProductEventEventProxyLambdaPolicyDE74976B:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: lambda:InvokeFunction
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - SmartProductEventNotificationServiceF64B2362
                - Arn
        Version: "2012-10-17"
      PolicyName: SmartProductEventEventProxyLambdaPolicyDE74976B
      Roles:
        - Ref: SmartProductEventEventProxyRoleE7A063AD
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductEvent/EventProxyLambdaPolicy/Resource
  SmartProductEventLambdaInvokeEventProxyPermission4F025128:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - SmartProductEventEventProxyF3590DD6
          - Arn
      Principal: iot.amazonaws.com
      SourceAccount:
        Ref: AWS::AccountId
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:aws-cn:iot:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - :rule/SmartProductEventRule
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductEvent/LambdaInvokeEventProxyPermission
  SmartProductJITRServiceRole64C658D4:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductJITR/ServiceRole/Resource
  SmartProductJITRService0FA01013:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Key: smart-product-solution/v0.0.1/smart-product-jitr-service.zip
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - SmartProductJITRServiceRole64C658D4
          - Arn
      Runtime: nodejs12.x
      Description: Smart Product Solution Just-In-Time-Registration microservice
      Environment:
        Variables:
          TELEMETRY_TOPIC: smartproduct/telemetry
          EVENT_TOPIC: smartproduct/event
          REGISTRATION_TBL:
            Ref: SmartProductRegistrationTableF43C70F1
          LOGGING_LEVEL: "2"
          solutionId: SO0046
          solutionUuid:
            Fn::GetAtt:
              - SmartProductAppUuid
              - UUID
          anonymousData: "true"
      FunctionName: SmartProductJITR-Service-c034141f3a23
      MemorySize: 256
      Timeout: 60
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductJITR/Service
  SmartProductJITRRuleA01FB3D9:
    Type: AWS::IoT::TopicRule
    Properties:
      TopicRulePayload:
        Actions:
          - Lambda:
              FunctionArn:
                Fn::GetAtt:
                  - SmartProductJITRService0FA01013
                  - Arn
        Description: Just in time registration (JITR) for Smart Product Solution.
        RuleDisabled: false
        Sql: SELECT * FROM '$aws/events/certificates/registered/#'
      RuleName: SmartProductJitrRule
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductJITR/Rule
  SmartProductJITRjitrLogPolicy926BAF25:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws-cn:logs:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :log-group:/aws/lambda/SmartProductJITR-Service-c034141f3a23:*
        Version: "2012-10-17"
      PolicyName: SmartProductJITRjitrLogPolicy926BAF25
      Roles:
        - Ref: SmartProductJITRServiceRole64C658D4
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason:
              Fn::Join:
                - ""
                - - "The * resource allows "
                  - Ref: SmartProductJITRServiceRole64C658D4
                  - " to access its own logs."
  SmartProductJITRnotificationDynamoPolicyF733F8D0:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - dynamodb:Query
              - dynamodb:UpdateItem
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - SmartProductRegistrationTableF43C70F1
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - SmartProductRegistrationTableF43C70F1
                        - Arn
                    - /index/deviceId-index
        Version: "2012-10-17"
      PolicyName: SmartProductJITRnotificationDynamoPolicyF733F8D0
      Roles:
        - Ref: SmartProductJITRServiceRole64C658D4
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductJITR/notificationDynamoPolicy/Resource
  SmartProductJITRjitrIotPolicyD2A1EEC8:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - iot:UpdateCertificate
              - iot:CreatePolicy
              - iot:AttachPrincipalPolicy
              - iot:DescribeCertificate
              - iot:AttachThingPrincipal
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: SmartProductJITRjitrIotPolicyD2A1EEC8
      Roles:
        - Ref: SmartProductJITRServiceRole64C658D4
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason:
              Fn::Join:
                - ""
                - - "The * resource allows "
                  - Ref: SmartProductJITRServiceRole64C658D4
                  - " to exchange information with solution resources."
  SmartProductJITRLambdaInvokeJitrPermission846B5DDA:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: SmartProductJITR-Service-c034141f3a23
      Principal: iot.amazonaws.com
      SourceAccount:
        Ref: AWS::AccountId
      SourceArn:
        Fn::GetAtt:
          - SmartProductJITRRuleA01FB3D9
          - Arn
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductJITR/LambdaInvokeJitrPermission
  SmartProductOwnerWebAppWebsiteBucketFD64D2DA:
    Type: AWS::S3::Bucket
    Properties:
      WebsiteConfiguration:
        ErrorDocument: index.html
        IndexDocument: index.html
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: SmartProductWebsiteBucket validated and does not require access logging to be configured.
          - id: W41
            reason: SmartProductWebsiteBucket does not contain sensitive data so encryption is not needed.
  SmartProductOwnerWebAppHelperS3Policy0AFA4848:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: s3:PutObject
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - Fn::GetAtt:
                      - SmartProductOwnerWebAppWebsiteBucketFD64D2DA
                      - Arn
                  - /*
          - Action: s3:GetObject
            Effect: Allow
            Resource: arn:aws-cn:s3:::undefined/*
        Version: "2012-10-17"
      PolicyName: SmartProductOwnerWebAppHelperS3Policy0AFA4848
      Roles:
        - Ref: SmartProductHelperRoleE097088F
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason:
              Fn::Join:
                - ""
                - - "The * resource allows "
                  - Ref: SmartProductHelperRoleE097088F
                  - " to get and put objects to S3."
  SmartProductOwnerWebAppCopyS3Assets27AEC5DE:
    Type: Custom::CopyS3Assets
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - SingletonLambdahelperFunction069AB33D
          - Arn
      Region:
        Ref: AWS::Region
      ManifestKey: smart-product-solution/v0.0.1/site-manifest.json
      SourceS3Bucket: undefined
      SourceS3key: smart-product-solution/v0.0.1/console
      DestS3Bucket:
        Ref: SmartProductOwnerWebAppWebsiteBucketFD64D2DA
    DependsOn:
      - SmartProductOwnerWebAppHelperS3Policy0AFA4848
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductOwnerWebApp/CopyS3Assets/Default
  SmartProductOwnerWebAppUploadWebConfigF88C3038:
    Type: Custom::PutConfigFile
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - SingletonLambdahelperFunction069AB33D
          - Arn
      Region:
        Ref: AWS::Region
      CustomAction: putConfigFile
      DestS3Bucket:
        Ref: SmartProductOwnerWebAppWebsiteBucketFD64D2DA
      DestS3key: assets/smart_product_config.js
      ConfigItem:
        endpoint:
          Fn::Join:
            - ""
            - - https://
              - Ref: SmartProductApismartproductapiEDB85C10
              - .execute-api.
              - Ref: AWS::Region
              - "."
              - Ref: AWS::URLSuffix
              - /
              - Ref: SmartProductApiStage47732F94
              - /
        region:
          Ref: AWS::Region
    DependsOn:
      - SmartProductOwnerWebAppCopyS3Assets27AEC5DE
      - SmartProductOwnerWebAppHelperS3Policy0AFA4848
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductOwnerWebApp/UploadWebConfig/Default
  SmartProductOwnerWebAppConsoleDistributionCFDistribution6E4D4DE8:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: Website distribution for smart product console
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          DefaultTTL: 0
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: false
          MaxTTL: 0
          MinTTL: 0
          TargetOriginId: origin1
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: false
        Origins:
          - DomainName:
              Fn::GetAtt:
                - SmartProductOwnerWebAppWebsiteBucketFD64D2DA
                - RegionalDomainName
            Id: origin1
            S3OriginConfig: {}
        PriceClass: PriceClass_All
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W10
            reason: ConsoleDistribution validated and does not require access logging to be configured.
  SmartProductTelemetrySmartProductTelemetryRole023257BB:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: iot.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductTelemetry/SmartProductTelemetryRole/Resource
  SmartProductTelemetryLambdaRoleDC1CAE86:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductTelemetry/LambdaRole/Resource
  SmartProductTelemetryService6557BB99:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Key: smart-product-solution/v0.0.1/smart-product-telemetry-service.zip
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - SmartProductTelemetryLambdaRoleDC1CAE86
          - Arn
      Runtime: nodejs10.x
      Description: Smart Product Solution telemetry microservice
      FunctionName: SmartProductTelemetry-service-ef9a7e3735aa
      MemorySize: 256
      Timeout: 60
    Metadata:
      aws:cdk:path: SmartProductSolutionStack/SmartProductTelemetry/Service
  SmartProductTelemetryserviceLogPolicyD9844A0D:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws-cn:logs:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :log-group:/aws/lambda/SmartProductTelemetry-service-ef9a7e3735aa:*
        Version: "2012-10-17"
      PolicyName: SmartProductTelemetryserviceLogPolicyD9844A0D
      Roles:
        - Ref: SmartProductTelemetryLambdaRoleDC1CAE86
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason:
              Fn::Join:
                - ""
                - - "The * resource allows "
                  - Ref: SmartProductTelemetryLambdaRoleDC1CAE86
                  - " to access its own logs."
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Modules: aws-cdk=2.113.0,@aws-cdk/assets=1.18.0,@aws-cdk/aws-apigateway=1.18.0,@aws-cdk/aws-applicationautoscaling=1.18.0,@aws-cdk/aws-autoscaling-common=1.18.0,@aws-cdk/aws-certificatemanager=1.18.0,@aws-cdk/aws-cloudformation=1.18.0,@aws-cdk/aws-cloudfront=1.18.0,@aws-cdk/aws-cloudwatch=1.18.0,@aws-cdk/aws-dynamodb=1.18.0,@aws-cdk/aws-ec2=1.18.0,@aws-cdk/aws-events=1.18.0,@aws-cdk/aws-iam=1.18.0,@aws-cdk/aws-iot=1.18.0,@aws-cdk/aws-kms=1.18.0,@aws-cdk/aws-lambda=1.18.0,@aws-cdk/aws-s3=1.18.0,@aws-cdk/aws-s3-assets=1.18.0,@aws-cdk/aws-sns=1.18.0,@aws-cdk/aws-sqs=1.18.0,@aws-cdk/aws-ssm=1.18.0,@aws-cdk/core=1.18.0,@aws-cdk/cx-api=1.18.0,@aws-cdk/region-info=1.18.0,jsii-runtime=node.js/v18.12.1
    Condition: CDKMetadataAvailable
Outputs:
  SmartProductApiAPIEndpointDD9BFA92:
    Description: Smart Product API Endpoint
    Value:
      Fn::Join:
        - ""
        - - https://
          - Ref: SmartProductApismartproductapiEDB85C10
          - .execute-api.
          - Ref: AWS::Region
          - "."
          - Ref: AWS::URLSuffix
          - /
          - Ref: SmartProductApiStage47732F94
          - /
  SmartProductOwnerWebAppOwnerWebAppConsoleA5962803:
    Description: Smart Product Owner Web App Console URL
    Value:
      Fn::Join:
        - ""
        - - https://
          - Fn::GetAtt:
              - SmartProductOwnerWebAppConsoleDistributionCFDistribution6E4D4DE8
              - DomainName
  SmartProductOwnerWebAppBucketName5C30E714:
    Description: Smart Product Web Site Bucket
    Value:
      Ref: SmartProductOwnerWebAppWebsiteBucketFD64D2DA
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - il-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - me-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2

