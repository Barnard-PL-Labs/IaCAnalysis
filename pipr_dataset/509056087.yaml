Resources:
  MyVPCAFB07A31:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: WebAppStack/MyVPC
    Metadata:
      aws:cdk:path: WebAppStack/MyVPC/Resource
      cdk_nag:
        rules_to_suppress:
          - id: AwsSolutions-VPC7
            reason: For brevity, this non-production example stack shall not configure a VPC flow log.
  MyVPCPublicSubnet1Subnet0C75866A:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MyVPCAFB07A31
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 10.0.0.0/18
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: WebAppStack/MyVPC/PublicSubnet1
    Metadata:
      aws:cdk:path: WebAppStack/MyVPC/PublicSubnet1/Subnet
  MyVPCPublicSubnet1RouteTable538A9511:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyVPCAFB07A31
      Tags:
        - Key: Name
          Value: WebAppStack/MyVPC/PublicSubnet1
    Metadata:
      aws:cdk:path: WebAppStack/MyVPC/PublicSubnet1/RouteTable
  MyVPCPublicSubnet1RouteTableAssociation8A950D8E:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyVPCPublicSubnet1RouteTable538A9511
      SubnetId:
        Ref: MyVPCPublicSubnet1Subnet0C75866A
    Metadata:
      aws:cdk:path: WebAppStack/MyVPC/PublicSubnet1/RouteTableAssociation
  MyVPCPublicSubnet1DefaultRouteAF81AA9B:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MyVPCPublicSubnet1RouteTable538A9511
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: MyVPCIGW30AB6DD6
    DependsOn:
      - MyVPCVPCGWE6F260E1
    Metadata:
      aws:cdk:path: WebAppStack/MyVPC/PublicSubnet1/DefaultRoute
  MyVPCPublicSubnet1EIP5EB6147D:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: WebAppStack/MyVPC/PublicSubnet1
    Metadata:
      aws:cdk:path: WebAppStack/MyVPC/PublicSubnet1/EIP
  MyVPCPublicSubnet1NATGateway838228A5:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId:
        Ref: MyVPCPublicSubnet1Subnet0C75866A
      AllocationId:
        Fn::GetAtt:
          - MyVPCPublicSubnet1EIP5EB6147D
          - AllocationId
      Tags:
        - Key: Name
          Value: WebAppStack/MyVPC/PublicSubnet1
    Metadata:
      aws:cdk:path: WebAppStack/MyVPC/PublicSubnet1/NATGateway
  MyVPCPublicSubnet2Subnet4DDFF14C:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MyVPCAFB07A31
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: 10.0.64.0/18
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: WebAppStack/MyVPC/PublicSubnet2
    Metadata:
      aws:cdk:path: WebAppStack/MyVPC/PublicSubnet2/Subnet
  MyVPCPublicSubnet2RouteTableA6A1CD3D:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyVPCAFB07A31
      Tags:
        - Key: Name
          Value: WebAppStack/MyVPC/PublicSubnet2
    Metadata:
      aws:cdk:path: WebAppStack/MyVPC/PublicSubnet2/RouteTable
  MyVPCPublicSubnet2RouteTableAssociationF22D63CA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyVPCPublicSubnet2RouteTableA6A1CD3D
      SubnetId:
        Ref: MyVPCPublicSubnet2Subnet4DDFF14C
    Metadata:
      aws:cdk:path: WebAppStack/MyVPC/PublicSubnet2/RouteTableAssociation
  MyVPCPublicSubnet2DefaultRoute24460202:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MyVPCPublicSubnet2RouteTableA6A1CD3D
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: MyVPCIGW30AB6DD6
    DependsOn:
      - MyVPCVPCGWE6F260E1
    Metadata:
      aws:cdk:path: WebAppStack/MyVPC/PublicSubnet2/DefaultRoute
  MyVPCPublicSubnet2EIP6F364C5D:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: WebAppStack/MyVPC/PublicSubnet2
    Metadata:
      aws:cdk:path: WebAppStack/MyVPC/PublicSubnet2/EIP
  MyVPCPublicSubnet2NATGateway4D6E78B8:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId:
        Ref: MyVPCPublicSubnet2Subnet4DDFF14C
      AllocationId:
        Fn::GetAtt:
          - MyVPCPublicSubnet2EIP6F364C5D
          - AllocationId
      Tags:
        - Key: Name
          Value: WebAppStack/MyVPC/PublicSubnet2
    Metadata:
      aws:cdk:path: WebAppStack/MyVPC/PublicSubnet2/NATGateway
  MyVPCPrivateSubnet1Subnet641543F4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MyVPCAFB07A31
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 10.0.128.0/18
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: WebAppStack/MyVPC/PrivateSubnet1
    Metadata:
      aws:cdk:path: WebAppStack/MyVPC/PrivateSubnet1/Subnet
  MyVPCPrivateSubnet1RouteTable133BD901:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyVPCAFB07A31
      Tags:
        - Key: Name
          Value: WebAppStack/MyVPC/PrivateSubnet1
    Metadata:
      aws:cdk:path: WebAppStack/MyVPC/PrivateSubnet1/RouteTable
  MyVPCPrivateSubnet1RouteTableAssociation85DFBFBB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyVPCPrivateSubnet1RouteTable133BD901
      SubnetId:
        Ref: MyVPCPrivateSubnet1Subnet641543F4
    Metadata:
      aws:cdk:path: WebAppStack/MyVPC/PrivateSubnet1/RouteTableAssociation
  MyVPCPrivateSubnet1DefaultRouteA8EE6636:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MyVPCPrivateSubnet1RouteTable133BD901
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: MyVPCPublicSubnet1NATGateway838228A5
    Metadata:
      aws:cdk:path: WebAppStack/MyVPC/PrivateSubnet1/DefaultRoute
  MyVPCPrivateSubnet2SubnetA420D3F0:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MyVPCAFB07A31
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: 10.0.192.0/18
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: WebAppStack/MyVPC/PrivateSubnet2
    Metadata:
      aws:cdk:path: WebAppStack/MyVPC/PrivateSubnet2/Subnet
  MyVPCPrivateSubnet2RouteTableDF3CB76C:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyVPCAFB07A31
      Tags:
        - Key: Name
          Value: WebAppStack/MyVPC/PrivateSubnet2
    Metadata:
      aws:cdk:path: WebAppStack/MyVPC/PrivateSubnet2/RouteTable
  MyVPCPrivateSubnet2RouteTableAssociationC373B6FE:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyVPCPrivateSubnet2RouteTableDF3CB76C
      SubnetId:
        Ref: MyVPCPrivateSubnet2SubnetA420D3F0
    Metadata:
      aws:cdk:path: WebAppStack/MyVPC/PrivateSubnet2/RouteTableAssociation
  MyVPCPrivateSubnet2DefaultRoute37F90B5D:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MyVPCPrivateSubnet2RouteTableDF3CB76C
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: MyVPCPublicSubnet2NATGateway4D6E78B8
    Metadata:
      aws:cdk:path: WebAppStack/MyVPC/PrivateSubnet2/DefaultRoute
  MyVPCIGW30AB6DD6:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: WebAppStack/MyVPC
    Metadata:
      aws:cdk:path: WebAppStack/MyVPC/IGW
  MyVPCVPCGWE6F260E1:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: MyVPCAFB07A31
      InternetGatewayId:
        Ref: MyVPCIGW30AB6DD6
    Metadata:
      aws:cdk:path: WebAppStack/MyVPC/VPCGW
  MyASGInstanceSecurityGroupBF55119F:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: WebAppStack/MyASG/InstanceSecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: WebAppStack/MyASG
      VpcId:
        Ref: MyVPCAFB07A31
    Metadata:
      aws:cdk:path: WebAppStack/MyASG/InstanceSecurityGroup/Resource
  MyASGInstanceSecurityGroupfromWebAppStackMyALBSecurityGroupEE1D04C2800FC78107:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort: 80
      GroupId:
        Fn::GetAtt:
          - MyASGInstanceSecurityGroupBF55119F
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - MyALBSecurityGroupF26FC01F
          - GroupId
      ToPort: 80
    Metadata:
      aws:cdk:path: WebAppStack/MyASG/InstanceSecurityGroup/from WebAppStackMyALBSecurityGroupEE1D04C2:80
  MyASGInstanceRoleE40FF11D:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - ec2.
                    - Ref: AWS::URLSuffix
        Version: "2012-10-17"
      Tags:
        - Key: Name
          Value: WebAppStack/MyASG
    Metadata:
      aws:cdk:path: WebAppStack/MyASG/InstanceRole/Resource
  MyASGInstanceProfile2A2CDB5D:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: MyASGInstanceRoleE40FF11D
    Metadata:
      aws:cdk:path: WebAppStack/MyASG/InstanceProfile
  MyASGLaunchConfig075E9F95:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        Ref: SsmParameterValueawsserviceamiamazonlinuxlatestal2022amikernel510x8664C96584B6F00A464EAD1953AFF4B05118Parameter
      InstanceType: t3.micro
      IamInstanceProfile:
        Ref: MyASGInstanceProfile2A2CDB5D
      SecurityGroups:
        - Fn::GetAtt:
            - MyASGInstanceSecurityGroupBF55119F
            - GroupId
      UserData:
        Fn::Base64: |-
          #!/bin/bash
          #!/bin/bash -xe

          # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
          # SPDX-License-Identifier: MIT-0

          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          usermod -a -G apache ec2-user
          chown -R ec2-user:apache /var/www
          chmod 2775 /var/www
          find /var/www -type d -exec chmod 2775 {} \;
          find /var/www -type f -exec chmod 0664 {} \;
          echo '<html><head><title>Hello World!</title></head><body><p>Hello World!</p></body></html>' > /var/www/html/index.html
    DependsOn:
      - MyASGInstanceRoleE40FF11D
    Metadata:
      aws:cdk:path: WebAppStack/MyASG/LaunchConfig
  MyASG63588E97:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MaxSize: "2"
      MinSize: "2"
      LaunchConfigurationName:
        Ref: MyASGLaunchConfig075E9F95
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: WebAppStack/MyASG
      TargetGroupARNs:
        - Ref: MyALBHttpListenerTargetsGroupAC6A6762
      VPCZoneIdentifier:
        - Ref: MyVPCPrivateSubnet1Subnet641543F4
        - Ref: MyVPCPrivateSubnet2SubnetA420D3F0
    UpdatePolicy:
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: true
    Metadata:
      aws:cdk:path: WebAppStack/MyASG/ASG
      cdk_nag:
        rules_to_suppress:
          - id: AwsSolutions-AS3
            reason: For brevity, this non-production example stack shall not configure scaling notifications.
  MyALB911A8556:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: "false"
      Scheme: internet-facing
      SecurityGroups:
        - Fn::GetAtt:
            - MyALBSecurityGroupF26FC01F
            - GroupId
      Subnets:
        - Ref: MyVPCPublicSubnet1Subnet0C75866A
        - Ref: MyVPCPublicSubnet2Subnet4DDFF14C
      Type: application
    DependsOn:
      - MyVPCPublicSubnet1DefaultRouteAF81AA9B
      - MyVPCPublicSubnet2DefaultRoute24460202
    Metadata:
      aws:cdk:path: WebAppStack/MyALB/Resource
      cdk_nag:
        rules_to_suppress:
          - id: AwsSolutions-ELB2
            reason: For brevity, this non-production example stack shall not enable load balancer access logs.
          - id: AwsSolutions-EC23
            reason: The security group is expected to allow unrestricted inbound access, as it represents a public web application.
  MyALBSecurityGroupF26FC01F:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatically created Security Group for ELB WebAppStackMyALB4317CD35
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Ref: MyVPCAFB07A31
    Metadata:
      aws:cdk:path: WebAppStack/MyALB/SecurityGroup/Resource
      cdk_nag:
        rules_to_suppress:
          - id: AwsSolutions-EC23
            reason: The security group is expected to allow unrestricted inbound access, as it represents a public web application.
  MyALBSecurityGrouptoWebAppStackMyASGInstanceSecurityGroup5108967980F4D3BE2C:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId:
        Fn::GetAtt:
          - MyALBSecurityGroupF26FC01F
          - GroupId
      IpProtocol: tcp
      Description: Load balancer to target
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - MyASGInstanceSecurityGroupBF55119F
          - GroupId
      FromPort: 80
      ToPort: 80
    Metadata:
      aws:cdk:path: WebAppStack/MyALB/SecurityGroup/to WebAppStackMyASGInstanceSecurityGroup51089679:80
      cdk_nag:
        rules_to_suppress:
          - id: AwsSolutions-EC23
            reason: The security group is expected to allow unrestricted inbound access, as it represents a public web application.
  MyALBHttpListenerCA3CD78E:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: MyALBHttpListenerTargetsGroupAC6A6762
          Type: forward
      LoadBalancerArn:
        Ref: MyALB911A8556
      Port: 80
      Protocol: HTTP
    Metadata:
      aws:cdk:path: WebAppStack/MyALB/HttpListener/Resource
      cdk_nag:
        rules_to_suppress:
          - id: AwsSolutions-EC23
            reason: The security group is expected to allow unrestricted inbound access, as it represents a public web application.
  MyALBHttpListenerTargetsGroupAC6A6762:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: "false"
      TargetType: instance
      VpcId:
        Ref: MyVPCAFB07A31
    Metadata:
      aws:cdk:path: WebAppStack/MyALB/HttpListener/TargetsGroup/Resource
      cdk_nag:
        rules_to_suppress:
          - id: AwsSolutions-EC23
            reason: The security group is expected to allow unrestricted inbound access, as it represents a public web application.
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/31R0YqDMBD8lr6nuatwcK9eKUUod6Klr8catzatJpJsWor47xe1VrmDe8rM7DDMbgIevPHXBdzsUuSXZSkz3qQE4sK89N2gCHhzqAVbH9UhXrPYZaUUqcsUUqdNKNGOcA9ZiZM+aaG1WkggqdXT3IFNFHfPJ9AWCG9wZ7GRVw+n4EgRGo9Hw9DkwULyXU8VKmIpCmck3bdGu7rv8K8QqcKgtX/0TS+3DBxpK6CUquBN6Ek6kGfaDpwSp7VWR1k481ztt7VlEireJHo4zPhGyhIogbHRR1liy7AES1KUGvIMSj/yAVd//LCu/cX7+J2fffQzNH2DOZ/7pCVUD8+IZ/M9mMLfc1xkRtuWJWi1M6IvGYOBCmlI+nJUu+GrZxa/fy670JYpnSM/25fr6p2vAr5anK2US+MUyQp5Mrw/cTCmynACAAA=
    Metadata:
      aws:cdk:path: WebAppStack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Parameters:
  SsmParameterValueawsserviceamiamazonlinuxlatestal2022amikernel510x8664C96584B6F00A464EAD1953AFF4B05118Parameter:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2022-ami-kernel-5.10-x86_64
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
Outputs:
  Hostname:
    Value:
      Fn::GetAtt:
        - MyALB911A8556
        - DNSName
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2
Rules:
  CheckBootstrapVersion:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::Contains:
                - - "1"
                  - "2"
                  - "3"
                  - "4"
                  - "5"
                - Ref: BootstrapVersion
        AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.

