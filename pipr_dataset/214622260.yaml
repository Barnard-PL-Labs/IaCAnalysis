Resources:
  vpcA2121C38:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.160.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: model-stack/vpc
    Metadata:
      aws:cdk:path: model-stack/vpc/Resource
  vpcIngressSubnet1Subnet45084A71:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.160.0.0/24
      VpcId:
        Ref: vpcA2121C38
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: model-stack/vpc/IngressSubnet1
        - Key: aws-cdk:subnet-name
          Value: Ingress
        - Key: aws-cdk:subnet-type
          Value: Public
    Metadata:
      aws:cdk:path: model-stack/vpc/IngressSubnet1/Subnet
  vpcIngressSubnet1RouteTableE449F071:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: vpcA2121C38
      Tags:
        - Key: Name
          Value: model-stack/vpc/IngressSubnet1
    Metadata:
      aws:cdk:path: model-stack/vpc/IngressSubnet1/RouteTable
  vpcIngressSubnet1RouteTableAssociation39E764E0:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: vpcIngressSubnet1RouteTableE449F071
      SubnetId:
        Ref: vpcIngressSubnet1Subnet45084A71
    Metadata:
      aws:cdk:path: model-stack/vpc/IngressSubnet1/RouteTableAssociation
  vpcIngressSubnet1DefaultRoute2DC3F113:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: vpcIngressSubnet1RouteTableE449F071
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: vpcIGWE57CBDCA
    DependsOn:
      - vpcVPCGW7984C166
    Metadata:
      aws:cdk:path: model-stack/vpc/IngressSubnet1/DefaultRoute
  vpcIngressSubnet1EIPD7D76CB9:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: model-stack/vpc/IngressSubnet1
    Metadata:
      aws:cdk:path: model-stack/vpc/IngressSubnet1/EIP
  vpcIngressSubnet1NATGateway1852AF57:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - vpcIngressSubnet1EIPD7D76CB9
          - AllocationId
      SubnetId:
        Ref: vpcIngressSubnet1Subnet45084A71
      Tags:
        - Key: Name
          Value: model-stack/vpc/IngressSubnet1
    Metadata:
      aws:cdk:path: model-stack/vpc/IngressSubnet1/NATGateway
  vpcIngressSubnet2Subnet74DBD898:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.160.1.0/24
      VpcId:
        Ref: vpcA2121C38
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: model-stack/vpc/IngressSubnet2
        - Key: aws-cdk:subnet-name
          Value: Ingress
        - Key: aws-cdk:subnet-type
          Value: Public
    Metadata:
      aws:cdk:path: model-stack/vpc/IngressSubnet2/Subnet
  vpcIngressSubnet2RouteTableCEA1C9A1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: vpcA2121C38
      Tags:
        - Key: Name
          Value: model-stack/vpc/IngressSubnet2
    Metadata:
      aws:cdk:path: model-stack/vpc/IngressSubnet2/RouteTable
  vpcIngressSubnet2RouteTableAssociation47D242AF:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: vpcIngressSubnet2RouteTableCEA1C9A1
      SubnetId:
        Ref: vpcIngressSubnet2Subnet74DBD898
    Metadata:
      aws:cdk:path: model-stack/vpc/IngressSubnet2/RouteTableAssociation
  vpcIngressSubnet2DefaultRoute06271C85:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: vpcIngressSubnet2RouteTableCEA1C9A1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: vpcIGWE57CBDCA
    DependsOn:
      - vpcVPCGW7984C166
    Metadata:
      aws:cdk:path: model-stack/vpc/IngressSubnet2/DefaultRoute
  vpcIngressSubnet2EIP4549E35F:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: model-stack/vpc/IngressSubnet2
    Metadata:
      aws:cdk:path: model-stack/vpc/IngressSubnet2/EIP
  vpcIngressSubnet2NATGatewayB7AB1F8C:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - vpcIngressSubnet2EIP4549E35F
          - AllocationId
      SubnetId:
        Ref: vpcIngressSubnet2Subnet74DBD898
      Tags:
        - Key: Name
          Value: model-stack/vpc/IngressSubnet2
    Metadata:
      aws:cdk:path: model-stack/vpc/IngressSubnet2/NATGateway
  vpcApplicationSubnet1Subnet1068588D:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.160.2.0/24
      VpcId:
        Ref: vpcA2121C38
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: model-stack/vpc/ApplicationSubnet1
        - Key: aws-cdk:subnet-name
          Value: Application
        - Key: aws-cdk:subnet-type
          Value: Private
    Metadata:
      aws:cdk:path: model-stack/vpc/ApplicationSubnet1/Subnet
  vpcApplicationSubnet1RouteTableDA7A2392:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: vpcA2121C38
      Tags:
        - Key: Name
          Value: model-stack/vpc/ApplicationSubnet1
    Metadata:
      aws:cdk:path: model-stack/vpc/ApplicationSubnet1/RouteTable
  vpcApplicationSubnet1RouteTableAssociation24B60D77:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: vpcApplicationSubnet1RouteTableDA7A2392
      SubnetId:
        Ref: vpcApplicationSubnet1Subnet1068588D
    Metadata:
      aws:cdk:path: model-stack/vpc/ApplicationSubnet1/RouteTableAssociation
  vpcApplicationSubnet1DefaultRouteD3020C54:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: vpcApplicationSubnet1RouteTableDA7A2392
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: vpcIngressSubnet1NATGateway1852AF57
    Metadata:
      aws:cdk:path: model-stack/vpc/ApplicationSubnet1/DefaultRoute
  vpcApplicationSubnet2Subnet162BF28B:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.160.3.0/24
      VpcId:
        Ref: vpcA2121C38
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: model-stack/vpc/ApplicationSubnet2
        - Key: aws-cdk:subnet-name
          Value: Application
        - Key: aws-cdk:subnet-type
          Value: Private
    Metadata:
      aws:cdk:path: model-stack/vpc/ApplicationSubnet2/Subnet
  vpcApplicationSubnet2RouteTable54D487A3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: vpcA2121C38
      Tags:
        - Key: Name
          Value: model-stack/vpc/ApplicationSubnet2
    Metadata:
      aws:cdk:path: model-stack/vpc/ApplicationSubnet2/RouteTable
  vpcApplicationSubnet2RouteTableAssociationB0B1EFBF:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: vpcApplicationSubnet2RouteTable54D487A3
      SubnetId:
        Ref: vpcApplicationSubnet2Subnet162BF28B
    Metadata:
      aws:cdk:path: model-stack/vpc/ApplicationSubnet2/RouteTableAssociation
  vpcApplicationSubnet2DefaultRouteA869FF98:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: vpcApplicationSubnet2RouteTable54D487A3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: vpcIngressSubnet2NATGatewayB7AB1F8C
    Metadata:
      aws:cdk:path: model-stack/vpc/ApplicationSubnet2/DefaultRoute
  vpcDatabaseSubnet1Subnet82A1A161:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.160.4.0/28
      VpcId:
        Ref: vpcA2121C38
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: model-stack/vpc/DatabaseSubnet1
        - Key: aws-cdk:subnet-name
          Value: Database
        - Key: aws-cdk:subnet-type
          Value: Isolated
    Metadata:
      aws:cdk:path: model-stack/vpc/DatabaseSubnet1/Subnet
  vpcDatabaseSubnet1RouteTableFC1E3C1F:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: vpcA2121C38
      Tags:
        - Key: Name
          Value: model-stack/vpc/DatabaseSubnet1
    Metadata:
      aws:cdk:path: model-stack/vpc/DatabaseSubnet1/RouteTable
  vpcDatabaseSubnet1RouteTableAssociation5AF191B7:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: vpcDatabaseSubnet1RouteTableFC1E3C1F
      SubnetId:
        Ref: vpcDatabaseSubnet1Subnet82A1A161
    Metadata:
      aws:cdk:path: model-stack/vpc/DatabaseSubnet1/RouteTableAssociation
  vpcDatabaseSubnet2Subnet8B2B862A:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.160.4.16/28
      VpcId:
        Ref: vpcA2121C38
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: model-stack/vpc/DatabaseSubnet2
        - Key: aws-cdk:subnet-name
          Value: Database
        - Key: aws-cdk:subnet-type
          Value: Isolated
    Metadata:
      aws:cdk:path: model-stack/vpc/DatabaseSubnet2/Subnet
  vpcDatabaseSubnet2RouteTableB0247F59:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: vpcA2121C38
      Tags:
        - Key: Name
          Value: model-stack/vpc/DatabaseSubnet2
    Metadata:
      aws:cdk:path: model-stack/vpc/DatabaseSubnet2/RouteTable
  vpcDatabaseSubnet2RouteTableAssociation3E461DDA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: vpcDatabaseSubnet2RouteTableB0247F59
      SubnetId:
        Ref: vpcDatabaseSubnet2Subnet8B2B862A
    Metadata:
      aws:cdk:path: model-stack/vpc/DatabaseSubnet2/RouteTableAssociation
  vpcIGWE57CBDCA:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: model-stack/vpc
    Metadata:
      aws:cdk:path: model-stack/vpc/IGW
  vpcVPCGW7984C166:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: vpcA2121C38
      InternetGatewayId:
        Ref: vpcIGWE57CBDCA
    Metadata:
      aws:cdk:path: model-stack/vpc/VPCGW
  clustercdkmodelclusterC50E1C22:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: cdk-model-cluster
    Metadata:
      aws:cdk:path: model-stack/cluster/cdk-model-cluster/Resource
  clustercdkmodelclusterDefaultAutoScalingGroupInstanceSecurityGroup51356780:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: model-stack/cluster/cdk-model-cluster/DefaultAutoScalingGroup/InstanceSecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: model-stack/cluster/cdk-model-cluster/DefaultAutoScalingGroup
      VpcId:
        Ref: vpcA2121C38
    Metadata:
      aws:cdk:path: model-stack/cluster/cdk-model-cluster/DefaultAutoScalingGroup/InstanceSecurityGroup/Resource
  clustercdkmodelclusterDefaultAutoScalingGroupInstanceSecurityGroupfrommodelstackclustercdkmodelapialbSecurityGroup58AA282150001B641AEC:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort: 5000
      GroupId:
        Fn::GetAtt:
          - clustercdkmodelclusterDefaultAutoScalingGroupInstanceSecurityGroup51356780
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - clustercdkmodelapialbSecurityGroup96179B1D
          - GroupId
      ToPort: 5000
    Metadata:
      aws:cdk:path: model-stack/cluster/cdk-model-cluster/DefaultAutoScalingGroup/InstanceSecurityGroup/from modelstackclustercdkmodelapialbSecurityGroup58AA2821:5000
  clustercdkmodelclusterDefaultAutoScalingGroupInstanceRole746921C8:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: "2012-10-17"
      Tags:
        - Key: Name
          Value: model-stack/cluster/cdk-model-cluster/DefaultAutoScalingGroup
    Metadata:
      aws:cdk:path: model-stack/cluster/cdk-model-cluster/DefaultAutoScalingGroup/InstanceRole/Resource
  clustercdkmodelclusterDefaultAutoScalingGroupInstanceRoleDefaultPolicyB27CC041:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecs:CreateCluster
              - ecs:DeregisterContainerInstance
              - ecs:DiscoverPollEndpoint
              - ecs:Poll
              - ecs:RegisterContainerInstance
              - ecs:StartTelemetrySession
              - ecs:Submit*
              - ecr:GetAuthorizationToken
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: clustercdkmodelclusterDefaultAutoScalingGroupInstanceRoleDefaultPolicyB27CC041
      Roles:
        - Ref: clustercdkmodelclusterDefaultAutoScalingGroupInstanceRole746921C8
    Metadata:
      aws:cdk:path: model-stack/cluster/cdk-model-cluster/DefaultAutoScalingGroup/InstanceRole/DefaultPolicy/Resource
  clustercdkmodelclusterDefaultAutoScalingGroupInstanceProfile864FAAC5:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: clustercdkmodelclusterDefaultAutoScalingGroupInstanceRole746921C8
    Metadata:
      aws:cdk:path: model-stack/cluster/cdk-model-cluster/DefaultAutoScalingGroup/InstanceProfile
  clustercdkmodelclusterDefaultAutoScalingGroupLaunchConfig0F86BA7B:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        Ref: SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter
      InstanceType: r5a.large
      IamInstanceProfile:
        Ref: clustercdkmodelclusterDefaultAutoScalingGroupInstanceProfile864FAAC5
      SecurityGroups:
        - Fn::GetAtt:
            - clustercdkmodelclusterDefaultAutoScalingGroupInstanceSecurityGroup51356780
            - GroupId
      SpotPrice: "0.0379"
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - |-
                #!/bin/bash
                echo ECS_CLUSTER=
              - Ref: clustercdkmodelclusterC50E1C22
              - |-2
                 >> /etc/ecs/ecs.config
                sudo iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP
                sudo service iptables save
                echo ECS_AWSVPC_BLOCK_IMDS=true >> /etc/ecs/ecs.config
                echo ECS_ENABLE_SPOT_INSTANCE_DRAINING=true >> /etc/ecs/ecs.config
    DependsOn:
      - clustercdkmodelclusterDefaultAutoScalingGroupInstanceRoleDefaultPolicyB27CC041
      - clustercdkmodelclusterDefaultAutoScalingGroupInstanceRole746921C8
    Metadata:
      aws:cdk:path: model-stack/cluster/cdk-model-cluster/DefaultAutoScalingGroup/LaunchConfig
  clustercdkmodelclusterDefaultAutoScalingGroupASG65F6E469:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MaxSize: "2"
      MinSize: "1"
      DesiredCapacity: "1"
      LaunchConfigurationName:
        Ref: clustercdkmodelclusterDefaultAutoScalingGroupLaunchConfig0F86BA7B
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: model-stack/cluster/cdk-model-cluster/DefaultAutoScalingGroup
      VPCZoneIdentifier:
        - Ref: vpcApplicationSubnet1Subnet1068588D
        - Ref: vpcApplicationSubnet2Subnet162BF28B
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: true
    Metadata:
      aws:cdk:path: model-stack/cluster/cdk-model-cluster/DefaultAutoScalingGroup/ASG
  clustercdkmodelclusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleF246B01D:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Name
          Value: model-stack/cluster/cdk-model-cluster/DefaultAutoScalingGroup
    Metadata:
      aws:cdk:path: model-stack/cluster/cdk-model-cluster/DefaultAutoScalingGroup/DrainECSHook/Function/ServiceRole/Resource
  clustercdkmodelclusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleDefaultPolicy07BA132B:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ec2:DescribeInstances
              - ec2:DescribeInstanceAttribute
              - ec2:DescribeInstanceStatus
              - ec2:DescribeHosts
            Effect: Allow
            Resource: "*"
          - Action: autoscaling:CompleteLifecycleAction
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":autoscaling:ap-southeast-2:"
                  - Ref: AWS::AccountId
                  - :autoScalingGroup:*:autoScalingGroupName/
                  - Ref: clustercdkmodelclusterDefaultAutoScalingGroupASG65F6E469
          - Action:
              - ecs:DescribeContainerInstances
              - ecs:DescribeTasks
            Effect: Allow
            Resource: "*"
          - Action:
              - ecs:ListContainerInstances
              - ecs:SubmitContainerStateChange
              - ecs:SubmitTaskStateChange
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - clustercdkmodelclusterC50E1C22
                - Arn
          - Action:
              - ecs:UpdateContainerInstancesState
              - ecs:ListTasks
            Condition:
              ArnEquals:
                ecs:cluster:
                  Fn::GetAtt:
                    - clustercdkmodelclusterC50E1C22
                    - Arn
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: clustercdkmodelclusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleDefaultPolicy07BA132B
      Roles:
        - Ref: clustercdkmodelclusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleF246B01D
    Metadata:
      aws:cdk:path: model-stack/cluster/cdk-model-cluster/DefaultAutoScalingGroup/DrainECSHook/Function/ServiceRole/DefaultPolicy/Resource
  clustercdkmodelclusterDefaultAutoScalingGroupDrainECSHookFunctionF02F530D:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3, json, os, time

          ecs = boto3.client('ecs')
          autoscaling = boto3.client('autoscaling')


          def lambda_handler(event, context):
            print(json.dumps(event))
            cluster = os.environ['CLUSTER']
            snsTopicArn = event['Records'][0]['Sns']['TopicArn']
            lifecycle_event = json.loads(event['Records'][0]['Sns']['Message'])
            instance_id = lifecycle_event.get('EC2InstanceId')
            if not instance_id:
              print('Got event without EC2InstanceId: %s', json.dumps(event))
              return

            instance_arn = container_instance_arn(cluster, instance_id)
            print('Instance %s has container instance ARN %s' % (lifecycle_event['EC2InstanceId'], instance_arn))

            if not instance_arn:
              return

            while has_tasks(cluster, instance_arn):
              time.sleep(10)

            try:
              print('Terminating instance %s' % instance_id)
              autoscaling.complete_lifecycle_action(
                  LifecycleActionResult='CONTINUE',
                  **pick(lifecycle_event, 'LifecycleHookName', 'LifecycleActionToken', 'AutoScalingGroupName'))
            except Exception as e:
              # Lifecycle action may have already completed.
              print(str(e))


          def container_instance_arn(cluster, instance_id):
            """Turn an instance ID into a container instance ARN."""
            arns = ecs.list_container_instances(cluster=cluster, filter='ec2InstanceId==' + instance_id)['containerInstanceArns']
            if not arns:
              return None
            return arns[0]


          def has_tasks(cluster, instance_arn):
            """Return True if the instance is running tasks for the given cluster."""
            instances = ecs.describe_container_instances(cluster=cluster, containerInstances=[instance_arn])['containerInstances']
            if not instances:
              return False
            instance = instances[0]

            if instance['status'] == 'ACTIVE':
              # Start draining, then try again later
              set_container_instance_to_draining(cluster, instance_arn)
              return True

            tasks = instance['runningTasksCount'] + instance['pendingTasksCount']
            print('Instance %s has %s tasks' % (instance_arn, tasks))

            return tasks > 0


          def set_container_instance_to_draining(cluster, instance_arn):
            ecs.update_container_instances_state(
                cluster=cluster,
                containerInstances=[instance_arn], status='DRAINING')


          def pick(dct, *keys):
            """Pick a subset of a dict."""
            return {k: v for k, v in dct.items() if k in keys}
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
          - clustercdkmodelclusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleF246B01D
          - Arn
      Runtime: python3.6
      Environment:
        Variables:
          CLUSTER:
            Ref: clustercdkmodelclusterC50E1C22
      Tags:
        - Key: Name
          Value: model-stack/cluster/cdk-model-cluster/DefaultAutoScalingGroup
      Timeout: 310
    DependsOn:
      - clustercdkmodelclusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleDefaultPolicy07BA132B
      - clustercdkmodelclusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleF246B01D
    Metadata:
      aws:cdk:path: model-stack/cluster/cdk-model-cluster/DefaultAutoScalingGroup/DrainECSHook/Function/Resource
  clustercdkmodelclusterDefaultAutoScalingGroupDrainECSHookFunctionAllowInvokemodelstackclustercdkmodelclusterDefaultAutoScalingGroupLifecycleHookDrainHookTopic9775F6B4722C9618:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - clustercdkmodelclusterDefaultAutoScalingGroupDrainECSHookFunctionF02F530D
          - Arn
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: clustercdkmodelclusterDefaultAutoScalingGroupLifecycleHookDrainHookTopic5BABDA55
    Metadata:
      aws:cdk:path: model-stack/cluster/cdk-model-cluster/DefaultAutoScalingGroup/DrainECSHook/Function/AllowInvoke:modelstackclustercdkmodelclusterDefaultAutoScalingGroupLifecycleHookDrainHookTopic9775F6B4
  clustercdkmodelclusterDefaultAutoScalingGroupDrainECSHookFunctionTopic8AC35313:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      TopicArn:
        Ref: clustercdkmodelclusterDefaultAutoScalingGroupLifecycleHookDrainHookTopic5BABDA55
      Endpoint:
        Fn::GetAtt:
          - clustercdkmodelclusterDefaultAutoScalingGroupDrainECSHookFunctionF02F530D
          - Arn
    Metadata:
      aws:cdk:path: model-stack/cluster/cdk-model-cluster/DefaultAutoScalingGroup/DrainECSHook/Function/Topic/Resource
  clustercdkmodelclusterDefaultAutoScalingGroupLifecycleHookDrainHookRole7E766111:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: autoscaling.amazonaws.com
        Version: "2012-10-17"
      Tags:
        - Key: Name
          Value: model-stack/cluster/cdk-model-cluster/DefaultAutoScalingGroup
    Metadata:
      aws:cdk:path: model-stack/cluster/cdk-model-cluster/DefaultAutoScalingGroup/LifecycleHookDrainHook/Role/Resource
  clustercdkmodelclusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleDefaultPolicyBED01011:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: sns:Publish
            Effect: Allow
            Resource:
              Ref: clustercdkmodelclusterDefaultAutoScalingGroupLifecycleHookDrainHookTopic5BABDA55
        Version: "2012-10-17"
      PolicyName: clustercdkmodelclusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleDefaultPolicyBED01011
      Roles:
        - Ref: clustercdkmodelclusterDefaultAutoScalingGroupLifecycleHookDrainHookRole7E766111
    Metadata:
      aws:cdk:path: model-stack/cluster/cdk-model-cluster/DefaultAutoScalingGroup/LifecycleHookDrainHook/Role/DefaultPolicy/Resource
  clustercdkmodelclusterDefaultAutoScalingGroupLifecycleHookDrainHookTopic5BABDA55:
    Type: AWS::SNS::Topic
    Properties:
      Tags:
        - Key: Name
          Value: model-stack/cluster/cdk-model-cluster/DefaultAutoScalingGroup
    Metadata:
      aws:cdk:path: model-stack/cluster/cdk-model-cluster/DefaultAutoScalingGroup/LifecycleHookDrainHook/Topic/Resource
  clustercdkmodelclusterDefaultAutoScalingGroupLifecycleHookDrainHook32143782:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName:
        Ref: clustercdkmodelclusterDefaultAutoScalingGroupASG65F6E469
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
      DefaultResult: CONTINUE
      HeartbeatTimeout: 300
      NotificationTargetARN:
        Ref: clustercdkmodelclusterDefaultAutoScalingGroupLifecycleHookDrainHookTopic5BABDA55
      RoleARN:
        Fn::GetAtt:
          - clustercdkmodelclusterDefaultAutoScalingGroupLifecycleHookDrainHookRole7E766111
          - Arn
    DependsOn:
      - clustercdkmodelclusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleDefaultPolicyBED01011
      - clustercdkmodelclusterDefaultAutoScalingGroupLifecycleHookDrainHookRole7E766111
    Metadata:
      aws:cdk:path: model-stack/cluster/cdk-model-cluster/DefaultAutoScalingGroup/LifecycleHookDrainHook/Resource
  clustercdkmodelapialb77B16113:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - Fn::GetAtt:
            - clustercdkmodelapialbSecurityGroup96179B1D
            - GroupId
      Subnets:
        - Ref: vpcIngressSubnet1Subnet45084A71
        - Ref: vpcIngressSubnet2Subnet74DBD898
      Type: application
    DependsOn:
      - vpcIngressSubnet1DefaultRoute2DC3F113
      - vpcIngressSubnet2DefaultRoute06271C85
    Metadata:
      aws:cdk:path: model-stack/cluster/cdk-model-api/alb/Resource
  clustercdkmodelapialbSecurityGroup96179B1D:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatically created Security Group for ELB modelstackclustercdkmodelapialb6D911046
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Ref: vpcA2121C38
    Metadata:
      aws:cdk:path: model-stack/cluster/cdk-model-api/alb/SecurityGroup/Resource
  clustercdkmodelapialbSecurityGrouptomodelstackclustercdkmodelclusterDefaultAutoScalingGroupInstanceSecurityGroupA5FFE14D50005043467F:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId:
        Fn::GetAtt:
          - clustercdkmodelapialbSecurityGroup96179B1D
          - GroupId
      IpProtocol: tcp
      Description: Load balancer to target
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - clustercdkmodelclusterDefaultAutoScalingGroupInstanceSecurityGroup51356780
          - GroupId
      FromPort: 5000
      ToPort: 5000
    Metadata:
      aws:cdk:path: model-stack/cluster/cdk-model-api/alb/SecurityGroup/to modelstackclustercdkmodelclusterDefaultAutoScalingGroupInstanceSecurityGroupA5FFE14D:5000
  clustercdkmodelapialblistenerACD6018B:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: clustercdkmodelapidefault62E7BFD4
          Type: forward
      LoadBalancerArn:
        Ref: clustercdkmodelapialb77B16113
      Port: 80
      Protocol: HTTP
    Metadata:
      aws:cdk:path: model-stack/cluster/cdk-model-api/alb/listener/Resource
  clustercdkmodelapidefault62E7BFD4:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /health
      HealthCheckPort: "5000"
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      Port: 80
      Protocol: HTTP
      TargetType: instance
      VpcId:
        Ref: vpcA2121C38
    Metadata:
      aws:cdk:path: model-stack/cluster/cdk-model-api/default/Resource
  clustercdkmodelapitaskdefTaskRoleA71E56B0:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: model-stack/cluster/cdk-model-api/taskdef/TaskRole/Resource
  clustercdkmodelapitaskdefTaskRoleDefaultPolicy0858ED5B:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":ecr:ap-southeast-2:"
                  - Ref: AWS::AccountId
                  - :repository/selfie2anime-api
          - Action: ecr:GetAuthorizationToken
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: clustercdkmodelapitaskdefTaskRoleDefaultPolicy0858ED5B
      Roles:
        - Ref: clustercdkmodelapitaskdefTaskRoleA71E56B0
    Metadata:
      aws:cdk:path: model-stack/cluster/cdk-model-api/taskdef/TaskRole/DefaultPolicy/Resource
  clustercdkmodelapitaskdef6B4A0B85:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Command:
            - main.py
            - --dataset
            - selfie2anime
            - --phase
            - web
            - --light
            - "True"
          Cpu: 1024
          EntryPoint:
            - python3
          Environment:
            - Name: PYTHONUNBUFFERED
              Value: "1"
          Essential: true
          Image:
            Fn::Join:
              - ""
              - - Fn::Select:
                    - 4
                    - Fn::Split:
                        - ":"
                        - Fn::Join:
                            - ""
                            - - "arn:"
                              - Ref: AWS::Partition
                              - ":ecr:ap-southeast-2:"
                              - Ref: AWS::AccountId
                              - :repository/selfie2anime-api
                - .dkr.ecr.
                - Fn::Select:
                    - 3
                    - Fn::Split:
                        - ":"
                        - Fn::Join:
                            - ""
                            - - "arn:"
                              - Ref: AWS::Partition
                              - ":ecr:ap-southeast-2:"
                              - Ref: AWS::AccountId
                              - :repository/selfie2anime-api
                - "."
                - Ref: AWS::URLSuffix
                - /selfie2anime-api:latest
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: clustercdkmodelapitaskdefcontainerLogGroupC490A374
              awslogs-stream-prefix:
                Fn::Join:
                  - ""
                  - - fargate/
                    - Ref: AWS::StackName
              awslogs-region: ap-southeast-2
          Memory: 8192
          MemoryReservation: 4096
          Name: container
          PortMappings:
            - ContainerPort: 5000
              HostPort: 5000
              Protocol: tcp
          WorkingDirectory: /app
      ExecutionRoleArn:
        Fn::GetAtt:
          - clustercdkmodelapitaskdefExecutionRoleD31F1BD9
          - Arn
      Family: modelstackclustercdkmodelapitaskdef1902DBAA
      NetworkMode: bridge
      RequiresCompatibilities:
        - EC2
      TaskRoleArn:
        Fn::GetAtt:
          - clustercdkmodelapitaskdefTaskRoleA71E56B0
          - Arn
    Metadata:
      aws:cdk:path: model-stack/cluster/cdk-model-api/taskdef/Resource
  clustercdkmodelapitaskdefcontainerLogGroupC490A374:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: model-stack/cluster/cdk-model-api/taskdef/container/LogGroup/Resource
  clustercdkmodelapitaskdefExecutionRoleD31F1BD9:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: model-stack/cluster/cdk-model-api/taskdef/ExecutionRole/Resource
  clustercdkmodelapitaskdefExecutionRoleDefaultPolicyE42361C7:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":ecr:ap-southeast-2:"
                  - Ref: AWS::AccountId
                  - :repository/selfie2anime-api
          - Action: ecr:GetAuthorizationToken
            Effect: Allow
            Resource: "*"
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - clustercdkmodelapitaskdefcontainerLogGroupC490A374
                - Arn
        Version: "2012-10-17"
      PolicyName: clustercdkmodelapitaskdefExecutionRoleDefaultPolicyE42361C7
      Roles:
        - Ref: clustercdkmodelapitaskdefExecutionRoleD31F1BD9
    Metadata:
      aws:cdk:path: model-stack/cluster/cdk-model-api/taskdef/ExecutionRole/DefaultPolicy/Resource
  clustercdkmodelapiserviceServiceC9003AE0:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: clustercdkmodelclusterC50E1C22
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 1
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: EC2
      LoadBalancers:
        - ContainerName: container
          ContainerPort: 5000
          TargetGroupArn:
            Ref: clustercdkmodelapidefault62E7BFD4
      SchedulingStrategy: REPLICA
      ServiceName: selfie2anime
      TaskDefinition:
        Ref: clustercdkmodelapitaskdef6B4A0B85
    DependsOn:
      - clustercdkmodelapialblistenerACD6018B
    Metadata:
      aws:cdk:path: model-stack/cluster/cdk-model-api/service/Service
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Modules: aws-cdk=2.113.0,@aws-cdk/assets=1.20.0,@aws-cdk/aws-applicationautoscaling=1.20.0,@aws-cdk/aws-autoscaling=1.20.0,@aws-cdk/aws-autoscaling-common=1.20.0,@aws-cdk/aws-autoscaling-hooktargets=1.20.0,@aws-cdk/aws-cloudformation=1.20.0,@aws-cdk/aws-cloudwatch=1.20.0,@aws-cdk/aws-ec2=1.20.0,@aws-cdk/aws-ecr=1.20.0,@aws-cdk/aws-ecr-assets=1.20.0,@aws-cdk/aws-ecs=1.20.0,@aws-cdk/aws-elasticloadbalancingv2=1.20.0,@aws-cdk/aws-events=1.20.0,@aws-cdk/aws-iam=1.20.0,@aws-cdk/aws-kms=1.20.0,@aws-cdk/aws-lambda=1.20.0,@aws-cdk/aws-logs=1.20.0,@aws-cdk/aws-s3=1.20.0,@aws-cdk/aws-s3-assets=1.20.0,@aws-cdk/aws-servicediscovery=1.20.0,@aws-cdk/aws-sns=1.20.0,@aws-cdk/aws-sns-subscriptions=1.20.0,@aws-cdk/aws-sqs=1.20.0,@aws-cdk/aws-ssm=1.20.0,@aws-cdk/core=1.20.0,@aws-cdk/cx-api=1.20.0,@aws-cdk/region-info=1.20.0,jsii-runtime=node.js/v18.12.1
Outputs:
  clustercdkmodelapialbDnsA2C0D152:
    Value:
      Fn::GetAtt:
        - clustercdkmodelapialb77B16113
        - DNSName
Parameters:
  SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id

