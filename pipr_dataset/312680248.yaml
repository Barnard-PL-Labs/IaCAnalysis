Resources:
  Vpc8378EB38:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: sample-dotnet-fargate-stack/Vpc
    Metadata:
      aws:cdk:path: sample-dotnet-fargate-stack/Vpc/Resource
  VpcPublicSubnet1Subnet5C2D37C4:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/18
      VpcId:
        Ref: Vpc8378EB38
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: sample-dotnet-fargate-stack/Vpc/PublicSubnet1
    Metadata:
      aws:cdk:path: sample-dotnet-fargate-stack/Vpc/PublicSubnet1/Subnet
  VpcPublicSubnet1RouteTable6C95E38E:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc8378EB38
      Tags:
        - Key: Name
          Value: sample-dotnet-fargate-stack/Vpc/PublicSubnet1
    Metadata:
      aws:cdk:path: sample-dotnet-fargate-stack/Vpc/PublicSubnet1/RouteTable
  VpcPublicSubnet1RouteTableAssociation97140677:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcPublicSubnet1RouteTable6C95E38E
      SubnetId:
        Ref: VpcPublicSubnet1Subnet5C2D37C4
    Metadata:
      aws:cdk:path: sample-dotnet-fargate-stack/Vpc/PublicSubnet1/RouteTableAssociation
  VpcPublicSubnet1DefaultRoute3DA9E72A:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VpcPublicSubnet1RouteTable6C95E38E
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VpcIGWD7BA715C
    DependsOn:
      - VpcVPCGWBF912B6E
    Metadata:
      aws:cdk:path: sample-dotnet-fargate-stack/Vpc/PublicSubnet1/DefaultRoute
  VpcPublicSubnet1EIPD7E02669:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: sample-dotnet-fargate-stack/Vpc/PublicSubnet1
    Metadata:
      aws:cdk:path: sample-dotnet-fargate-stack/Vpc/PublicSubnet1/EIP
  VpcPublicSubnet1NATGateway4D7517AA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - VpcPublicSubnet1EIPD7E02669
          - AllocationId
      SubnetId:
        Ref: VpcPublicSubnet1Subnet5C2D37C4
      Tags:
        - Key: Name
          Value: sample-dotnet-fargate-stack/Vpc/PublicSubnet1
    Metadata:
      aws:cdk:path: sample-dotnet-fargate-stack/Vpc/PublicSubnet1/NATGateway
  VpcPublicSubnet2Subnet691E08A3:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.64.0/18
      VpcId:
        Ref: Vpc8378EB38
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: sample-dotnet-fargate-stack/Vpc/PublicSubnet2
    Metadata:
      aws:cdk:path: sample-dotnet-fargate-stack/Vpc/PublicSubnet2/Subnet
  VpcPublicSubnet2RouteTable94F7E489:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc8378EB38
      Tags:
        - Key: Name
          Value: sample-dotnet-fargate-stack/Vpc/PublicSubnet2
    Metadata:
      aws:cdk:path: sample-dotnet-fargate-stack/Vpc/PublicSubnet2/RouteTable
  VpcPublicSubnet2RouteTableAssociationDD5762D8:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcPublicSubnet2RouteTable94F7E489
      SubnetId:
        Ref: VpcPublicSubnet2Subnet691E08A3
    Metadata:
      aws:cdk:path: sample-dotnet-fargate-stack/Vpc/PublicSubnet2/RouteTableAssociation
  VpcPublicSubnet2DefaultRoute97F91067:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VpcPublicSubnet2RouteTable94F7E489
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VpcIGWD7BA715C
    DependsOn:
      - VpcVPCGWBF912B6E
    Metadata:
      aws:cdk:path: sample-dotnet-fargate-stack/Vpc/PublicSubnet2/DefaultRoute
  VpcPrivateSubnet1Subnet536B997A:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.128.0/18
      VpcId:
        Ref: Vpc8378EB38
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: sample-dotnet-fargate-stack/Vpc/PrivateSubnet1
    Metadata:
      aws:cdk:path: sample-dotnet-fargate-stack/Vpc/PrivateSubnet1/Subnet
  VpcPrivateSubnet1RouteTableB2C5B500:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc8378EB38
      Tags:
        - Key: Name
          Value: sample-dotnet-fargate-stack/Vpc/PrivateSubnet1
    Metadata:
      aws:cdk:path: sample-dotnet-fargate-stack/Vpc/PrivateSubnet1/RouteTable
  VpcPrivateSubnet1RouteTableAssociation70C59FA6:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcPrivateSubnet1RouteTableB2C5B500
      SubnetId:
        Ref: VpcPrivateSubnet1Subnet536B997A
    Metadata:
      aws:cdk:path: sample-dotnet-fargate-stack/Vpc/PrivateSubnet1/RouteTableAssociation
  VpcPrivateSubnet1DefaultRouteBE02A9ED:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VpcPrivateSubnet1RouteTableB2C5B500
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: VpcPublicSubnet1NATGateway4D7517AA
    Metadata:
      aws:cdk:path: sample-dotnet-fargate-stack/Vpc/PrivateSubnet1/DefaultRoute
  VpcPrivateSubnet2Subnet3788AAA1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.192.0/18
      VpcId:
        Ref: Vpc8378EB38
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: sample-dotnet-fargate-stack/Vpc/PrivateSubnet2
    Metadata:
      aws:cdk:path: sample-dotnet-fargate-stack/Vpc/PrivateSubnet2/Subnet
  VpcPrivateSubnet2RouteTableA678073B:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc8378EB38
      Tags:
        - Key: Name
          Value: sample-dotnet-fargate-stack/Vpc/PrivateSubnet2
    Metadata:
      aws:cdk:path: sample-dotnet-fargate-stack/Vpc/PrivateSubnet2/RouteTable
  VpcPrivateSubnet2RouteTableAssociationA89CAD56:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcPrivateSubnet2RouteTableA678073B
      SubnetId:
        Ref: VpcPrivateSubnet2Subnet3788AAA1
    Metadata:
      aws:cdk:path: sample-dotnet-fargate-stack/Vpc/PrivateSubnet2/RouteTableAssociation
  VpcPrivateSubnet2DefaultRoute060D2087:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VpcPrivateSubnet2RouteTableA678073B
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: VpcPublicSubnet1NATGateway4D7517AA
    Metadata:
      aws:cdk:path: sample-dotnet-fargate-stack/Vpc/PrivateSubnet2/DefaultRoute
  VpcIGWD7BA715C:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: sample-dotnet-fargate-stack/Vpc
    Metadata:
      aws:cdk:path: sample-dotnet-fargate-stack/Vpc/IGW
  VpcVPCGWBF912B6E:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: Vpc8378EB38
      InternetGatewayId:
        Ref: VpcIGWD7BA715C
    Metadata:
      aws:cdk:path: sample-dotnet-fargate-stack/Vpc/VPCGW
  serviceLBD84AC665:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: "false"
      Scheme: internet-facing
      SecurityGroups:
        - Fn::GetAtt:
            - serviceLBSecurityGroup7C51B15A
            - GroupId
      Subnets:
        - Ref: VpcPublicSubnet1Subnet5C2D37C4
        - Ref: VpcPublicSubnet2Subnet691E08A3
      Type: application
    DependsOn:
      - VpcPublicSubnet1DefaultRoute3DA9E72A
      - VpcPublicSubnet2DefaultRoute97F91067
    Metadata:
      aws:cdk:path: sample-dotnet-fargate-stack/service/LB/Resource
  serviceLBSecurityGroup7C51B15A:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatically created Security Group for ELB sampledotnetfargatestackserviceLBE615410D
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: sample-dotnet-fargate-stack/service/LB/SecurityGroup/Resource
  serviceLBSecurityGrouptosampledotnetfargatestackserviceServiceSecurityGroup8AABE3DC8037481DA5:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId:
        Fn::GetAtt:
          - serviceLBSecurityGroup7C51B15A
          - GroupId
      IpProtocol: tcp
      Description: Load balancer to target
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - serviceServiceSecurityGroup94D21C42
          - GroupId
      FromPort: 80
      ToPort: 80
    Metadata:
      aws:cdk:path: sample-dotnet-fargate-stack/service/LB/SecurityGroup/to sampledotnetfargatestackserviceServiceSecurityGroup8AABE3DC:80
  serviceLBPublicListener924DC596:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: serviceLBPublicListenerECSGroupD194ED9A
          Type: forward
      LoadBalancerArn:
        Ref: serviceLBD84AC665
      Port: 80
      Protocol: HTTP
    Metadata:
      aws:cdk:path: sample-dotnet-fargate-stack/service/LB/PublicListener/Resource
  serviceLBPublicListenerECSGroupD194ED9A:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /
      HealthCheckPort: "80"
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: sample-dotnet-fargate-stack/service/LB/PublicListener/ECSGroup/Resource
  serviceTaskDefTaskRole43CA7BBB:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: sample-dotnet-fargate-stack/service/TaskDef/TaskRole/Resource
  serviceTaskDefTaskRoleDefaultPolicyC429502E:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:Get*
              - s3:List*
              - s3:Describe*
              - s3:PutObject
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: serviceTaskDefTaskRoleDefaultPolicyC429502E
      Roles:
        - Ref: serviceTaskDefTaskRole43CA7BBB
    Metadata:
      aws:cdk:path: sample-dotnet-fargate-stack/service/TaskDef/TaskRole/DefaultPolicy/Resource
  serviceTaskDef7C4986C7:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: mcr.microsoft.com/dotnet/samples:aspnetapp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: serviceTaskDefflaskapiLogGroup70BF505B
              awslogs-stream-prefix: service
              awslogs-region:
                Ref: AWS::Region
          Name: flask-api
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
      Cpu: "1024"
      ExecutionRoleArn:
        Fn::GetAtt:
          - serviceTaskDefExecutionRole39FD5935
          - Arn
      Family: sampledotnetfargatestackserviceTaskDefCF11CC4E
      Memory: "2048"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::GetAtt:
          - serviceTaskDefTaskRole43CA7BBB
          - Arn
    Metadata:
      aws:cdk:path: sample-dotnet-fargate-stack/service/TaskDef/Resource
  serviceTaskDefflaskapiLogGroup70BF505B:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: sample-dotnet-fargate-stack/service/TaskDef/flask-api/LogGroup/Resource
  serviceTaskDefExecutionRole39FD5935:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: sample-dotnet-fargate-stack/service/TaskDef/ExecutionRole/Resource
  serviceTaskDefExecutionRoleDefaultPolicy6375C3DF:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - serviceTaskDefflaskapiLogGroup70BF505B
                - Arn
        Version: "2012-10-17"
      PolicyName: serviceTaskDefExecutionRoleDefaultPolicy6375C3DF
      Roles:
        - Ref: serviceTaskDefExecutionRole39FD5935
    Metadata:
      aws:cdk:path: sample-dotnet-fargate-stack/service/TaskDef/ExecutionRole/DefaultPolicy/Resource
  serviceService8587F09F:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: EcsDefaultClusterMnL3mNNYNVpc18E0451A
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 2
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: flask-api
          ContainerPort: 80
          TargetGroupArn:
            Ref: serviceLBPublicListenerECSGroupD194ED9A
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::GetAtt:
                - serviceServiceSecurityGroup94D21C42
                - GroupId
          Subnets:
            - Ref: VpcPrivateSubnet1Subnet536B997A
            - Ref: VpcPrivateSubnet2Subnet3788AAA1
      TaskDefinition:
        Ref: serviceTaskDef7C4986C7
    DependsOn:
      - serviceLBPublicListenerECSGroupD194ED9A
      - serviceLBPublicListener924DC596
    Metadata:
      aws:cdk:path: sample-dotnet-fargate-stack/service/Service/Service
  serviceServiceSecurityGroup94D21C42:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: sample-dotnet-fargate-stack/service/Service/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: sample-dotnet-fargate-stack/service/Service/SecurityGroup/Resource
  serviceServiceSecurityGroupfromsampledotnetfargatestackserviceLBSecurityGroupEFF3EE9E80F6146463:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort: 80
      GroupId:
        Fn::GetAtt:
          - serviceServiceSecurityGroup94D21C42
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - serviceLBSecurityGroup7C51B15A
          - GroupId
      ToPort: 80
    Metadata:
      aws:cdk:path: sample-dotnet-fargate-stack/service/Service/SecurityGroup/from sampledotnetfargatestackserviceLBSecurityGroupEFF3EE9E:80
  EcsDefaultClusterMnL3mNNYNVpc18E0451A:
    Type: AWS::ECS::Cluster
    Metadata:
      aws:cdk:path: sample-dotnet-fargate-stack/EcsDefaultClusterMnL3mNNYNVpc/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Modules: aws-cdk=2.113.0,@aws-cdk/assets=1.73.0,@aws-cdk/aws-applicationautoscaling=1.73.0,@aws-cdk/aws-autoscaling=1.73.0,@aws-cdk/aws-autoscaling-common=1.73.0,@aws-cdk/aws-autoscaling-hooktargets=1.73.0,@aws-cdk/aws-certificatemanager=1.73.0,@aws-cdk/aws-cloudwatch=1.73.0,@aws-cdk/aws-codeguruprofiler=1.73.0,@aws-cdk/aws-ec2=1.73.0,@aws-cdk/aws-ecr=1.73.0,@aws-cdk/aws-ecr-assets=1.73.0,@aws-cdk/aws-ecs=1.73.0,@aws-cdk/aws-ecs-patterns=1.73.0,@aws-cdk/aws-elasticloadbalancingv2=1.73.0,@aws-cdk/aws-events=1.73.0,@aws-cdk/aws-events-targets=1.73.0,@aws-cdk/aws-iam=1.73.0,@aws-cdk/aws-kms=1.73.0,@aws-cdk/aws-lambda=1.73.0,@aws-cdk/aws-logs=1.73.0,@aws-cdk/aws-route53=1.73.0,@aws-cdk/aws-route53-targets=1.73.0,@aws-cdk/aws-s3=1.73.0,@aws-cdk/aws-s3-assets=1.73.0,@aws-cdk/aws-servicediscovery=1.73.0,@aws-cdk/aws-sns=1.73.0,@aws-cdk/aws-sns-subscriptions=1.73.0,@aws-cdk/aws-sqs=1.73.0,@aws-cdk/aws-ssm=1.73.0,@aws-cdk/cloud-assembly-schema=1.73.0,@aws-cdk/core=1.73.0,@aws-cdk/custom-resources=1.73.0,@aws-cdk/cx-api=1.73.0,@aws-cdk/region-info=1.73.0,jsii-runtime=node.js/v18.12.1
    Metadata:
      aws:cdk:path: sample-dotnet-fargate-stack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Outputs:
  serviceLoadBalancerDNS7A375B34:
    Value:
      Fn::GetAtt:
        - serviceLBD84AC665
        - DNSName
  serviceServiceURLD17005C1:
    Value:
      Fn::Join:
        - ""
        - - http://
          - Fn::GetAtt:
              - serviceLBD84AC665
              - DNSName
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2

