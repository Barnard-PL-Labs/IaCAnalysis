Resources:
  wordpressVpc34F9DE14:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 192.168.0.0/24
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: AwsCdkWordpressStack/wordpressVpc
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/wordpressVpc/Resource
  wordpressVpcApplicationSubnet1SubnetD2DD040E:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 192.168.0.0/26
      VpcId:
        Ref: wordpressVpc34F9DE14
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Application
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: AwsCdkWordpressStack/wordpressVpc/ApplicationSubnet1
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/wordpressVpc/ApplicationSubnet1/Subnet
  wordpressVpcApplicationSubnet1RouteTableE764099D:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: wordpressVpc34F9DE14
      Tags:
        - Key: Name
          Value: AwsCdkWordpressStack/wordpressVpc/ApplicationSubnet1
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/wordpressVpc/ApplicationSubnet1/RouteTable
  wordpressVpcApplicationSubnet1RouteTableAssociationDAF4F7B4:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: wordpressVpcApplicationSubnet1RouteTableE764099D
      SubnetId:
        Ref: wordpressVpcApplicationSubnet1SubnetD2DD040E
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/wordpressVpc/ApplicationSubnet1/RouteTableAssociation
  wordpressVpcApplicationSubnet1DefaultRouteEFAAE229:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: wordpressVpcApplicationSubnet1RouteTableE764099D
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: wordpressVpcPublicSubnet1NATGatewayA4817250
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/wordpressVpc/ApplicationSubnet1/DefaultRoute
  wordpressVpcApplicationSubnet2Subnet1B825AA2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 192.168.0.64/26
      VpcId:
        Ref: wordpressVpc34F9DE14
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Application
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: AwsCdkWordpressStack/wordpressVpc/ApplicationSubnet2
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/wordpressVpc/ApplicationSubnet2/Subnet
  wordpressVpcApplicationSubnet2RouteTableC1527C09:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: wordpressVpc34F9DE14
      Tags:
        - Key: Name
          Value: AwsCdkWordpressStack/wordpressVpc/ApplicationSubnet2
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/wordpressVpc/ApplicationSubnet2/RouteTable
  wordpressVpcApplicationSubnet2RouteTableAssociationF9FD97E3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: wordpressVpcApplicationSubnet2RouteTableC1527C09
      SubnetId:
        Ref: wordpressVpcApplicationSubnet2Subnet1B825AA2
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/wordpressVpc/ApplicationSubnet2/RouteTableAssociation
  wordpressVpcApplicationSubnet2DefaultRouteE2B28797:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: wordpressVpcApplicationSubnet2RouteTableC1527C09
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: wordpressVpcPublicSubnet2NATGateway882CA7CC
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/wordpressVpc/ApplicationSubnet2/DefaultRoute
  wordpressVpcPublicSubnet1Subnet283D0E8E:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 192.168.0.128/27
      VpcId:
        Ref: wordpressVpc34F9DE14
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: AwsCdkWordpressStack/wordpressVpc/PublicSubnet1
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/wordpressVpc/PublicSubnet1/Subnet
  wordpressVpcPublicSubnet1RouteTable173271CE:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: wordpressVpc34F9DE14
      Tags:
        - Key: Name
          Value: AwsCdkWordpressStack/wordpressVpc/PublicSubnet1
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/wordpressVpc/PublicSubnet1/RouteTable
  wordpressVpcPublicSubnet1RouteTableAssociation6CD64D3B:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: wordpressVpcPublicSubnet1RouteTable173271CE
      SubnetId:
        Ref: wordpressVpcPublicSubnet1Subnet283D0E8E
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/wordpressVpc/PublicSubnet1/RouteTableAssociation
  wordpressVpcPublicSubnet1DefaultRoute0223827F:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: wordpressVpcPublicSubnet1RouteTable173271CE
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: wordpressVpcIGWA3B3A6D2
    DependsOn:
      - wordpressVpcVPCGWEEF4891E
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/wordpressVpc/PublicSubnet1/DefaultRoute
  wordpressVpcPublicSubnet1EIP22582C18:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: AwsCdkWordpressStack/wordpressVpc/PublicSubnet1
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/wordpressVpc/PublicSubnet1/EIP
  wordpressVpcPublicSubnet1NATGatewayA4817250:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId:
        Ref: wordpressVpcPublicSubnet1Subnet283D0E8E
      AllocationId:
        Fn::GetAtt:
          - wordpressVpcPublicSubnet1EIP22582C18
          - AllocationId
      Tags:
        - Key: Name
          Value: AwsCdkWordpressStack/wordpressVpc/PublicSubnet1
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/wordpressVpc/PublicSubnet1/NATGateway
  wordpressVpcPublicSubnet2Subnet8EDDAF0C:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 192.168.0.160/27
      VpcId:
        Ref: wordpressVpc34F9DE14
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: AwsCdkWordpressStack/wordpressVpc/PublicSubnet2
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/wordpressVpc/PublicSubnet2/Subnet
  wordpressVpcPublicSubnet2RouteTableFB69CDCE:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: wordpressVpc34F9DE14
      Tags:
        - Key: Name
          Value: AwsCdkWordpressStack/wordpressVpc/PublicSubnet2
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/wordpressVpc/PublicSubnet2/RouteTable
  wordpressVpcPublicSubnet2RouteTableAssociationC9B08829:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: wordpressVpcPublicSubnet2RouteTableFB69CDCE
      SubnetId:
        Ref: wordpressVpcPublicSubnet2Subnet8EDDAF0C
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/wordpressVpc/PublicSubnet2/RouteTableAssociation
  wordpressVpcPublicSubnet2DefaultRoute928C1175:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: wordpressVpcPublicSubnet2RouteTableFB69CDCE
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: wordpressVpcIGWA3B3A6D2
    DependsOn:
      - wordpressVpcVPCGWEEF4891E
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/wordpressVpc/PublicSubnet2/DefaultRoute
  wordpressVpcPublicSubnet2EIPC65B0293:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: AwsCdkWordpressStack/wordpressVpc/PublicSubnet2
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/wordpressVpc/PublicSubnet2/EIP
  wordpressVpcPublicSubnet2NATGateway882CA7CC:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId:
        Ref: wordpressVpcPublicSubnet2Subnet8EDDAF0C
      AllocationId:
        Fn::GetAtt:
          - wordpressVpcPublicSubnet2EIPC65B0293
          - AllocationId
      Tags:
        - Key: Name
          Value: AwsCdkWordpressStack/wordpressVpc/PublicSubnet2
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/wordpressVpc/PublicSubnet2/NATGateway
  wordpressVpcDataSubnet1Subnet1B02D19A:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 192.168.0.192/28
      VpcId:
        Ref: wordpressVpc34F9DE14
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Data
        - Key: aws-cdk:subnet-type
          Value: Isolated
        - Key: Name
          Value: AwsCdkWordpressStack/wordpressVpc/DataSubnet1
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/wordpressVpc/DataSubnet1/Subnet
  wordpressVpcDataSubnet1RouteTable9B6F7FDD:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: wordpressVpc34F9DE14
      Tags:
        - Key: Name
          Value: AwsCdkWordpressStack/wordpressVpc/DataSubnet1
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/wordpressVpc/DataSubnet1/RouteTable
  wordpressVpcDataSubnet1RouteTableAssociation20764E4E:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: wordpressVpcDataSubnet1RouteTable9B6F7FDD
      SubnetId:
        Ref: wordpressVpcDataSubnet1Subnet1B02D19A
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/wordpressVpc/DataSubnet1/RouteTableAssociation
  wordpressVpcDataSubnet2SubnetE26CF1D4:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 192.168.0.208/28
      VpcId:
        Ref: wordpressVpc34F9DE14
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Data
        - Key: aws-cdk:subnet-type
          Value: Isolated
        - Key: Name
          Value: AwsCdkWordpressStack/wordpressVpc/DataSubnet2
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/wordpressVpc/DataSubnet2/Subnet
  wordpressVpcDataSubnet2RouteTableA01DD5CF:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: wordpressVpc34F9DE14
      Tags:
        - Key: Name
          Value: AwsCdkWordpressStack/wordpressVpc/DataSubnet2
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/wordpressVpc/DataSubnet2/RouteTable
  wordpressVpcDataSubnet2RouteTableAssociationAC753376:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: wordpressVpcDataSubnet2RouteTableA01DD5CF
      SubnetId:
        Ref: wordpressVpcDataSubnet2SubnetE26CF1D4
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/wordpressVpc/DataSubnet2/RouteTableAssociation
  wordpressVpcIGWA3B3A6D2:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: AwsCdkWordpressStack/wordpressVpc
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/wordpressVpc/IGW
  wordpressVpcVPCGWEEF4891E:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: wordpressVpc34F9DE14
      InternetGatewayId:
        Ref: wordpressVpcIGWA3B3A6D2
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/wordpressVpc/VPCGW
  wordpressVpcSecretsManagerSecurityGroupC16BEC9B:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: AwsCdkWordpressStack/wordpressVpc/SecretsManager/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp:
            Fn::GetAtt:
              - wordpressVpc34F9DE14
              - CidrBlock
          Description:
            Fn::Join:
              - ""
              - - "from "
                - Fn::GetAtt:
                    - wordpressVpc34F9DE14
                    - CidrBlock
                - :443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      Tags:
        - Key: Name
          Value: AwsCdkWordpressStack/wordpressVpc
      VpcId:
        Ref: wordpressVpc34F9DE14
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/wordpressVpc/SecretsManager/SecurityGroup/Resource
  wordpressVpcSecretsManagerEFF690CC:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName:
        Fn::Join:
          - ""
          - - com.amazonaws.
            - Ref: AWS::Region
            - .secretsmanager
      VpcId:
        Ref: wordpressVpc34F9DE14
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - Fn::GetAtt:
            - wordpressVpcSecretsManagerSecurityGroupC16BEC9B
            - GroupId
      SubnetIds:
        - Ref: wordpressVpcApplicationSubnet1SubnetD2DD040E
        - Ref: wordpressVpcApplicationSubnet2Subnet1B825AA2
      VpcEndpointType: Interface
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/wordpressVpc/SecretsManager/Resource
  wordpressVpcS3GWEndpoint8247315E:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName:
        Fn::Join:
          - ""
          - - com.amazonaws.
            - Ref: AWS::Region
            - .s3
      VpcId:
        Ref: wordpressVpc34F9DE14
      RouteTableIds:
        - Ref: wordpressVpcApplicationSubnet1RouteTableE764099D
        - Ref: wordpressVpcApplicationSubnet2RouteTableC1527C09
      VpcEndpointType: Gateway
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/wordpressVpc/S3-GWEndpoint/Resource
  flowlogtocloudwatchIAMRole61847AA8:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/flowlog-to-cloudwatch/IAMRole/Resource
  flowlogtocloudwatchIAMRoleDefaultPolicy1205B60F:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - flowlogtocloudwatchLogGroup64BF3631
                - Arn
          - Action: iam:PassRole
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - flowlogtocloudwatchIAMRole61847AA8
                - Arn
        Version: "2012-10-17"
      PolicyName: flowlogtocloudwatchIAMRoleDefaultPolicy1205B60F
      Roles:
        - Ref: flowlogtocloudwatchIAMRole61847AA8
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/flowlog-to-cloudwatch/IAMRole/DefaultPolicy/Resource
  flowlogtocloudwatchLogGroup64BF3631:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Join:
          - ""
          - - /aws/vpc/
            - Ref: wordpressVpc34F9DE14
            - /
      RetentionInDays: 731
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/flowlog-to-cloudwatch/LogGroup/Resource
  flowlogtocloudwatchFlowLog78565CAC:
    Type: AWS::EC2::FlowLog
    Properties:
      ResourceId:
        Ref: wordpressVpc34F9DE14
      ResourceType: VPC
      TrafficType: ALL
      DeliverLogsPermissionArn:
        Fn::GetAtt:
          - flowlogtocloudwatchIAMRole61847AA8
          - Arn
      LogDestinationType: cloud-watch-logs
      LogGroupName:
        Ref: flowlogtocloudwatchLogGroup64BF3631
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/flowlog-to-cloudwatch/FlowLog
  WordpressLB5955CDA4:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: "false"
      Scheme: internet-facing
      SecurityGroups:
        - Fn::GetAtt:
            - WordpressLBSecurityGroupC2A65870
            - GroupId
      Subnets:
        - Ref: wordpressVpcPublicSubnet1Subnet283D0E8E
        - Ref: wordpressVpcPublicSubnet2Subnet8EDDAF0C
      Type: application
    DependsOn:
      - wordpressVpcPublicSubnet1DefaultRoute0223827F
      - wordpressVpcPublicSubnet2DefaultRoute928C1175
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/WordpressLB/Resource
  WordpressLBSecurityGroupC2A65870:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatically created Security Group for ELB AwsCdkWordpressStackWordpressLB74F39400
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Ref: wordpressVpc34F9DE14
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/WordpressLB/SecurityGroup/Resource
  WordpressLBSecurityGrouptoAwsCdkWordpressStackecssecuritygroupF0CE3B5D8080DE3E6BD9:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId:
        Fn::GetAtt:
          - WordpressLBSecurityGroupC2A65870
          - GroupId
      IpProtocol: tcp
      Description: Allow from Load Balancer to ECS
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - ecssecuritygroup15955C7F
          - GroupId
      FromPort: 8080
      ToPort: 8080
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/WordpressLB/SecurityGroup/to AwsCdkWordpressStackecssecuritygroupF0CE3B5D:8080
  WordpressLBHTTPListener83CB5B40:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: wordpress0B837705
          Type: forward
      LoadBalancerArn:
        Ref: WordpressLB5955CDA4
      Port: 80
      Protocol: HTTP
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/WordpressLB/HTTPListener/Resource
  wordpress0B837705:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Ref: wordpressVpc34F9DE14
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/wordpress/Resource
  efssecuritygroup2F4745D8:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: AwsCdkWordpressStack/efs-securitygroup
      SecurityGroupEgress:
        - CidrIp: 255.255.255.255/32
          Description: Disallow all traffic
          FromPort: 252
          IpProtocol: icmp
          ToPort: 86
      VpcId:
        Ref: wordpressVpc34F9DE14
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/efs-securitygroup/Resource
  efssecuritygroupfromAwsCdkWordpressStackecssecuritygroupF0CE3B5D2049E4182B08:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: allow EFS connectivity from Fargate
      FromPort: 2049
      GroupId:
        Fn::GetAtt:
          - efssecuritygroup2F4745D8
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - ecssecuritygroup15955C7F
          - GroupId
      ToPort: 2049
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/efs-securitygroup/from AwsCdkWordpressStackecssecuritygroupF0CE3B5D:2049
  ecssecuritygroup15955C7F:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: AwsCdkWordpressStack/ecs-securitygroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: wordpressVpc34F9DE14
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/ecs-securitygroup/Resource
  ecssecuritygroupfromAwsCdkWordpressStackWordpressLBSecurityGroup01EA338E8080303AD3E7:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Allow from Load Balancer to ECS
      FromPort: 8080
      GroupId:
        Fn::GetAtt:
          - ecssecuritygroup15955C7F
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - WordpressLBSecurityGroupC2A65870
          - GroupId
      ToPort: 8080
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/ecs-securitygroup/from AwsCdkWordpressStackWordpressLBSecurityGroup01EA338E:8080
  securitygroupforDBC9F7D6F3:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: AwsCdkWordpressStack/securitygroupforDB
      SecurityGroupEgress:
        - CidrIp: 255.255.255.255/32
          Description: Disallow all traffic
          FromPort: 252
          IpProtocol: icmp
          ToPort: 86
      VpcId:
        Ref: wordpressVpc34F9DE14
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/securitygroupforDB/Resource
  securitygroupforDBfromAwsCdkWordpressStackecssecuritygroupF0CE3B5D330669928B65:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Allow MySQL access from Fargate Service
      FromPort: 3306
      GroupId:
        Fn::GetAtt:
          - securitygroupforDBC9F7D6F3
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - ecssecuritygroup15955C7F
          - GroupId
      ToPort: 3306
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/securitygroupforDB/from AwsCdkWordpressStackecssecuritygroupF0CE3B5D:3306
  WordPressEfsFileSystem4CE5144D:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: true
      FileSystemTags:
        - Key: Name
          Value: AwsCdkWordpressStack/WordPressEfsFileSystem
      LifecyclePolicies:
        - TransitionToIA: AFTER_14_DAYS
      PerformanceMode: generalPurpose
    UpdateReplacePolicy: Snapshot
    DeletionPolicy: Snapshot
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/WordPressEfsFileSystem/Resource
  WordPressEfsFileSystemEfsMountTarget1D895773D:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: WordPressEfsFileSystem4CE5144D
      SecurityGroups:
        - Fn::GetAtt:
            - efssecuritygroup2F4745D8
            - GroupId
      SubnetId:
        Ref: wordpressVpcDataSubnet1Subnet1B02D19A
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/WordPressEfsFileSystem/EfsMountTarget1
  WordPressEfsFileSystemEfsMountTarget2C7112E3B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: WordPressEfsFileSystem4CE5144D
      SecurityGroups:
        - Fn::GetAtt:
            - efssecuritygroup2F4745D8
            - GroupId
      SubnetId:
        Ref: wordpressVpcDataSubnet2SubnetE26CF1D4
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/WordPressEfsFileSystem/EfsMountTarget2
  dbpasswordF577BF36:
    Type: AWS::SecretsManager::Secret
    Properties:
      GenerateSecretString:
        ExcludePunctuation: true
        GenerateStringKey: password
        IncludeSpace: false
        SecretStringTemplate: '{"username":"wordpressadmin"}'
      Name: auroraSecret
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/dbpassword/Resource
  dbpasswordAttachmentAAC83FE9:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId:
        Ref: dbpasswordF577BF36
      TargetId:
        Ref: DatabaseB269D8BB
      TargetType: AWS::RDS::DBCluster
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/dbpassword/Attachment/Resource
  auroradbsubnets:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: subnets for Aurora serverless cluster
      SubnetIds:
        - Ref: wordpressVpcDataSubnet1Subnet1B02D19A
        - Ref: wordpressVpcDataSubnet2SubnetE26CF1D4
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/auroradbsubnets/Default
  DatabaseB269D8BB:
    Type: AWS::RDS::DBCluster
    Properties:
      Engine: aurora-mysql
      DatabaseName: wordpress
      DBClusterParameterGroupName: default.aurora-mysql5.7
      DBSubnetGroupName:
        Ref: auroradbsubnets
      DeletionProtection: false
      EngineMode: serverless
      MasterUsername:
        Fn::Join:
          - ""
          - - "{{resolve:secretsmanager:"
            - Ref: dbpasswordF577BF36
            - :SecretString:username::}}
      MasterUserPassword:
        Fn::Join:
          - ""
          - - "{{resolve:secretsmanager:"
            - Ref: dbpasswordF577BF36
            - :SecretString:password::}}
      StorageEncrypted: true
      VpcSecurityGroupIds:
        - Fn::GetAtt:
            - securitygroupforDBC9F7D6F3
            - GroupId
    UpdateReplacePolicy: Snapshot
    DeletionPolicy: Snapshot
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/Database/Resource
  wordpresstaskroleE53570CC:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
      Description: Role that the api task definitions use to run the api code
      RoleName: task-role
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/wordpresstask-role/Resource
  wordpresstaskroleDefaultPolicyA26FB0FA:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - wordpresscontainerLogGroup7EE477AF
                - Arn
          - Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
            Effect: Allow
            Resource:
              Ref: dbpasswordF577BF36
        Version: "2012-10-17"
      PolicyName: wordpresstaskroleDefaultPolicyA26FB0FA
      Roles:
        - Ref: wordpresstaskroleE53570CC
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/wordpresstask-role/DefaultPolicy/Resource
  efsaccesspolicy74043068:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: elasticfilesystem:*
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - WordPressEfsFileSystem4CE5144D
                - Arn
        Version: "2012-10-17"
      PolicyName: efsaccesspolicy74043068
      Roles:
        - Ref: wordpresstaskroleE53570CC
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/efs-access-policy/Resource
  ecsaccesspolicy50603363:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr-public:GetAuthorizationToken
              - ecr:BatchGetImage
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: ecsaccesspolicy50603363
      Roles:
        - Ref: wordpresstaskroleE53570CC
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/ecs-access-policy/Resource
  fargatetask6F025111:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Environment:
            - Name: MARIADB_HOST
              Value:
                Fn::GetAtt:
                  - DatabaseB269D8BB
                  - Endpoint.Address
            - Name: WORDPRESS_DATABASE_NAME
              Value: wordpress
            - Name: PHP_MEMORY_LIMIT
              Value: 512M
            - Name: enabled
              Value: "false"
            - Name: ALLOW_EMPTY_PASSWORD
              Value: "no"
            - Name: WORDPRESS_TABLE_PREFIX
              Value: wp_
          Essential: true
          Image: public.ecr.aws/bitnami/wordpress:latest
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: wordpresscontainerLogGroup7EE477AF
              awslogs-stream-prefix: WordPressLogs
              awslogs-region:
                Ref: AWS::Region
          Memory: 512
          MountPoints:
            - ContainerPath: /var/www/html
              ReadOnly: false
              SourceVolume: wordpress-data
          Name: wordpress-container
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
          Secrets:
            - Name: WORDPRESS_DATABASE_PASSWORD
              ValueFrom:
                Fn::Join:
                  - ""
                  - - Ref: dbpasswordF577BF36
                    - ":password::"
            - Name: WORDPRESS_DATABASE_USER
              ValueFrom:
                Fn::Join:
                  - ""
                  - - Ref: dbpasswordF577BF36
                    - ":username::"
      Cpu: "256"
      ExecutionRoleArn:
        Fn::GetAtt:
          - wordpresstaskroleE53570CC
          - Arn
      Family: wordpress
      Memory: "2048"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::GetAtt:
          - wordpresstaskroleE53570CC
          - Arn
      Volumes:
        - Name: wordpress-data
          EfsVolumeConfiguration:
            TransitEncryption: ENABLED
            FileSystemId:
              Ref: WordPressEfsFileSystem4CE5144D
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/fargatetask/Resource
  wordpresscontainerLogGroup7EE477AF:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/wordpress-container/LogGroup/Resource
  ecscluster634CA5F6:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: WordPress
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/ecscluster/Resource
  fargateserviceService67E173A8:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: ecscluster634CA5F6
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 1
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: wordpress-container
          ContainerPort: 8080
          TargetGroupArn:
            Ref: wordpress0B837705
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::GetAtt:
                - ecssecuritygroup15955C7F
                - GroupId
          Subnets:
            - Ref: wordpressVpcApplicationSubnet1SubnetD2DD040E
            - Ref: wordpressVpcApplicationSubnet2Subnet1B825AA2
      ServiceName: wordpress
      TaskDefinition:
        Ref: fargatetask6F025111
    DependsOn:
      - WordpressLBHTTPListener83CB5B40
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/fargateservice/Service
  fargateserviceTaskCountTargetE6805FA1:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 3
      MinCapacity: 1
      ResourceId:
        Fn::Join:
          - ""
          - - service/
            - Ref: ecscluster634CA5F6
            - /
            - Fn::GetAtt:
                - fargateserviceService67E173A8
                - Name
      RoleARN:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":iam::"
            - Ref: AWS::AccountId
            - :role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/fargateservice/TaskCount/Target/Resource
  fargateserviceTaskCountTargetCpuScaling05DA2445:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: AwsCdkWordpressStackfargateserviceTaskCountTargetCpuScaling00E0327E
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: fargateserviceTaskCountTargetE6805FA1
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 50
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/fargateservice/TaskCount/Target/CpuScaling/Resource
  fargateserviceTaskCountTargetRequestScaling632FB8AC:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: AwsCdkWordpressStackfargateserviceTaskCountTargetRequestScalingAE3B71F3
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: fargateserviceTaskCountTargetE6805FA1
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ALBRequestCountPerTarget
          ResourceLabel:
            Fn::Join:
              - ""
              - - Fn::Select:
                    - 1
                    - Fn::Split:
                        - /
                        - Ref: WordpressLBHTTPListener83CB5B40
                - /
                - Fn::Select:
                    - 2
                    - Fn::Split:
                        - /
                        - Ref: WordpressLBHTTPListener83CB5B40
                - /
                - Fn::Select:
                    - 3
                    - Fn::Split:
                        - /
                        - Ref: WordpressLBHTTPListener83CB5B40
                - /
                - Fn::GetAtt:
                    - wordpress0B837705
                    - TargetGroupFullName
        TargetValue: 10000
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/fargateservice/TaskCount/Target/RequestScaling/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAAE2VTwY7iMAz9lrmHLHDaK8MwI6TZVUXRXFcmNd0MaVIlKQih/vs6SWkDe4r98vz67LhLPufzmRV8OX+Bi5uJ6jRT8sBvpQdxYgT9uaFY8ttXK9j6qL+KNSusPIPHsjto9AGcop3pPO7hoHDCJ2zlnBESvDR6JLOiOygpJonNtgjHb/Af9JELXEO21R4tETKInAzZypPXvw1qzyLvCALJ7kZXrZEElig6K/31w5qujb6eAdIa2YNoLvCuzOXT1IGZhQ8qm9qic//BWx3xnklo+G1n0lziWRhqO3aSop4pUzt+I/XR1z3uGSpwXgploDqAAi2krs/0LKu2peI40k+6e413aFNxluc86TzqgXOPs/s92JomffeQpWTjSA7fpcLySoVNnMhD9st02qeSnjkUFr1rQEONlnYq5sOQQpSORM9ecSQ83/TMVmQgLcvo8O01B0q0Z7SKpr5WHdmyiTIk1IIILZAwhK10pzc8Si3vO/mMGO1B0oBybJK9h4Nc+LQUafWHsBT0ArT6QXcdZtMzmEYNnTeOGPSY1NVIDU1HkUckHXtLPyYVlKluWqMHoO/ZDp3pbLKTx9RTFTvpmTYV8m/347z4yRdLvnj5dlLOLNmUDfJdOv8ByQCTFyMEAAA=
    Metadata:
      aws:cdk:path: AwsCdkWordpressStack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store.
Rules:
  CheckBootstrapVersion:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::Contains:
                - - "1"
                  - "2"
                  - "3"
                  - "4"
                  - "5"
                - Ref: BootstrapVersion
        AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.

