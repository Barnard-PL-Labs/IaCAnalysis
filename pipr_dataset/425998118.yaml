Resources:
  myAPILambdaFunctionServiceRoleF245C0CC:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  Fn::Join:
                    - ""
                    - - "arn:"
                      - Ref: AWS::Partition
                      - ":logs:"
                      - Ref: AWS::Region
                      - ":"
                      - Ref: AWS::AccountId
                      - :log-group:/aws/lambda/*
            Version: "2012-10-17"
          PolicyName: LambdaFunctionServiceRolePolicy
      Tags:
        - Key: application
          Value: reviews-api
    Metadata:
      aws:cdk:path: ReviewsApiStack/myAPI/LambdaFunctionServiceRole/Resource
  myAPILambdaFunctionServiceRoleDefaultPolicyEA2539A3:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - xray:PutTraceSegments
              - xray:PutTelemetryRecords
            Effect: Allow
            Resource: "*"
          - Action:
              - sqs:SendMessage
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - asyncqueue6DC8B2C5
                - Arn
        Version: "2012-10-17"
      PolicyName: myAPILambdaFunctionServiceRoleDefaultPolicyEA2539A3
      Roles:
        - Ref: myAPILambdaFunctionServiceRoleF245C0CC
    Metadata:
      aws:cdk:path: ReviewsApiStack/myAPI/LambdaFunctionServiceRole/DefaultPolicy/Resource
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.
  myAPILambdaFunctionD821657E:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 3a008c617bc647e6a3137b1f3fce0b6ca984b1587fa9e628da2f9dab6879745c.zip
      Role:
        Fn::GetAtt:
          - myAPILambdaFunctionServiceRoleF245C0CC
          - Arn
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          SQS_QUEUE_URL:
            Ref: asyncqueue6DC8B2C5
      Handler: index.handler
      Runtime: nodejs14.x
      Tags:
        - Key: application
          Value: reviews-api
      TracingConfig:
        Mode: Active
    DependsOn:
      - myAPILambdaFunctionServiceRoleDefaultPolicyEA2539A3
      - myAPILambdaFunctionServiceRoleF245C0CC
    Metadata:
      aws:cdk:path: ReviewsApiStack/myAPI/LambdaFunction/Resource
      aws:asset:path: asset.3a008c617bc647e6a3137b1f3fce0b6ca984b1587fa9e628da2f9dab6879745c
      aws:asset:is-bundled: false
      aws:asset:property: Code
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.
          - id: W89
            reason: This is not a rule for the general case, just for specific use cases/industries
          - id: W92
            reason: Impossible for us to define the correct concurrency for clients
  myAPIApiAccessLogGroupFF8859FB:
    Type: AWS::Logs::LogGroup
    Properties:
      Tags:
        - Key: application
          Value: reviews-api
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: ReviewsApiStack/myAPI/ApiAccessLogGroup/Resource
      cfn_nag:
        rules_to_suppress:
          - id: W86
            reason: Retention period for CloudWatchLogs LogGroups are set to 'Never Expire' to preserve customer data indefinitely
          - id: W84
            reason: By default CloudWatchLogs LogGroups data is encrypted using the CloudWatch server-side encryption keys (AWS Managed Keys)
  myAPILambdaRestApiD3F34BEF:
    Type: AWS::ApiGateway::RestApi
    Properties:
      EndpointConfiguration:
        Types:
          - EDGE
      Name: LambdaRestApi
      Tags:
        - Key: application
          Value: reviews-api
    Metadata:
      aws:cdk:path: ReviewsApiStack/myAPI/LambdaRestApi/Resource
  myAPILambdaRestApiDeploymentDAEF56E5b2cf12b5f25c686f381109f07b9087a0:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:
        Ref: myAPILambdaRestApiD3F34BEF
      Description: Automatically created by the RestApi construct
    DependsOn:
      - myAPILambdaRestApireviewsPOST497E8C2C
      - myAPILambdaRestApireviews0F667779
    Metadata:
      aws:cdk:path: ReviewsApiStack/myAPI/LambdaRestApi/Deployment/Resource
      cfn_nag:
        rules_to_suppress:
          - id: W45
            reason: ApiGateway has AccessLogging enabled in AWS::ApiGateway::Stage resource, but cfn_nag checkes for it in AWS::ApiGateway::Deployment resource
  myAPILambdaRestApiDeploymentStageprodD83699E2:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId:
        Ref: myAPILambdaRestApiD3F34BEF
      AccessLogSetting:
        DestinationArn:
          Fn::GetAtt:
            - myAPIApiAccessLogGroupFF8859FB
            - Arn
        Format: '{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","user":"$context.identity.user","caller":"$context.identity.caller","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath","status":"$context.status","protocol":"$context.protocol","responseLength":"$context.responseLength"}'
      DeploymentId:
        Ref: myAPILambdaRestApiDeploymentDAEF56E5b2cf12b5f25c686f381109f07b9087a0
      MethodSettings:
        - DataTraceEnabled: false
          HttpMethod: "*"
          LoggingLevel: INFO
          ResourcePath: /*
      StageName: prod
      Tags:
        - Key: application
          Value: reviews-api
      TracingEnabled: true
    Metadata:
      aws:cdk:path: ReviewsApiStack/myAPI/LambdaRestApi/DeploymentStage.prod/Resource
  myAPILambdaRestApireviews0F667779:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
          - myAPILambdaRestApiD3F34BEF
          - RootResourceId
      PathPart: reviews
      RestApiId:
        Ref: myAPILambdaRestApiD3F34BEF
    Metadata:
      aws:cdk:path: ReviewsApiStack/myAPI/LambdaRestApi/Default/reviews/Resource
  myAPILambdaRestApireviewsPOSTApiPermissionReviewsApiStackmyAPILambdaRestApi2C8403A0POSTreviews3DA3C660:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - myAPILambdaFunctionD821657E
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: myAPILambdaRestApiD3F34BEF
            - /
            - Ref: myAPILambdaRestApiDeploymentStageprodD83699E2
            - /POST/reviews
    Metadata:
      aws:cdk:path: ReviewsApiStack/myAPI/LambdaRestApi/Default/reviews/POST/ApiPermission.ReviewsApiStackmyAPILambdaRestApi2C8403A0.POST..reviews
  myAPILambdaRestApireviewsPOSTApiPermissionTestReviewsApiStackmyAPILambdaRestApi2C8403A0POSTreviewsFA93E87E:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - myAPILambdaFunctionD821657E
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: myAPILambdaRestApiD3F34BEF
            - /test-invoke-stage/POST/reviews
    Metadata:
      aws:cdk:path: ReviewsApiStack/myAPI/LambdaRestApi/Default/reviews/POST/ApiPermission.Test.ReviewsApiStackmyAPILambdaRestApi2C8403A0.POST..reviews
  myAPILambdaRestApireviewsPOST497E8C2C:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId:
        Ref: myAPILambdaRestApireviews0F667779
      RestApiId:
        Ref: myAPILambdaRestApiD3F34BEF
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Ref: myAPICognitoAuthorizer89035BDA
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                  - myAPILambdaFunctionD821657E
                  - Arn
              - /invocations
    Metadata:
      aws:cdk:path: ReviewsApiStack/myAPI/LambdaRestApi/Default/reviews/POST/Resource
  myAPILambdaRestApiUsagePlan8C2BDD1C:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
        - ApiId:
            Ref: myAPILambdaRestApiD3F34BEF
          Stage:
            Ref: myAPILambdaRestApiDeploymentStageprodD83699E2
          Throttle: {}
      Tags:
        - Key: application
          Value: reviews-api
    Metadata:
      aws:cdk:path: ReviewsApiStack/myAPI/LambdaRestApi/UsagePlan/Resource
  myAPILambdaRestApiCloudWatchRole02C50E32:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:FilterLogEvents
                Effect: Allow
                Resource:
                  Fn::Join:
                    - ""
                    - - "arn:"
                      - Ref: AWS::Partition
                      - ":logs:"
                      - Ref: AWS::Region
                      - ":"
                      - Ref: AWS::AccountId
                      - :*
            Version: "2012-10-17"
          PolicyName: LambdaRestApiCloudWatchRolePolicy
      Tags:
        - Key: application
          Value: reviews-api
    Metadata:
      aws:cdk:path: ReviewsApiStack/myAPI/LambdaRestApiCloudWatchRole/Resource
  myAPILambdaRestApiAccountA81474BB:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn:
        Fn::GetAtt:
          - myAPILambdaRestApiCloudWatchRole02C50E32
          - Arn
    DependsOn:
      - myAPILambdaRestApiD3F34BEF
    Metadata:
      aws:cdk:path: ReviewsApiStack/myAPI/LambdaRestApiAccount
  myAPICognitoUserPool6F1DBD37:
    Type: AWS::Cognito::UserPool
    Properties:
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_phone_number
            Priority: 1
          - Name: verified_email
            Priority: 2
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      EmailVerificationMessage: The verification code to your new account is {####}
      EmailVerificationSubject: Verify your new account
      SmsVerificationMessage: The verification code to your new account is {####}
      UserPoolAddOns:
        AdvancedSecurityMode: ENFORCED
      UserPoolTags:
        application: reviews-api
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
        EmailMessage: The verification code to your new account is {####}
        EmailSubject: Verify your new account
        SmsMessage: The verification code to your new account is {####}
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: ReviewsApiStack/myAPI/CognitoUserPool/Resource
  myAPICognitoUserPoolClientBB5F402C:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId:
        Ref: myAPICognitoUserPool6F1DBD37
      AllowedOAuthFlows:
        - implicit
        - code
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - profile
        - phone
        - email
        - openid
        - aws.cognito.signin.user.admin
      CallbackURLs:
        - https://example.com
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_CUSTOM_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      SupportedIdentityProviders:
        - COGNITO
    Metadata:
      aws:cdk:path: ReviewsApiStack/myAPI/CognitoUserPoolClient/Resource
  myAPICognitoAuthorizer89035BDA:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: authorizer
      RestApiId:
        Ref: myAPILambdaRestApiD3F34BEF
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      ProviderARNs:
        - Fn::GetAtt:
            - myAPICognitoUserPool6F1DBD37
            - Arn
    Metadata:
      aws:cdk:path: ReviewsApiStack/myAPI/CognitoAuthorizer
  asyncqueuedeadLetterQueueCFBD7F04:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: alias/aws/sqs
      Tags:
        - Key: application
          Value: reviews-api
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: ReviewsApiStack/async-queue/deadLetterQueue/Resource
  asyncqueuedeadLetterQueuePolicy8FBC0B33:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - sqs:DeleteMessage
              - sqs:ReceiveMessage
              - sqs:SendMessage
              - sqs:GetQueueAttributes
              - sqs:RemovePermission
              - sqs:AddPermission
              - sqs:SetQueueAttributes
            Effect: Allow
            Principal:
              AWS:
                Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":iam::"
                    - Ref: AWS::AccountId
                    - :root
            Resource:
              Fn::GetAtt:
                - asyncqueuedeadLetterQueueCFBD7F04
                - Arn
            Sid: QueueOwnerOnlyAccess
          - Action: SQS:*
            Condition:
              Bool:
                aws:SecureTransport: "false"
            Effect: Deny
            Principal:
              AWS: "*"
            Resource:
              Fn::GetAtt:
                - asyncqueuedeadLetterQueueCFBD7F04
                - Arn
            Sid: HttpsOnly
        Version: "2012-10-17"
      Queues:
        - Ref: asyncqueuedeadLetterQueueCFBD7F04
    Metadata:
      aws:cdk:path: ReviewsApiStack/async-queue/deadLetterQueue/Policy/Resource
  asyncqueue6DC8B2C5:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: alias/aws/sqs
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
            - asyncqueuedeadLetterQueueCFBD7F04
            - Arn
        maxReceiveCount: 15
      Tags:
        - Key: application
          Value: reviews-api
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: ReviewsApiStack/async-queue/queue/Resource
  asyncqueuePolicy8F249FC2:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - sqs:DeleteMessage
              - sqs:ReceiveMessage
              - sqs:SendMessage
              - sqs:GetQueueAttributes
              - sqs:RemovePermission
              - sqs:AddPermission
              - sqs:SetQueueAttributes
            Effect: Allow
            Principal:
              AWS:
                Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":iam::"
                    - Ref: AWS::AccountId
                    - :root
            Resource:
              Fn::GetAtt:
                - asyncqueue6DC8B2C5
                - Arn
            Sid: QueueOwnerOnlyAccess
          - Action: SQS:*
            Condition:
              Bool:
                aws:SecureTransport: "false"
            Effect: Deny
            Principal:
              AWS: "*"
            Resource:
              Fn::GetAtt:
                - asyncqueue6DC8B2C5
                - Arn
            Sid: HttpsOnly
        Version: "2012-10-17"
      Queues:
        - Ref: asyncqueue6DC8B2C5
    Metadata:
      aws:cdk:path: ReviewsApiStack/async-queue/queue/Policy/Resource
  sqstolambdaLambdaFunctionServiceRole9BAA7383:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  Fn::Join:
                    - ""
                    - - "arn:"
                      - Ref: AWS::Partition
                      - ":logs:"
                      - Ref: AWS::Region
                      - ":"
                      - Ref: AWS::AccountId
                      - :log-group:/aws/lambda/*
            Version: "2012-10-17"
          PolicyName: LambdaFunctionServiceRolePolicy
      Tags:
        - Key: application
          Value: reviews-api
    Metadata:
      aws:cdk:path: ReviewsApiStack/sqs-to-lambda/LambdaFunctionServiceRole/Resource
  sqstolambdaLambdaFunctionServiceRoleDefaultPolicy6F9F2C74:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - xray:PutTraceSegments
              - xray:PutTelemetryRecords
            Effect: Allow
            Resource: "*"
          - Action:
              - sqs:ReceiveMessage
              - sqs:ChangeMessageVisibility
              - sqs:GetQueueUrl
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - asyncqueue6DC8B2C5
                - Arn
          - Action:
              - dynamodb:BatchGetItem
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:Query
              - dynamodb:GetItem
              - dynamodb:Scan
              - dynamodb:ConditionCheckItem
              - dynamodb:BatchWriteItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
              - dynamodb:DescribeTable
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - lambdatodynamoDynamoTable30F166FF
                  - Arn
              - Ref: AWS::NoValue
        Version: "2012-10-17"
      PolicyName: sqstolambdaLambdaFunctionServiceRoleDefaultPolicy6F9F2C74
      Roles:
        - Ref: sqstolambdaLambdaFunctionServiceRole9BAA7383
    Metadata:
      aws:cdk:path: ReviewsApiStack/sqs-to-lambda/LambdaFunctionServiceRole/DefaultPolicy/Resource
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.
  sqstolambdaLambdaFunctionEE8CA8FB:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 165696faad869fec5c3dce8ad01fad791e7e49d929171225a0706ce2c6fe4161.zip
      Role:
        Fn::GetAtt:
          - sqstolambdaLambdaFunctionServiceRole9BAA7383
          - Arn
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          DDB_TABLE_NAME:
            Ref: lambdatodynamoDynamoTable30F166FF
      Handler: index.handler
      Runtime: nodejs14.x
      Tags:
        - Key: application
          Value: reviews-api
      TracingConfig:
        Mode: Active
    DependsOn:
      - sqstolambdaLambdaFunctionServiceRoleDefaultPolicy6F9F2C74
      - sqstolambdaLambdaFunctionServiceRole9BAA7383
    Metadata:
      aws:cdk:path: ReviewsApiStack/sqs-to-lambda/LambdaFunction/Resource
      aws:asset:path: asset.165696faad869fec5c3dce8ad01fad791e7e49d929171225a0706ce2c6fe4161
      aws:asset:is-bundled: false
      aws:asset:property: Code
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.
          - id: W89
            reason: This is not a rule for the general case, just for specific use cases/industries
          - id: W92
            reason: Impossible for us to define the correct concurrency for clients
  sqstolambdaLambdaFunctionSqsEventSourceReviewsApiStackasyncqueueFF21BCB0436392DE:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      FunctionName:
        Ref: sqstolambdaLambdaFunctionEE8CA8FB
      EventSourceArn:
        Fn::GetAtt:
          - asyncqueue6DC8B2C5
          - Arn
    Metadata:
      aws:cdk:path: ReviewsApiStack/sqs-to-lambda/LambdaFunction/SqsEventSource:ReviewsApiStackasyncqueueFF21BCB0/Resource
  lambdatodynamoDynamoTable30F166FF:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: application
          Value: reviews-api
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: ReviewsApiStack/lambda-to-dynamo/DynamoTable/Resource
  myDashboard8333D227:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardBody:
        Fn::Join:
          - ""
          - - '{"widgets":[{"type":"metric","width":24,"height":6,"x":0,"y":0,"properties":{"view":"timeSeries","title":"API Requests","region":"'
            - Ref: AWS::Region
            - '","metrics":[["AWS/ApiGateway","Count","ApiName","LambdaRestApi",{"label":"Total API Requests","period":60,"stat":"Sum"}]],"yAxis":{}}},{"type":"metric","width":12,"height":6,"x":0,"y":6,"properties":{"view":"timeSeries","title":"Lambda Duration","region":"'
            - Ref: AWS::Region
            - '","metrics":[["AWS/Lambda","Duration","FunctionName","'
            - Ref: sqstolambdaLambdaFunctionEE8CA8FB
            - '",{"label":"SQS to Lambda P99","period":60,"stat":"p99"}]],"annotations":{"horizontal":[{"label":"SQS to Lambda P99 >= 500 for 1 datapoints within 1 minute","value":500,"yAxis":"left"}]},"yAxis":{}}},{"type":"metric","width":12,"height":6,"x":12,"y":6,"properties":{"view":"timeSeries","title":"API Latency","region":"'
            - Ref: AWS::Region
            - '","metrics":[["AWS/ApiGateway","Latency","ApiName","LambdaRestApi",{"label":"API Latency P99","period":60,"stat":"p99"}]],"annotations":{"horizontal":[{"label":"API Latency P99 >= 1000 for 1 datapoints within 1 minute","value":1000,"yAxis":"left"}]},"yAxis":{}}}]}'
    Metadata:
      aws:cdk:path: ReviewsApiStack/myDashboard/Resource
  lambdadurationalarm801E2674:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      AlarmDescription: Alarm if P99 is over 500 ms
      Metrics:
        - Id: m1
          Label: SQS to Lambda P99
          MetricStat:
            Metric:
              Dimensions:
                - Name: FunctionName
                  Value:
                    Ref: sqstolambdaLambdaFunctionEE8CA8FB
              MetricName: Duration
              Namespace: AWS/Lambda
            Period: 60
            Stat: p99
          ReturnData: true
      Threshold: 500
    Metadata:
      aws:cdk:path: ReviewsApiStack/lambda-duration-alarm/Resource
  apigatewayalarmA697994E:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      AlarmDescription: Alarm if P99 is over 1000 ms
      Metrics:
        - Id: m1
          Label: API Latency P99
          MetricStat:
            Metric:
              Dimensions:
                - Name: ApiName
                  Value: LambdaRestApi
              MetricName: Latency
              Namespace: AWS/ApiGateway
            Period: 60
            Stat: p99
          ReturnData: true
      Threshold: 1000
    Metadata:
      aws:cdk:path: ReviewsApiStack/api-gateway-alarm/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/21TwXLjIAz9lt4x3bSzMz2uk+z20s6mSXruEEwdGoxcBM1kGf/7CrAn6bQX8/QkhKQn3/A4u+M/rsQRK9kcKqN3PG68kAdG1EvUouNxDUaxxavN5wqMlqdkFjQwI7pdI3j8E6z0GmzyXeKVcp1GTNbvD2X9BoKT6lH0vbZtCvjKDgxvXwSi8sjrdJDN50EelJ8LVMxAizw+QHvvIPQpx4QHJnrdCq+O4kQRubS1Ql/3OrcwwqXqDZw6ejexFxb13uZmC6D4XFd+dTLGRAU/Kr+HJlEjeka6uDIi9/7JqKWEUF6sA8U6/U+5gUlorfbA4zMqtwIw5eKIJ7Aweqz2M0OjeqdZPAUVcmEF5O9ZqgtzYM3Jig4aEnordkXZDKgSA6E5Ci/3PC4F7ncgXG7tbNRGuC53kMAwsCxPGtYo5t/g++C/nxXhBdhGp80Y2E/au19p8RBMSBStIH28C9LjdXLEcTTVWdNq3LZF8WyB1Lwvri0UuceFrGIaTKG2sHnHc+MTuczEcp5nOGWmyCkTtWehUfwNrz/oN5nd8NnVG2pdOZJRd4qvy/kfH4bp20YDAAA=
    Metadata:
      aws:cdk:path: ReviewsApiStack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Outputs:
  myAPILambdaRestApiEndpoint7C09AD6B:
    Value:
      Fn::Join:
        - ""
        - - https://
          - Ref: myAPILambdaRestApiD3F34BEF
          - .execute-api.
          - Ref: AWS::Region
          - "."
          - Ref: AWS::URLSuffix
          - /
          - Ref: myAPILambdaRestApiDeploymentStageprodD83699E2
          - /
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
Rules:
  CheckBootstrapVersion:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::Contains:
                - - "1"
                  - "2"
                  - "3"
                  - "4"
                  - "5"
                - Ref: BootstrapVersion
        AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.

