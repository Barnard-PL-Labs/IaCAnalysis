Resources:
  armyspotyBB6BCCBC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: VscodeSpotyArmyStack/armyspoty
    Metadata:
      aws:cdk:path: VscodeSpotyArmyStack/armyspoty/Resource
  armyspotypublicSubnet1Subnet9A5B8A92:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      VpcId:
        Ref: armyspotyBB6BCCBC
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: VscodeSpotyArmyStack/armyspoty/publicSubnet1
    Metadata:
      aws:cdk:path: VscodeSpotyArmyStack/armyspoty/publicSubnet1/Subnet
  armyspotypublicSubnet1RouteTableD57180BD:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: armyspotyBB6BCCBC
      Tags:
        - Key: Name
          Value: VscodeSpotyArmyStack/armyspoty/publicSubnet1
    Metadata:
      aws:cdk:path: VscodeSpotyArmyStack/armyspoty/publicSubnet1/RouteTable
  armyspotypublicSubnet1RouteTableAssociation41E2A392:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: armyspotypublicSubnet1RouteTableD57180BD
      SubnetId:
        Ref: armyspotypublicSubnet1Subnet9A5B8A92
    Metadata:
      aws:cdk:path: VscodeSpotyArmyStack/armyspoty/publicSubnet1/RouteTableAssociation
  armyspotypublicSubnet1DefaultRouteF7F0220F:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: armyspotypublicSubnet1RouteTableD57180BD
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: armyspotyIGW28B944BD
    DependsOn:
      - armyspotyVPCGW7D1D80EB
    Metadata:
      aws:cdk:path: VscodeSpotyArmyStack/armyspoty/publicSubnet1/DefaultRoute
  armyspotypublicSubnet2Subnet88B42125:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      VpcId:
        Ref: armyspotyBB6BCCBC
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: VscodeSpotyArmyStack/armyspoty/publicSubnet2
    Metadata:
      aws:cdk:path: VscodeSpotyArmyStack/armyspoty/publicSubnet2/Subnet
  armyspotypublicSubnet2RouteTable35182065:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: armyspotyBB6BCCBC
      Tags:
        - Key: Name
          Value: VscodeSpotyArmyStack/armyspoty/publicSubnet2
    Metadata:
      aws:cdk:path: VscodeSpotyArmyStack/armyspoty/publicSubnet2/RouteTable
  armyspotypublicSubnet2RouteTableAssociation652CDE56:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: armyspotypublicSubnet2RouteTable35182065
      SubnetId:
        Ref: armyspotypublicSubnet2Subnet88B42125
    Metadata:
      aws:cdk:path: VscodeSpotyArmyStack/armyspoty/publicSubnet2/RouteTableAssociation
  armyspotypublicSubnet2DefaultRoute7F46C857:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: armyspotypublicSubnet2RouteTable35182065
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: armyspotyIGW28B944BD
    DependsOn:
      - armyspotyVPCGW7D1D80EB
    Metadata:
      aws:cdk:path: VscodeSpotyArmyStack/armyspoty/publicSubnet2/DefaultRoute
  armyspotyIGW28B944BD:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: VscodeSpotyArmyStack/armyspoty
    Metadata:
      aws:cdk:path: VscodeSpotyArmyStack/armyspoty/IGW
  armyspotyVPCGW7D1D80EB:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: armyspotyBB6BCCBC
      InternetGatewayId:
        Ref: armyspotyIGW28B944BD
    Metadata:
      aws:cdk:path: VscodeSpotyArmyStack/armyspoty/VPCGW
  oneNodeEcsLogGroupA7EA704A:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: VscodeSpotyArmyStack/oneNodeEcsLogGroup/Resource
  spotASGInstanceSecurityGroup5AC91F2A:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: VscodeSpotyArmyStack/spotASG/InstanceSecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: from 0.0.0.0/0:80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      Tags:
        - Key: Name
          Value: VscodeSpotyArmyStack/spotASG
      VpcId:
        Ref: armyspotyBB6BCCBC
    Metadata:
      aws:cdk:path: VscodeSpotyArmyStack/spotASG/InstanceSecurityGroup/Resource
  spotASGInstanceRoleC56DF034:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - ec2.
                    - Ref: AWS::URLSuffix
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AmazonSSMManagedInstanceCore
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Tags:
        - Key: Name
          Value: VscodeSpotyArmyStack/spotASG
    Metadata:
      aws:cdk:path: VscodeSpotyArmyStack/spotASG/InstanceRole/Resource
  spotASGInstanceRoleDefaultPolicy8D524415:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecs:DeregisterContainerInstance
              - ecs:RegisterContainerInstance
              - ecs:Submit*
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - oneNodeEcsClusterD35750A6
                - Arn
          - Action:
              - ecs:Poll
              - ecs:StartTelemetrySession
            Condition:
              ArnEquals:
                ecs:cluster:
                  Fn::GetAtt:
                    - oneNodeEcsClusterD35750A6
                    - Arn
            Effect: Allow
            Resource: "*"
          - Action:
              - ecs:DiscoverPollEndpoint
              - ecr:GetAuthorizationToken
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: spotASGInstanceRoleDefaultPolicy8D524415
      Roles:
        - Ref: spotASGInstanceRoleC56DF034
    Metadata:
      aws:cdk:path: VscodeSpotyArmyStack/spotASG/InstanceRole/DefaultPolicy/Resource
  spotASGInstanceProfile83C20597:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: spotASGInstanceRoleC56DF034
    Metadata:
      aws:cdk:path: VscodeSpotyArmyStack/spotASG/InstanceProfile
  spotASGLaunchConfig5C472031:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        Ref: SsmParameterValueawsservicebottlerocketawsecs1arm64110imageidC96584B6F00A464EAD1953AFF4B05118Parameter
      InstanceType: t4g.medium
      IamInstanceProfile:
        Ref: spotASGInstanceProfile83C20597
      SecurityGroups:
        - Fn::GetAtt:
            - spotASGInstanceSecurityGroup5AC91F2A
            - GroupId
      SpotPrice: "0.0130"
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - |-
                #!/bin/bash
                [settings.ecs]
                cluster = "
              - Ref: oneNodeEcsClusterD35750A6
              - '"'
    DependsOn:
      - spotASGInstanceRoleDefaultPolicy8D524415
      - spotASGInstanceRoleC56DF034
    Metadata:
      aws:cdk:path: VscodeSpotyArmyStack/spotASG/LaunchConfig
  spotASGD84E725E:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MaxSize: "1"
      MinSize: "1"
      DesiredCapacity: "1"
      LaunchConfigurationName:
        Ref: spotASGLaunchConfig5C472031
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: VscodeSpotyArmyStack/spotASG
      VPCZoneIdentifier:
        - Ref: armyspotypublicSubnet1Subnet9A5B8A92
        - Ref: armyspotypublicSubnet2Subnet88B42125
    UpdatePolicy:
      AutoScalingRollingUpdate:
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: true
    Metadata:
      aws:cdk:path: VscodeSpotyArmyStack/spotASG/ASG
  spotASGDrainECSHookFunctionServiceRole593B4C1A:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Name
          Value: VscodeSpotyArmyStack/spotASG
    Metadata:
      aws:cdk:path: VscodeSpotyArmyStack/spotASG/DrainECSHook/Function/ServiceRole/Resource
  spotASGDrainECSHookFunctionServiceRoleDefaultPolicyA49D2168:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ec2:DescribeInstances
              - ec2:DescribeInstanceAttribute
              - ec2:DescribeInstanceStatus
              - ec2:DescribeHosts
            Effect: Allow
            Resource: "*"
          - Action: autoscaling:CompleteLifecycleAction
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":autoscaling:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :autoScalingGroup:*:autoScalingGroupName/
                  - Ref: spotASGD84E725E
          - Action:
              - ecs:DescribeContainerInstances
              - ecs:DescribeTasks
            Condition:
              ArnEquals:
                ecs:cluster:
                  Fn::GetAtt:
                    - oneNodeEcsClusterD35750A6
                    - Arn
            Effect: Allow
            Resource: "*"
          - Action:
              - ecs:ListContainerInstances
              - ecs:SubmitContainerStateChange
              - ecs:SubmitTaskStateChange
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - oneNodeEcsClusterD35750A6
                - Arn
          - Action:
              - ecs:UpdateContainerInstancesState
              - ecs:ListTasks
            Condition:
              ArnEquals:
                ecs:cluster:
                  Fn::GetAtt:
                    - oneNodeEcsClusterD35750A6
                    - Arn
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: spotASGDrainECSHookFunctionServiceRoleDefaultPolicyA49D2168
      Roles:
        - Ref: spotASGDrainECSHookFunctionServiceRole593B4C1A
    Metadata:
      aws:cdk:path: VscodeSpotyArmyStack/spotASG/DrainECSHook/Function/ServiceRole/DefaultPolicy/Resource
  spotASGDrainECSHookFunctionD15E3C69:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3, json, os, time

          ecs = boto3.client('ecs')
          autoscaling = boto3.client('autoscaling')


          def lambda_handler(event, context):
            print(json.dumps(event))
            cluster = os.environ['CLUSTER']
            snsTopicArn = event['Records'][0]['Sns']['TopicArn']
            lifecycle_event = json.loads(event['Records'][0]['Sns']['Message'])
            instance_id = lifecycle_event.get('EC2InstanceId')
            if not instance_id:
              print('Got event without EC2InstanceId: %s', json.dumps(event))
              return

            instance_arn = container_instance_arn(cluster, instance_id)
            print('Instance %s has container instance ARN %s' % (lifecycle_event['EC2InstanceId'], instance_arn))

            if not instance_arn:
              return

            task_arns = container_instance_task_arns(cluster, instance_arn)
            
            if task_arns:
              print('Instance ARN %s has task ARNs %s' % (instance_arn, ', '.join(task_arns)))

            while has_tasks(cluster, instance_arn, task_arns):
              time.sleep(10)

            try:
              print('Terminating instance %s' % instance_id)
              autoscaling.complete_lifecycle_action(
                  LifecycleActionResult='CONTINUE',
                  **pick(lifecycle_event, 'LifecycleHookName', 'LifecycleActionToken', 'AutoScalingGroupName'))
            except Exception as e:
              # Lifecycle action may have already completed.
              print(str(e))


          def container_instance_arn(cluster, instance_id):
            """Turn an instance ID into a container instance ARN."""
            arns = ecs.list_container_instances(cluster=cluster, filter='ec2InstanceId==' + instance_id)['containerInstanceArns']
            if not arns:
              return None
            return arns[0]

          def container_instance_task_arns(cluster, instance_arn):
            """Fetch tasks for a container instance ARN."""
            arns = ecs.list_tasks(cluster=cluster, containerInstance=instance_arn)['taskArns']
            return arns

          def has_tasks(cluster, instance_arn, task_arns):
            """Return True if the instance is running tasks for the given cluster."""
            instances = ecs.describe_container_instances(cluster=cluster, containerInstances=[instance_arn])['containerInstances']
            if not instances:
              return False
            instance = instances[0]

            if instance['status'] == 'ACTIVE':
              # Start draining, then try again later
              set_container_instance_to_draining(cluster, instance_arn)
              return True

            task_count = None

            if task_arns:
              # Fetch details for tasks running on the container instance
              tasks = ecs.describe_tasks(cluster=cluster, tasks=task_arns)['tasks']
              if tasks:
                # Consider any non-stopped tasks as running
                task_count = sum(task['lastStatus'] != 'STOPPED' for task in tasks) + instance['pendingTasksCount']
            
            if not task_count:
              # Fallback to instance task counts if detailed task information is unavailable
              task_count = instance['runningTasksCount'] + instance['pendingTasksCount']
              
            print('Instance %s has %s tasks' % (instance_arn, task_count))

            return task_count > 0

          def set_container_instance_to_draining(cluster, instance_arn):
            ecs.update_container_instances_state(
                cluster=cluster,
                containerInstances=[instance_arn], status='DRAINING')


          def pick(dct, *keys):
            """Pick a subset of a dict."""
            return {k: v for k, v in dct.items() if k in keys}
      Role:
        Fn::GetAtt:
          - spotASGDrainECSHookFunctionServiceRole593B4C1A
          - Arn
      Environment:
        Variables:
          CLUSTER:
            Ref: oneNodeEcsClusterD35750A6
      Handler: index.lambda_handler
      Runtime: python3.6
      Tags:
        - Key: Name
          Value: VscodeSpotyArmyStack/spotASG
      Timeout: 310
    DependsOn:
      - spotASGDrainECSHookFunctionServiceRoleDefaultPolicyA49D2168
      - spotASGDrainECSHookFunctionServiceRole593B4C1A
    Metadata:
      aws:cdk:path: VscodeSpotyArmyStack/spotASG/DrainECSHook/Function/Resource
  spotASGDrainECSHookFunctionAllowInvokeVscodeSpotyArmyStackspotASGLifecycleHookDrainHookTopicA79E0B44E9B9E779:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - spotASGDrainECSHookFunctionD15E3C69
          - Arn
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: spotASGLifecycleHookDrainHookTopic364BBF90
    Metadata:
      aws:cdk:path: VscodeSpotyArmyStack/spotASG/DrainECSHook/Function/AllowInvoke:VscodeSpotyArmyStackspotASGLifecycleHookDrainHookTopicA79E0B44
  spotASGDrainECSHookFunctionTopicAA434594:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      TopicArn:
        Ref: spotASGLifecycleHookDrainHookTopic364BBF90
      Endpoint:
        Fn::GetAtt:
          - spotASGDrainECSHookFunctionD15E3C69
          - Arn
    Metadata:
      aws:cdk:path: VscodeSpotyArmyStack/spotASG/DrainECSHook/Function/Topic/Resource
  spotASGLifecycleHookDrainHookRole5BBE4015:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: autoscaling.amazonaws.com
        Version: "2012-10-17"
      Tags:
        - Key: Name
          Value: VscodeSpotyArmyStack/spotASG
    Metadata:
      aws:cdk:path: VscodeSpotyArmyStack/spotASG/LifecycleHookDrainHook/Role/Resource
  spotASGLifecycleHookDrainHookRoleDefaultPolicy36FBDF90:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: sns:Publish
            Effect: Allow
            Resource:
              Ref: spotASGLifecycleHookDrainHookTopic364BBF90
        Version: "2012-10-17"
      PolicyName: spotASGLifecycleHookDrainHookRoleDefaultPolicy36FBDF90
      Roles:
        - Ref: spotASGLifecycleHookDrainHookRole5BBE4015
    Metadata:
      aws:cdk:path: VscodeSpotyArmyStack/spotASG/LifecycleHookDrainHook/Role/DefaultPolicy/Resource
  spotASGLifecycleHookDrainHookTopic364BBF90:
    Type: AWS::SNS::Topic
    Properties:
      Tags:
        - Key: Name
          Value: VscodeSpotyArmyStack/spotASG
    Metadata:
      aws:cdk:path: VscodeSpotyArmyStack/spotASG/LifecycleHookDrainHook/Topic/Resource
  spotASGLifecycleHookDrainHook0DBE26F9:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName:
        Ref: spotASGD84E725E
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
      DefaultResult: CONTINUE
      HeartbeatTimeout: 300
      NotificationTargetARN:
        Ref: spotASGLifecycleHookDrainHookTopic364BBF90
      RoleARN:
        Fn::GetAtt:
          - spotASGLifecycleHookDrainHookRole5BBE4015
          - Arn
    DependsOn:
      - spotASGLifecycleHookDrainHookRoleDefaultPolicy36FBDF90
      - spotASGLifecycleHookDrainHookRole5BBE4015
    Metadata:
      aws:cdk:path: VscodeSpotyArmyStack/spotASG/LifecycleHookDrainHook/Resource
  oneNodeEcsClusterD35750A6:
    Type: AWS::ECS::Cluster
    Metadata:
      aws:cdk:path: VscodeSpotyArmyStack/oneNodeEcsCluster/Resource
  oneNodeEcsCluster9497A9FF:
    Type: AWS::ECS::ClusterCapacityProviderAssociations
    Properties:
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
        - Ref: spotAsgCapacityProvider024CBCFE
      Cluster:
        Ref: oneNodeEcsClusterD35750A6
      DefaultCapacityProviderStrategy: []
    Metadata:
      aws:cdk:path: VscodeSpotyArmyStack/oneNodeEcsCluster/oneNodeEcsCluster
  spotAsgCapacityProvider024CBCFE:
    Type: AWS::ECS::CapacityProvider
    Properties:
      AutoScalingGroupProvider:
        AutoScalingGroupArn:
          Ref: spotASGD84E725E
        ManagedTerminationProtection: DISABLED
      Name:
        Ref: oneNodeEcsClusterD35750A6
    Metadata:
      aws:cdk:path: VscodeSpotyArmyStack/spotAsgCapacityProvider/spotAsgCapacityProvider
  vscodetaskdefTaskRoleD8FCBB40:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: VscodeSpotyArmyStack/vscode-taskdef/TaskRole/Resource
  vscodetaskdefF61A9E95:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Cpu: 1024
          Essential: true
          Image: public.ecr.aws/u3r1l1j7/vscodeserver:latest
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: oneNodeEcsLogGroupA7EA704A
              awslogs-stream-prefix: vscode-
              awslogs-region:
                Ref: AWS::Region
          Memory: 900
          Name: vscode-container
          PortMappings:
            - ContainerPort: 3000
              HostPort: 80
              Protocol: tcp
      ExecutionRoleArn:
        Fn::GetAtt:
          - vscodetaskdefExecutionRole28C2E9FA
          - Arn
      Family: VscodeSpotyArmyStackvscodetaskdefA8D9C266
      NetworkMode: bridge
      RequiresCompatibilities:
        - EC2
      TaskRoleArn:
        Fn::GetAtt:
          - vscodetaskdefTaskRoleD8FCBB40
          - Arn
    Metadata:
      aws:cdk:path: VscodeSpotyArmyStack/vscode-taskdef/Resource
  vscodetaskdefExecutionRole28C2E9FA:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: VscodeSpotyArmyStack/vscode-taskdef/ExecutionRole/Resource
  vscodetaskdefExecutionRoleDefaultPolicy6AAF1EF0:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - oneNodeEcsLogGroupA7EA704A
                - Arn
        Version: "2012-10-17"
      PolicyName: vscodetaskdefExecutionRoleDefaultPolicy6AAF1EF0
      Roles:
        - Ref: vscodetaskdefExecutionRole28C2E9FA
    Metadata:
      aws:cdk:path: VscodeSpotyArmyStack/vscode-taskdef/ExecutionRole/DefaultPolicy/Resource
  openvscodeServiceFB0644CB:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: oneNodeEcsClusterD35750A6
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 1
      EnableECSManagedTags: false
      LaunchType: EC2
      SchedulingStrategy: REPLICA
      TaskDefinition:
        Ref: vscodetaskdefF61A9E95
    Metadata:
      aws:cdk:path: VscodeSpotyArmyStack/openvscode/Service
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/2VSy27bQAz8ltw3m9qX9lhDbdMAOQiWkTtNUQpjaSnsw4Eh6N9LyQ+pzmmHs0PukNyVXa2/228PP+EzPGJ5eOpRPNm+iIAHs6UgySOZTFyIPmE0WeVy8NBSJD8Gs6Ryqio5srjBjOV6wrXt3zoc797yzORp3zAWae9oKjSjraRIO9g3NPMztwlBkGGsfBOP4MWpCVU+Q6RPOF2euUSbqC28t+SiKQiT53h69pK66YElMZhG6mD7V6lvgivWRlKUgNCwq22/0aA4B7MUksN3bb3iOvmbyS/SV64IT9jQX5HDlLgkBsPQ2n4r5wlMZy46ramrGb3oHsAh5V4qbki9Q7svwfZ/1MX17SXOybccwrSU4LRNHW5Az91V8F+8k46ndU1gMISakTUpXLb9FWbQAeoo1dCRS/KLXQWzCfX9/ZR6z/3G9Q7C4RdV7Phq7J4RF4Ed+QWneQX5I5+/3wUOw2CclGQ/wtNx9UM/uF09fATmR59c5Jbs9nz+A2nRhSf8AgAA
    Metadata:
      aws:cdk:path: VscodeSpotyArmyStack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Parameters:
  SsmParameterValueawsservicebottlerocketawsecs1arm64110imageidC96584B6F00A464EAD1953AFF4B05118Parameter:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/bottlerocket/aws-ecs-1/arm64/1.1.0/image_id
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2

