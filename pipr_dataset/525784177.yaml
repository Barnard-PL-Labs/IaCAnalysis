Resources:
  Vpc8378EB38:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: FargateCdkL2ConstructStack/Vpc
    Metadata:
      aws:cdk:path: FargateCdkL2ConstructStack/Vpc/Resource
  VpcPublicSubnet1Subnet5C2D37C4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: Vpc8378EB38
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 10.0.0.0/18
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: FargateCdkL2ConstructStack/Vpc/PublicSubnet1
    Metadata:
      aws:cdk:path: FargateCdkL2ConstructStack/Vpc/PublicSubnet1/Subnet
  VpcPublicSubnet1RouteTable6C95E38E:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc8378EB38
      Tags:
        - Key: Name
          Value: FargateCdkL2ConstructStack/Vpc/PublicSubnet1
    Metadata:
      aws:cdk:path: FargateCdkL2ConstructStack/Vpc/PublicSubnet1/RouteTable
  VpcPublicSubnet1RouteTableAssociation97140677:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcPublicSubnet1RouteTable6C95E38E
      SubnetId:
        Ref: VpcPublicSubnet1Subnet5C2D37C4
    Metadata:
      aws:cdk:path: FargateCdkL2ConstructStack/Vpc/PublicSubnet1/RouteTableAssociation
  VpcPublicSubnet1DefaultRoute3DA9E72A:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VpcPublicSubnet1RouteTable6C95E38E
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VpcIGWD7BA715C
    DependsOn:
      - VpcVPCGWBF912B6E
    Metadata:
      aws:cdk:path: FargateCdkL2ConstructStack/Vpc/PublicSubnet1/DefaultRoute
  VpcPublicSubnet1EIPD7E02669:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: FargateCdkL2ConstructStack/Vpc/PublicSubnet1
    Metadata:
      aws:cdk:path: FargateCdkL2ConstructStack/Vpc/PublicSubnet1/EIP
  VpcPublicSubnet1NATGateway4D7517AA:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId:
        Ref: VpcPublicSubnet1Subnet5C2D37C4
      AllocationId:
        Fn::GetAtt:
          - VpcPublicSubnet1EIPD7E02669
          - AllocationId
      Tags:
        - Key: Name
          Value: FargateCdkL2ConstructStack/Vpc/PublicSubnet1
    Metadata:
      aws:cdk:path: FargateCdkL2ConstructStack/Vpc/PublicSubnet1/NATGateway
  VpcPublicSubnet2Subnet691E08A3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: Vpc8378EB38
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: 10.0.64.0/18
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: FargateCdkL2ConstructStack/Vpc/PublicSubnet2
    Metadata:
      aws:cdk:path: FargateCdkL2ConstructStack/Vpc/PublicSubnet2/Subnet
  VpcPublicSubnet2RouteTable94F7E489:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc8378EB38
      Tags:
        - Key: Name
          Value: FargateCdkL2ConstructStack/Vpc/PublicSubnet2
    Metadata:
      aws:cdk:path: FargateCdkL2ConstructStack/Vpc/PublicSubnet2/RouteTable
  VpcPublicSubnet2RouteTableAssociationDD5762D8:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcPublicSubnet2RouteTable94F7E489
      SubnetId:
        Ref: VpcPublicSubnet2Subnet691E08A3
    Metadata:
      aws:cdk:path: FargateCdkL2ConstructStack/Vpc/PublicSubnet2/RouteTableAssociation
  VpcPublicSubnet2DefaultRoute97F91067:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VpcPublicSubnet2RouteTable94F7E489
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VpcIGWD7BA715C
    DependsOn:
      - VpcVPCGWBF912B6E
    Metadata:
      aws:cdk:path: FargateCdkL2ConstructStack/Vpc/PublicSubnet2/DefaultRoute
  VpcPublicSubnet2EIP3C605A87:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: FargateCdkL2ConstructStack/Vpc/PublicSubnet2
    Metadata:
      aws:cdk:path: FargateCdkL2ConstructStack/Vpc/PublicSubnet2/EIP
  VpcPublicSubnet2NATGateway9182C01D:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId:
        Ref: VpcPublicSubnet2Subnet691E08A3
      AllocationId:
        Fn::GetAtt:
          - VpcPublicSubnet2EIP3C605A87
          - AllocationId
      Tags:
        - Key: Name
          Value: FargateCdkL2ConstructStack/Vpc/PublicSubnet2
    Metadata:
      aws:cdk:path: FargateCdkL2ConstructStack/Vpc/PublicSubnet2/NATGateway
  VpcPrivateSubnet1Subnet536B997A:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: Vpc8378EB38
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 10.0.128.0/18
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: FargateCdkL2ConstructStack/Vpc/PrivateSubnet1
    Metadata:
      aws:cdk:path: FargateCdkL2ConstructStack/Vpc/PrivateSubnet1/Subnet
  VpcPrivateSubnet1RouteTableB2C5B500:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc8378EB38
      Tags:
        - Key: Name
          Value: FargateCdkL2ConstructStack/Vpc/PrivateSubnet1
    Metadata:
      aws:cdk:path: FargateCdkL2ConstructStack/Vpc/PrivateSubnet1/RouteTable
  VpcPrivateSubnet1RouteTableAssociation70C59FA6:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcPrivateSubnet1RouteTableB2C5B500
      SubnetId:
        Ref: VpcPrivateSubnet1Subnet536B997A
    Metadata:
      aws:cdk:path: FargateCdkL2ConstructStack/Vpc/PrivateSubnet1/RouteTableAssociation
  VpcPrivateSubnet1DefaultRouteBE02A9ED:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VpcPrivateSubnet1RouteTableB2C5B500
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: VpcPublicSubnet1NATGateway4D7517AA
    Metadata:
      aws:cdk:path: FargateCdkL2ConstructStack/Vpc/PrivateSubnet1/DefaultRoute
  VpcPrivateSubnet2Subnet3788AAA1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: Vpc8378EB38
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: 10.0.192.0/18
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: FargateCdkL2ConstructStack/Vpc/PrivateSubnet2
    Metadata:
      aws:cdk:path: FargateCdkL2ConstructStack/Vpc/PrivateSubnet2/Subnet
  VpcPrivateSubnet2RouteTableA678073B:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc8378EB38
      Tags:
        - Key: Name
          Value: FargateCdkL2ConstructStack/Vpc/PrivateSubnet2
    Metadata:
      aws:cdk:path: FargateCdkL2ConstructStack/Vpc/PrivateSubnet2/RouteTable
  VpcPrivateSubnet2RouteTableAssociationA89CAD56:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcPrivateSubnet2RouteTableA678073B
      SubnetId:
        Ref: VpcPrivateSubnet2Subnet3788AAA1
    Metadata:
      aws:cdk:path: FargateCdkL2ConstructStack/Vpc/PrivateSubnet2/RouteTableAssociation
  VpcPrivateSubnet2DefaultRoute060D2087:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VpcPrivateSubnet2RouteTableA678073B
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: VpcPublicSubnet2NATGateway9182C01D
    Metadata:
      aws:cdk:path: FargateCdkL2ConstructStack/Vpc/PrivateSubnet2/DefaultRoute
  VpcIGWD7BA715C:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: FargateCdkL2ConstructStack/Vpc
    Metadata:
      aws:cdk:path: FargateCdkL2ConstructStack/Vpc/IGW
  VpcVPCGWBF912B6E:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: Vpc8378EB38
      InternetGatewayId:
        Ref: VpcIGWD7BA715C
    Metadata:
      aws:cdk:path: FargateCdkL2ConstructStack/Vpc/VPCGW
  EcsCluster97242B84:
    Type: AWS::ECS::Cluster
    Metadata:
      aws:cdk:path: FargateCdkL2ConstructStack/EcsCluster/Resource
  TaskDefTaskRole1EDB4A67:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: FargateCdkL2ConstructStack/TaskDef/TaskRole/Resource
  TaskDef54694570:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image:
            Fn::Sub: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/cdk-hnb659fds-container-assets-${AWS::AccountId}-${AWS::Region}:063cbbc07ace8f69e423368d078fac231a404e96ac008319920ae94583660357
          Name: AppContainer
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
      Cpu: "256"
      ExecutionRoleArn:
        Fn::GetAtt:
          - TaskDefExecutionRoleB4775C97
          - Arn
      Family: FargateCdkL2ConstructStackTaskDefF91C63F3
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::GetAtt:
          - TaskDefTaskRole1EDB4A67
          - Arn
    Metadata:
      aws:cdk:path: FargateCdkL2ConstructStack/TaskDef/Resource
  TaskDefExecutionRoleB4775C97:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: FargateCdkL2ConstructStack/TaskDef/ExecutionRole/Resource
  TaskDefExecutionRoleDefaultPolicy0DBB737A:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:BatchGetImage
              - ecr:GetDownloadUrlForLayer
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":ecr:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :repository/
                  - Fn::Sub: cdk-hnb659fds-container-assets-${AWS::AccountId}-${AWS::Region}
          - Action: ecr:GetAuthorizationToken
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: TaskDefExecutionRoleDefaultPolicy0DBB737A
      Roles:
        - Ref: TaskDefExecutionRoleB4775C97
    Metadata:
      aws:cdk:path: FargateCdkL2ConstructStack/TaskDef/ExecutionRole/DefaultPolicy/Resource
  FargateServiceAC2B3B85:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: EcsCluster97242B84
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: AppContainer
          ContainerPort: 80
          TargetGroupArn:
            Ref: LBPublicListenerECSGroupD6A32205
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::GetAtt:
                - FargateServiceSecurityGroup0A0E79CB
                - GroupId
          Subnets:
            - Ref: VpcPrivateSubnet1Subnet536B997A
            - Ref: VpcPrivateSubnet2Subnet3788AAA1
      TaskDefinition:
        Ref: TaskDef54694570
    DependsOn:
      - LBPublicListenerECSGroupD6A32205
      - LBPublicListener6E1F3D94
    Metadata:
      aws:cdk:path: FargateCdkL2ConstructStack/FargateService/Service
  FargateServiceSecurityGroup0A0E79CB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: FargateCdkL2ConstructStack/FargateService/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: FargateCdkL2ConstructStack/FargateService/SecurityGroup/Resource
  FargateServiceSecurityGroupfromFargateCdkL2ConstructStackLBSecurityGroup851D297B80791409A7:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort: 80
      GroupId:
        Fn::GetAtt:
          - FargateServiceSecurityGroup0A0E79CB
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - LBSecurityGroup8A41EA2B
          - GroupId
      ToPort: 80
    Metadata:
      aws:cdk:path: FargateCdkL2ConstructStack/FargateService/SecurityGroup/from FargateCdkL2ConstructStackLBSecurityGroup851D297B:80
  LB8A12904C:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: "false"
      Scheme: internet-facing
      SecurityGroups:
        - Fn::GetAtt:
            - LBSecurityGroup8A41EA2B
            - GroupId
      Subnets:
        - Ref: VpcPublicSubnet1Subnet5C2D37C4
        - Ref: VpcPublicSubnet2Subnet691E08A3
      Type: application
    DependsOn:
      - VpcPublicSubnet1DefaultRoute3DA9E72A
      - VpcPublicSubnet2DefaultRoute97F91067
    Metadata:
      aws:cdk:path: FargateCdkL2ConstructStack/LB/Resource
  LBSecurityGroup8A41EA2B:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatically created Security Group for ELB FargateCdkL2ConstructStackLBCFC396F1
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: FargateCdkL2ConstructStack/LB/SecurityGroup/Resource
  LBSecurityGrouptoFargateCdkL2ConstructStackFargateServiceSecurityGroupFCFBEC5480F4456C3A:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId:
        Fn::GetAtt:
          - LBSecurityGroup8A41EA2B
          - GroupId
      IpProtocol: tcp
      Description: Load balancer to target
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - FargateServiceSecurityGroup0A0E79CB
          - GroupId
      FromPort: 80
      ToPort: 80
    Metadata:
      aws:cdk:path: FargateCdkL2ConstructStack/LB/SecurityGroup/to FargateCdkL2ConstructStackFargateServiceSecurityGroupFCFBEC54:80
  LBPublicListener6E1F3D94:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: LBPublicListenerECSGroupD6A32205
          Type: forward
      LoadBalancerArn:
        Ref: LB8A12904C
      Port: 80
      Protocol: HTTP
    Metadata:
      aws:cdk:path: FargateCdkL2ConstructStack/LB/PublicListener/Resource
  LBPublicListenerECSGroupD6A32205:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: "false"
      TargetType: ip
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: FargateCdkL2ConstructStack/LB/PublicListener/ECSGroup/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/31STU/DMAz9LdyzoA0OXMf40CQEVTdxndzMK2ZdUsXJpqnqf8dpVzZA4pTn59fU7zkTfXOrJ1dw4JFZb0cVFbpZBDBbJdSqQTPRzXtt1Gxj37OZymJRkVnEwmJI3BnlLgZcQlHhmT9zU2ZnCAI5+y1O4HGepeMVwjMEPMBRZZ72As8Xz21AL3gQ9JOcqmmQWT92aINaoImewvHZu1h3M/xLzG3pkfkP/9jRrULDuplVkeXvSTTAJ/AlJFe8fcANWRo8/WacDUAW/QV3+naBfk+mz6mHrSLY6SZ3fXrdmTlJurPbozSSXwEzBtYPzmzRz3dQpmglKOnpHGvHFJw/3gOjwgo4kKkcrAuowBqy5V7WOa1rua/bxYv07rteb/JHfakj8W5PmgFf9JdiTDY0BH1Rtq3KkV304rebVB5XKYMk2VsMdewfzyBJQTu77uJqlXVr1J98vR/f6fFEj68+mWjkow20Q5335xdkxIG5wgIAAA==
    Metadata:
      aws:cdk:path: FargateCdkL2ConstructStack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Outputs:
  applicationLoadBalancerURL:
    Value:
      Fn::Join:
        - ""
        - - http://
          - Fn::GetAtt:
              - LB8A12904C
              - DNSName
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
Rules:
  CheckBootstrapVersion:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::Contains:
                - - "1"
                  - "2"
                  - "3"
                  - "4"
                  - "5"
                - Ref: BootstrapVersion
        AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.

