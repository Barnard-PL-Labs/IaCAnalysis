Resources:
  oneNodeEcsVPCD0353A17:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: oneNodeEcs/oneNodeEcsVPC
    Metadata:
      aws:cdk:path: oneNodeEcs/oneNodeEcsVPC/Resource
  oneNodeEcsVPCWebSubnet1Subnet4E14CB91:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      VpcId:
        Ref: oneNodeEcsVPCD0353A17
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: oneNodeEcs/oneNodeEcsVPC/WebSubnet1
        - Key: aws-cdk:subnet-name
          Value: Web
        - Key: aws-cdk:subnet-type
          Value: Public
    Metadata:
      aws:cdk:path: oneNodeEcs/oneNodeEcsVPC/WebSubnet1/Subnet
  oneNodeEcsVPCWebSubnet1RouteTable0F6A0D0D:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: oneNodeEcsVPCD0353A17
      Tags:
        - Key: Name
          Value: oneNodeEcs/oneNodeEcsVPC/WebSubnet1
    Metadata:
      aws:cdk:path: oneNodeEcs/oneNodeEcsVPC/WebSubnet1/RouteTable
  oneNodeEcsVPCWebSubnet1RouteTableAssociation4794D0A5:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: oneNodeEcsVPCWebSubnet1RouteTable0F6A0D0D
      SubnetId:
        Ref: oneNodeEcsVPCWebSubnet1Subnet4E14CB91
    Metadata:
      aws:cdk:path: oneNodeEcs/oneNodeEcsVPC/WebSubnet1/RouteTableAssociation
  oneNodeEcsVPCWebSubnet1DefaultRoute8762ED4D:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: oneNodeEcsVPCWebSubnet1RouteTable0F6A0D0D
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: oneNodeEcsVPCIGWB3DD518A
    DependsOn:
      - oneNodeEcsVPCVPCGW7A1518EF
    Metadata:
      aws:cdk:path: oneNodeEcs/oneNodeEcsVPC/WebSubnet1/DefaultRoute
  oneNodeEcsVPCWebSubnet2SubnetE99D93F0:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      VpcId:
        Ref: oneNodeEcsVPCD0353A17
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: oneNodeEcs/oneNodeEcsVPC/WebSubnet2
        - Key: aws-cdk:subnet-name
          Value: Web
        - Key: aws-cdk:subnet-type
          Value: Public
    Metadata:
      aws:cdk:path: oneNodeEcs/oneNodeEcsVPC/WebSubnet2/Subnet
  oneNodeEcsVPCWebSubnet2RouteTable48292577:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: oneNodeEcsVPCD0353A17
      Tags:
        - Key: Name
          Value: oneNodeEcs/oneNodeEcsVPC/WebSubnet2
    Metadata:
      aws:cdk:path: oneNodeEcs/oneNodeEcsVPC/WebSubnet2/RouteTable
  oneNodeEcsVPCWebSubnet2RouteTableAssociationDE6C000B:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: oneNodeEcsVPCWebSubnet2RouteTable48292577
      SubnetId:
        Ref: oneNodeEcsVPCWebSubnet2SubnetE99D93F0
    Metadata:
      aws:cdk:path: oneNodeEcs/oneNodeEcsVPC/WebSubnet2/RouteTableAssociation
  oneNodeEcsVPCWebSubnet2DefaultRoute7D61020E:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: oneNodeEcsVPCWebSubnet2RouteTable48292577
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: oneNodeEcsVPCIGWB3DD518A
    DependsOn:
      - oneNodeEcsVPCVPCGW7A1518EF
    Metadata:
      aws:cdk:path: oneNodeEcs/oneNodeEcsVPC/WebSubnet2/DefaultRoute
  oneNodeEcsVPCIGWB3DD518A:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: oneNodeEcs/oneNodeEcsVPC
    Metadata:
      aws:cdk:path: oneNodeEcs/oneNodeEcsVPC/IGW
  oneNodeEcsVPCVPCGW7A1518EF:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: oneNodeEcsVPCD0353A17
      InternetGatewayId:
        Ref: oneNodeEcsVPCIGWB3DD518A
    Metadata:
      aws:cdk:path: oneNodeEcs/oneNodeEcsVPC/VPCGW
  oneNodeEcsLogGroupA7EA704A:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: oneNodeEcs/oneNodeEcsLogGroup/Resource
  SpotFleet1InstanceSecurityGroupC680F80D:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: oneNodeEcs/SpotFleet1/InstanceSecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: from 0.0.0.0/0:80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      Tags:
        - Key: Name
          Value: oneNodeEcs/SpotFleet1
      VpcId:
        Ref: oneNodeEcsVPCD0353A17
    Metadata:
      aws:cdk:path: oneNodeEcs/SpotFleet1/InstanceSecurityGroup/Resource
  SpotFleet1InstanceRole7E617102:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - ec2.
                    - Ref: AWS::URLSuffix
        Version: "2012-10-17"
      Tags:
        - Key: Name
          Value: oneNodeEcs/SpotFleet1
    Metadata:
      aws:cdk:path: oneNodeEcs/SpotFleet1/InstanceRole/Resource
  SpotFleet1InstanceRoleDefaultPolicyE7BCA675:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecs:CreateCluster
              - ecs:DeregisterContainerInstance
              - ecs:DiscoverPollEndpoint
              - ecs:Poll
              - ecs:RegisterContainerInstance
              - ecs:StartTelemetrySession
              - ecs:Submit*
              - ecr:GetAuthorizationToken
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: SpotFleet1InstanceRoleDefaultPolicyE7BCA675
      Roles:
        - Ref: SpotFleet1InstanceRole7E617102
    Metadata:
      aws:cdk:path: oneNodeEcs/SpotFleet1/InstanceRole/DefaultPolicy/Resource
  SpotFleet1InstanceProfile06EAADB7:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: SpotFleet1InstanceRole7E617102
    Metadata:
      aws:cdk:path: oneNodeEcs/SpotFleet1/InstanceProfile
  SpotFleet1LaunchConfig0B62F716:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        Ref: SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter
      InstanceType: t3a.micro
      IamInstanceProfile:
        Ref: SpotFleet1InstanceProfile06EAADB7
      SecurityGroups:
        - Fn::GetAtt:
            - SpotFleet1InstanceSecurityGroupC680F80D
            - GroupId
      SpotPrice: "0.0030"
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - |-
                #!/bin/bash
                echo ECS_CLUSTER=
              - Ref: oneNodeEcsClusterD35750A6
              - |-2
                 >> /etc/ecs/ecs.config
                sudo iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP
                sudo service iptables save
                echo ECS_AWSVPC_BLOCK_IMDS=true >> /etc/ecs/ecs.config
                echo ECS_ENABLE_SPOT_INSTANCE_DRAINING=true >> /etc/ecs/ecs.config
    DependsOn:
      - SpotFleet1InstanceRoleDefaultPolicyE7BCA675
      - SpotFleet1InstanceRole7E617102
    Metadata:
      aws:cdk:path: oneNodeEcs/SpotFleet1/LaunchConfig
  SpotFleet1ASG27D98EB0:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MaxSize: "1"
      MinSize: "1"
      DesiredCapacity: "1"
      LaunchConfigurationName:
        Ref: SpotFleet1LaunchConfig0B62F716
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: oneNodeEcs/SpotFleet1
      VPCZoneIdentifier:
        - Ref: oneNodeEcsVPCWebSubnet1Subnet4E14CB91
        - Ref: oneNodeEcsVPCWebSubnet2SubnetE99D93F0
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: true
    Metadata:
      aws:cdk:path: oneNodeEcs/SpotFleet1/ASG
  SpotFleet1DrainECSHookFunctionServiceRoleE72159A7:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Name
          Value: oneNodeEcs/SpotFleet1
    Metadata:
      aws:cdk:path: oneNodeEcs/SpotFleet1/DrainECSHook/Function/ServiceRole/Resource
  SpotFleet1DrainECSHookFunctionServiceRoleDefaultPolicyBC5189D8:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ec2:DescribeInstances
              - ec2:DescribeInstanceAttribute
              - ec2:DescribeInstanceStatus
              - ec2:DescribeHosts
            Effect: Allow
            Resource: "*"
          - Action: autoscaling:CompleteLifecycleAction
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":autoscaling:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :autoScalingGroup:*:autoScalingGroupName/
                  - Ref: SpotFleet1ASG27D98EB0
          - Action:
              - ecs:DescribeContainerInstances
              - ecs:DescribeTasks
            Effect: Allow
            Resource: "*"
          - Action:
              - ecs:ListContainerInstances
              - ecs:SubmitContainerStateChange
              - ecs:SubmitTaskStateChange
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - oneNodeEcsClusterD35750A6
                - Arn
          - Action:
              - ecs:UpdateContainerInstancesState
              - ecs:ListTasks
            Condition:
              ArnEquals:
                ecs:cluster:
                  Fn::GetAtt:
                    - oneNodeEcsClusterD35750A6
                    - Arn
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: SpotFleet1DrainECSHookFunctionServiceRoleDefaultPolicyBC5189D8
      Roles:
        - Ref: SpotFleet1DrainECSHookFunctionServiceRoleE72159A7
    Metadata:
      aws:cdk:path: oneNodeEcs/SpotFleet1/DrainECSHook/Function/ServiceRole/DefaultPolicy/Resource
  SpotFleet1DrainECSHookFunction971C612F:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3, json, os, time

          ecs = boto3.client('ecs')
          autoscaling = boto3.client('autoscaling')


          def lambda_handler(event, context):
            print(json.dumps(event))
            cluster = os.environ['CLUSTER']
            snsTopicArn = event['Records'][0]['Sns']['TopicArn']
            lifecycle_event = json.loads(event['Records'][0]['Sns']['Message'])
            instance_id = lifecycle_event.get('EC2InstanceId')
            if not instance_id:
              print('Got event without EC2InstanceId: %s', json.dumps(event))
              return

            instance_arn = container_instance_arn(cluster, instance_id)
            print('Instance %s has container instance ARN %s' % (lifecycle_event['EC2InstanceId'], instance_arn))

            if not instance_arn:
              return

            while has_tasks(cluster, instance_arn):
              time.sleep(10)

            try:
              print('Terminating instance %s' % instance_id)
              autoscaling.complete_lifecycle_action(
                  LifecycleActionResult='CONTINUE',
                  **pick(lifecycle_event, 'LifecycleHookName', 'LifecycleActionToken', 'AutoScalingGroupName'))
            except Exception as e:
              # Lifecycle action may have already completed.
              print(str(e))


          def container_instance_arn(cluster, instance_id):
            """Turn an instance ID into a container instance ARN."""
            arns = ecs.list_container_instances(cluster=cluster, filter='ec2InstanceId==' + instance_id)['containerInstanceArns']
            if not arns:
              return None
            return arns[0]


          def has_tasks(cluster, instance_arn):
            """Return True if the instance is running tasks for the given cluster."""
            instances = ecs.describe_container_instances(cluster=cluster, containerInstances=[instance_arn])['containerInstances']
            if not instances:
              return False
            instance = instances[0]

            if instance['status'] == 'ACTIVE':
              # Start draining, then try again later
              set_container_instance_to_draining(cluster, instance_arn)
              return True

            tasks = instance['runningTasksCount'] + instance['pendingTasksCount']
            print('Instance %s has %s tasks' % (instance_arn, tasks))

            return tasks > 0


          def set_container_instance_to_draining(cluster, instance_arn):
            ecs.update_container_instances_state(
                cluster=cluster,
                containerInstances=[instance_arn], status='DRAINING')


          def pick(dct, *keys):
            """Pick a subset of a dict."""
            return {k: v for k, v in dct.items() if k in keys}
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
          - SpotFleet1DrainECSHookFunctionServiceRoleE72159A7
          - Arn
      Runtime: python3.6
      Environment:
        Variables:
          CLUSTER:
            Ref: oneNodeEcsClusterD35750A6
      Tags:
        - Key: Name
          Value: oneNodeEcs/SpotFleet1
      Timeout: 310
    DependsOn:
      - SpotFleet1DrainECSHookFunctionServiceRoleDefaultPolicyBC5189D8
      - SpotFleet1DrainECSHookFunctionServiceRoleE72159A7
    Metadata:
      aws:cdk:path: oneNodeEcs/SpotFleet1/DrainECSHook/Function/Resource
  SpotFleet1DrainECSHookFunctionAllowInvokeoneNodeEcsSpotFleet1LifecycleHookDrainHookTopic961A365C61DA10B0:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - SpotFleet1DrainECSHookFunction971C612F
          - Arn
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: SpotFleet1LifecycleHookDrainHookTopic52E93978
    Metadata:
      aws:cdk:path: oneNodeEcs/SpotFleet1/DrainECSHook/Function/AllowInvoke:oneNodeEcsSpotFleet1LifecycleHookDrainHookTopic961A365C
  SpotFleet1DrainECSHookFunctionTopic797BB39E:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      TopicArn:
        Ref: SpotFleet1LifecycleHookDrainHookTopic52E93978
      Endpoint:
        Fn::GetAtt:
          - SpotFleet1DrainECSHookFunction971C612F
          - Arn
    Metadata:
      aws:cdk:path: oneNodeEcs/SpotFleet1/DrainECSHook/Function/Topic/Resource
  SpotFleet1LifecycleHookDrainHookRole2455EF86:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: autoscaling.amazonaws.com
        Version: "2012-10-17"
      Tags:
        - Key: Name
          Value: oneNodeEcs/SpotFleet1
    Metadata:
      aws:cdk:path: oneNodeEcs/SpotFleet1/LifecycleHookDrainHook/Role/Resource
  SpotFleet1LifecycleHookDrainHookRoleDefaultPolicyAA1A4B33:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: sns:Publish
            Effect: Allow
            Resource:
              Ref: SpotFleet1LifecycleHookDrainHookTopic52E93978
        Version: "2012-10-17"
      PolicyName: SpotFleet1LifecycleHookDrainHookRoleDefaultPolicyAA1A4B33
      Roles:
        - Ref: SpotFleet1LifecycleHookDrainHookRole2455EF86
    Metadata:
      aws:cdk:path: oneNodeEcs/SpotFleet1/LifecycleHookDrainHook/Role/DefaultPolicy/Resource
  SpotFleet1LifecycleHookDrainHookTopic52E93978:
    Type: AWS::SNS::Topic
    Properties:
      Tags:
        - Key: Name
          Value: oneNodeEcs/SpotFleet1
    Metadata:
      aws:cdk:path: oneNodeEcs/SpotFleet1/LifecycleHookDrainHook/Topic/Resource
  SpotFleet1LifecycleHookDrainHookF7F6D858:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName:
        Ref: SpotFleet1ASG27D98EB0
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
      DefaultResult: CONTINUE
      HeartbeatTimeout: 300
      NotificationTargetARN:
        Ref: SpotFleet1LifecycleHookDrainHookTopic52E93978
      RoleARN:
        Fn::GetAtt:
          - SpotFleet1LifecycleHookDrainHookRole2455EF86
          - Arn
    DependsOn:
      - SpotFleet1LifecycleHookDrainHookRoleDefaultPolicyAA1A4B33
      - SpotFleet1LifecycleHookDrainHookRole2455EF86
    Metadata:
      aws:cdk:path: oneNodeEcs/SpotFleet1/LifecycleHookDrainHook/Resource
  oneNodeEcsClusterD35750A6:
    Type: AWS::ECS::Cluster
    Metadata:
      aws:cdk:path: oneNodeEcs/oneNodeEcsCluster/Resource
  oneNodeEcsClusterDefaultServiceDiscoveryNamespace4C8C24D1:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: onenodeecs.service
      Vpc:
        Ref: oneNodeEcsVPCD0353A17
    Metadata:
      aws:cdk:path: oneNodeEcs/oneNodeEcsCluster/DefaultServiceDiscoveryNamespace/Resource
  haproxyhaproxytaskdefTaskRoleE1A5943D:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: oneNodeEcs/haproxy/haproxy-taskdef/TaskRole/Resource
  haproxyhaproxytaskdefB4892F06:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image:
            Fn::Join:
              - ""
              - - Ref: AWS::AccountId
                - .dkr.ecr.
                - Ref: AWS::Region
                - "."
                - Ref: AWS::URLSuffix
                - /aws-cdk/assets:c0c6d831efa7d2b8c65fd3a735c37eda576feb64435b55b15734f9e8e487bbd3
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: oneNodeEcsLogGroupA7EA704A
              awslogs-stream-prefix: haproxy-
              awslogs-region:
                Ref: AWS::Region
          MemoryReservation: 256
          Name: haproxyContainer
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
      Cpu: "256"
      ExecutionRoleArn:
        Fn::GetAtt:
          - haproxyhaproxytaskdefExecutionRoleA62FFE41
          - Arn
      Family: oneNodeEcshaproxyhaproxytaskdef9C63B033
      Memory: "256"
      NetworkMode: host
      RequiresCompatibilities:
        - EC2
      TaskRoleArn:
        Fn::GetAtt:
          - haproxyhaproxytaskdefTaskRoleE1A5943D
          - Arn
    Metadata:
      aws:cdk:path: oneNodeEcs/haproxy/haproxy-taskdef/Resource
  haproxyhaproxytaskdefExecutionRoleA62FFE41:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: oneNodeEcs/haproxy/haproxy-taskdef/ExecutionRole/Resource
  haproxyhaproxytaskdefExecutionRoleDefaultPolicyE3213778:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":ecr:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :repository/aws-cdk/assets
          - Action: ecr:GetAuthorizationToken
            Effect: Allow
            Resource: "*"
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - oneNodeEcsLogGroupA7EA704A
                - Arn
        Version: "2012-10-17"
      PolicyName: haproxyhaproxytaskdefExecutionRoleDefaultPolicyE3213778
      Roles:
        - Ref: haproxyhaproxytaskdefExecutionRoleA62FFE41
    Metadata:
      aws:cdk:path: oneNodeEcs/haproxy/haproxy-taskdef/ExecutionRole/DefaultPolicy/Resource
  haproxyhaproxysvcService8469FAA5:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: oneNodeEcsClusterD35750A6
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      EnableECSManagedTags: false
      LaunchType: EC2
      SchedulingStrategy: DAEMON
      ServiceName: haproxy
      TaskDefinition:
        Ref: haproxyhaproxytaskdefB4892F06
    Metadata:
      aws:cdk:path: oneNodeEcs/haproxy/haproxy-svc/Service
  nginxnginxtaskdefTaskRoleD5C85BF9:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: oneNodeEcs/nginx/nginx-taskdef/TaskRole/Resource
  nginxnginxtaskdefFDEBE4D0:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: nginx
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: oneNodeEcsLogGroupA7EA704A
              awslogs-stream-prefix: nginx-
              awslogs-region:
                Ref: AWS::Region
          Memory: 128
          Name: nginxcontainer
          PortMappings:
            - ContainerPort: 80
              HostPort: 0
              Protocol: tcp
      Cpu: "256"
      ExecutionRoleArn:
        Fn::GetAtt:
          - nginxnginxtaskdefExecutionRole99D487FF
          - Arn
      Family: oneNodeEcsnginxnginxtaskdef3BD84D32
      NetworkMode: bridge
      RequiresCompatibilities:
        - EC2
      TaskRoleArn:
        Fn::GetAtt:
          - nginxnginxtaskdefTaskRoleD5C85BF9
          - Arn
    Metadata:
      aws:cdk:path: oneNodeEcs/nginx/nginx-taskdef/Resource
  nginxnginxtaskdefExecutionRole99D487FF:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: oneNodeEcs/nginx/nginx-taskdef/ExecutionRole/Resource
  nginxnginxtaskdefExecutionRoleDefaultPolicy3AC6F0FB:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - oneNodeEcsLogGroupA7EA704A
                - Arn
        Version: "2012-10-17"
      PolicyName: nginxnginxtaskdefExecutionRoleDefaultPolicy3AC6F0FB
      Roles:
        - Ref: nginxnginxtaskdefExecutionRole99D487FF
    Metadata:
      aws:cdk:path: oneNodeEcs/nginx/nginx-taskdef/ExecutionRole/DefaultPolicy/Resource
  nginxnginxsvcService338DB79C:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: oneNodeEcsClusterD35750A6
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      DesiredCount: 2
      EnableECSManagedTags: false
      LaunchType: EC2
      SchedulingStrategy: REPLICA
      ServiceName: nginx
      ServiceRegistries:
        - ContainerName: nginxcontainer
          ContainerPort: 80
          RegistryArn:
            Fn::GetAtt:
              - nginxnginxsvcCloudmapService2076950B
              - Arn
      TaskDefinition:
        Ref: nginxnginxtaskdefFDEBE4D0
    Metadata:
      aws:cdk:path: oneNodeEcs/nginx/nginx-svc/Service
  nginxnginxsvcCloudmapService2076950B:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: SRV
        NamespaceId:
          Fn::GetAtt:
            - oneNodeEcsClusterDefaultServiceDiscoveryNamespace4C8C24D1
            - Id
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: _nginx
      NamespaceId:
        Fn::GetAtt:
          - oneNodeEcsClusterDefaultServiceDiscoveryNamespace4C8C24D1
          - Id
    Metadata:
      aws:cdk:path: oneNodeEcs/nginx/nginx-svc/CloudmapService/Resource
  nyancatnyancattaskdefTaskRole4C57E5CB:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: oneNodeEcs/nyancat/nyancat-taskdef/TaskRole/Resource
  nyancatnyancattaskdef93F2EDF6:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: daviey/nyan-cat-web
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: oneNodeEcsLogGroupA7EA704A
              awslogs-stream-prefix: nyancat-
              awslogs-region:
                Ref: AWS::Region
          Memory: 128
          Name: nyancatcontainer
          PortMappings:
            - ContainerPort: 80
              HostPort: 0
              Protocol: tcp
      Cpu: "256"
      ExecutionRoleArn:
        Fn::GetAtt:
          - nyancatnyancattaskdefExecutionRole9EE95167
          - Arn
      Family: oneNodeEcsnyancatnyancattaskdefFAAC2041
      NetworkMode: bridge
      RequiresCompatibilities:
        - EC2
      TaskRoleArn:
        Fn::GetAtt:
          - nyancatnyancattaskdefTaskRole4C57E5CB
          - Arn
    Metadata:
      aws:cdk:path: oneNodeEcs/nyancat/nyancat-taskdef/Resource
  nyancatnyancattaskdefExecutionRole9EE95167:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: oneNodeEcs/nyancat/nyancat-taskdef/ExecutionRole/Resource
  nyancatnyancattaskdefExecutionRoleDefaultPolicy97F9BE63:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - oneNodeEcsLogGroupA7EA704A
                - Arn
        Version: "2012-10-17"
      PolicyName: nyancatnyancattaskdefExecutionRoleDefaultPolicy97F9BE63
      Roles:
        - Ref: nyancatnyancattaskdefExecutionRole9EE95167
    Metadata:
      aws:cdk:path: oneNodeEcs/nyancat/nyancat-taskdef/ExecutionRole/DefaultPolicy/Resource
  nyancatnyancatsvcServiceB261DA7A:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: oneNodeEcsClusterD35750A6
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      DesiredCount: 1
      EnableECSManagedTags: false
      LaunchType: EC2
      SchedulingStrategy: REPLICA
      ServiceName: nyancat
      ServiceRegistries:
        - ContainerName: nyancatcontainer
          ContainerPort: 80
          RegistryArn:
            Fn::GetAtt:
              - nyancatnyancatsvcCloudmapService995A6361
              - Arn
      TaskDefinition:
        Ref: nyancatnyancattaskdef93F2EDF6
    Metadata:
      aws:cdk:path: oneNodeEcs/nyancat/nyancat-svc/Service
  nyancatnyancatsvcCloudmapService995A6361:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: SRV
        NamespaceId:
          Fn::GetAtt:
            - oneNodeEcsClusterDefaultServiceDiscoveryNamespace4C8C24D1
            - Id
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: _nyancat
      NamespaceId:
        Fn::GetAtt:
          - oneNodeEcsClusterDefaultServiceDiscoveryNamespace4C8C24D1
          - Id
    Metadata:
      aws:cdk:path: oneNodeEcs/nyancat/nyancat-svc/CloudmapService/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Modules: aws-cdk=2.113.0,@aws-cdk/assets=1.22.0,@aws-cdk/aws-applicationautoscaling=1.22.0,@aws-cdk/aws-autoscaling=1.22.0,@aws-cdk/aws-autoscaling-common=1.22.0,@aws-cdk/aws-autoscaling-hooktargets=1.22.0,@aws-cdk/aws-cloudwatch=1.22.0,@aws-cdk/aws-ec2=1.22.0,@aws-cdk/aws-ecr=1.22.0,@aws-cdk/aws-ecr-assets=1.22.0,@aws-cdk/aws-ecs=1.22.0,@aws-cdk/aws-elasticloadbalancingv2=1.22.0,@aws-cdk/aws-events=1.22.0,@aws-cdk/aws-iam=1.22.0,@aws-cdk/aws-kms=1.22.0,@aws-cdk/aws-lambda=1.22.0,@aws-cdk/aws-logs=1.22.0,@aws-cdk/aws-s3=1.22.0,@aws-cdk/aws-s3-assets=1.22.0,@aws-cdk/aws-servicediscovery=1.22.0,@aws-cdk/aws-sns=1.22.0,@aws-cdk/aws-sns-subscriptions=1.22.0,@aws-cdk/aws-sqs=1.22.0,@aws-cdk/aws-ssm=1.22.0,@aws-cdk/core=1.22.0,@aws-cdk/cx-api=1.22.0,@aws-cdk/region-info=1.22.0,jsii-runtime=node.js/v18.12.1
    Condition: CDKMetadataAvailable
Parameters:
  SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - il-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - me-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2

