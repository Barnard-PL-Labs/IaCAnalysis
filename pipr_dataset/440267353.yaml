Parameters:
  DomainName:
    Type: String
    Description: Domain name to use for the new IoT Endpoint with static IPs, without final dot.
  Route53HostedZoneId:
    Type: String
    Description: Route53 HostedZoneId to create a new DNS record in.
  CertificateArn:
    Type: String
    Description: The ARN of the certificate to use for the new IoT Endpoint. Leave empty to auto-create.
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
Conditions:
  CreateCertificate:
    Fn::Equals:
      - Ref: CertificateArn
      - ""
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2
Resources:
  VPCB9E5F0B4:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.10.10.0/24
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: IoTEndpointStaticIPs/VPC
    Metadata:
      aws:cdk:path: IoTEndpointStaticIPs/VPC/Resource
  VPCiotendpointnlbSubnet1Subnet9066A7A6:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.10.10.0/28
      VpcId:
        Ref: VPCB9E5F0B4
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: iotendpoint-nlb
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: IoTEndpointStaticIPs/VPC/iotendpoint-nlbSubnet1
    Metadata:
      aws:cdk:path: IoTEndpointStaticIPs/VPC/iotendpoint-nlbSubnet1/Subnet
  VPCiotendpointnlbSubnet1RouteTableFB5B8205:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      Tags:
        - Key: Name
          Value: IoTEndpointStaticIPs/VPC/iotendpoint-nlbSubnet1
    Metadata:
      aws:cdk:path: IoTEndpointStaticIPs/VPC/iotendpoint-nlbSubnet1/RouteTable
  VPCiotendpointnlbSubnet1RouteTableAssociation8D0DC191:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCiotendpointnlbSubnet1RouteTableFB5B8205
      SubnetId:
        Ref: VPCiotendpointnlbSubnet1Subnet9066A7A6
    Metadata:
      aws:cdk:path: IoTEndpointStaticIPs/VPC/iotendpoint-nlbSubnet1/RouteTableAssociation
  VPCiotendpointnlbSubnet1DefaultRoute3588B246:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VPCiotendpointnlbSubnet1RouteTableFB5B8205
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VPCIGWB7E252D3
    DependsOn:
      - VPCVPCGW99B986DC
    Metadata:
      aws:cdk:path: IoTEndpointStaticIPs/VPC/iotendpoint-nlbSubnet1/DefaultRoute
  VPCiotendpointnlbSubnet2Subnet199025DE:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.10.10.16/28
      VpcId:
        Ref: VPCB9E5F0B4
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: iotendpoint-nlb
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: IoTEndpointStaticIPs/VPC/iotendpoint-nlbSubnet2
    Metadata:
      aws:cdk:path: IoTEndpointStaticIPs/VPC/iotendpoint-nlbSubnet2/Subnet
  VPCiotendpointnlbSubnet2RouteTable1F354B04:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      Tags:
        - Key: Name
          Value: IoTEndpointStaticIPs/VPC/iotendpoint-nlbSubnet2
    Metadata:
      aws:cdk:path: IoTEndpointStaticIPs/VPC/iotendpoint-nlbSubnet2/RouteTable
  VPCiotendpointnlbSubnet2RouteTableAssociation118D33B5:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCiotendpointnlbSubnet2RouteTable1F354B04
      SubnetId:
        Ref: VPCiotendpointnlbSubnet2Subnet199025DE
    Metadata:
      aws:cdk:path: IoTEndpointStaticIPs/VPC/iotendpoint-nlbSubnet2/RouteTableAssociation
  VPCiotendpointnlbSubnet2DefaultRoute825C3CD8:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VPCiotendpointnlbSubnet2RouteTable1F354B04
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VPCIGWB7E252D3
    DependsOn:
      - VPCVPCGW99B986DC
    Metadata:
      aws:cdk:path: IoTEndpointStaticIPs/VPC/iotendpoint-nlbSubnet2/DefaultRoute
  VPCiotendpointvpceSubnet1SubnetA48561FC:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.10.10.32/28
      VpcId:
        Ref: VPCB9E5F0B4
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: iotendpoint-vpce
        - Key: aws-cdk:subnet-type
          Value: Isolated
        - Key: Name
          Value: IoTEndpointStaticIPs/VPC/iotendpoint-vpceSubnet1
    Metadata:
      aws:cdk:path: IoTEndpointStaticIPs/VPC/iotendpoint-vpceSubnet1/Subnet
  VPCiotendpointvpceSubnet1RouteTableDC280D60:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      Tags:
        - Key: Name
          Value: IoTEndpointStaticIPs/VPC/iotendpoint-vpceSubnet1
    Metadata:
      aws:cdk:path: IoTEndpointStaticIPs/VPC/iotendpoint-vpceSubnet1/RouteTable
  VPCiotendpointvpceSubnet1RouteTableAssociationD1D29166:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCiotendpointvpceSubnet1RouteTableDC280D60
      SubnetId:
        Ref: VPCiotendpointvpceSubnet1SubnetA48561FC
    Metadata:
      aws:cdk:path: IoTEndpointStaticIPs/VPC/iotendpoint-vpceSubnet1/RouteTableAssociation
  VPCiotendpointvpceSubnet2Subnet4943D247:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.10.10.48/28
      VpcId:
        Ref: VPCB9E5F0B4
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: iotendpoint-vpce
        - Key: aws-cdk:subnet-type
          Value: Isolated
        - Key: Name
          Value: IoTEndpointStaticIPs/VPC/iotendpoint-vpceSubnet2
    Metadata:
      aws:cdk:path: IoTEndpointStaticIPs/VPC/iotendpoint-vpceSubnet2/Subnet
  VPCiotendpointvpceSubnet2RouteTableF5F5656C:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      Tags:
        - Key: Name
          Value: IoTEndpointStaticIPs/VPC/iotendpoint-vpceSubnet2
    Metadata:
      aws:cdk:path: IoTEndpointStaticIPs/VPC/iotendpoint-vpceSubnet2/RouteTable
  VPCiotendpointvpceSubnet2RouteTableAssociationF630F58A:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCiotendpointvpceSubnet2RouteTableF5F5656C
      SubnetId:
        Ref: VPCiotendpointvpceSubnet2Subnet4943D247
    Metadata:
      aws:cdk:path: IoTEndpointStaticIPs/VPC/iotendpoint-vpceSubnet2/RouteTableAssociation
  VPCIGWB7E252D3:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: IoTEndpointStaticIPs/VPC
    Metadata:
      aws:cdk:path: IoTEndpointStaticIPs/VPC/IGW
  VPCVPCGW99B986DC:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      InternetGatewayId:
        Ref: VPCIGWB7E252D3
    Metadata:
      aws:cdk:path: IoTEndpointStaticIPs/VPC/VPCGW
  Certificate4E7ABB08:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName:
        Ref: DomainName
      DomainValidationOptions:
        - DomainName:
            Ref: DomainName
          HostedZoneId:
            Ref: Route53HostedZoneId
      ValidationMethod: DNS
    Metadata:
      aws:cdk:path: IoTEndpointStaticIPs/Certificate/Resource
    Condition: CreateCertificate
  IoTDomainConfiguration:
    Type: AWS::IoT::DomainConfiguration
    Properties:
      DomainConfigurationName: StaticIPs-VPC-Endpoint-standalone-2
      DomainName:
        Ref: DomainName
      ServerCertificateArns:
        - Fn::If:
            - CreateCertificate
            - Ref: Certificate4E7ABB08
            - Ref: CertificateArn
    Metadata:
      aws:cdk:path: IoTEndpointStaticIPs/IoTDomainConfiguration
  SecurityGroupDD263621:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow IoT Endpoint access from anywhere
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow HTTPS access to anywhere
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
        - CidrIp: 0.0.0.0/0
          Description: Allow ALT-HTTPS access to anywhere
          FromPort: 8443
          IpProtocol: tcp
          ToPort: 8443
        - CidrIp: 0.0.0.0/0
          Description: Allow MQTTS access to anywhere
          FromPort: 8883
          IpProtocol: tcp
          ToPort: 8883
      SecurityGroupIngress:
        - CidrIp:
            Fn::GetAtt:
              - VPCB9E5F0B4
              - CidrBlock
          Description:
            Fn::Join:
              - ""
              - - "from "
                - Fn::GetAtt:
                    - VPCB9E5F0B4
                    - CidrBlock
                - :443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
        - CidrIp: 0.0.0.0/0
          Description: Allow HTTPS access from anywhere
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
        - CidrIp: 0.0.0.0/0
          Description: Allow ALT-HTTPS access from anywhere
          FromPort: 8443
          IpProtocol: tcp
          ToPort: 8443
        - CidrIp: 0.0.0.0/0
          Description: Allow MQTTS access from anywhere
          FromPort: 8883
          IpProtocol: tcp
          ToPort: 8883
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: IoTEndpointStaticIPs/SecurityGroup/Resource
  IoTVPCEndpointSecurityGroup3EC6262D:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName:
        Fn::Join:
          - ""
          - - com.amazonaws.
            - Ref: AWS::Region
            - .iot.data
      VpcId:
        Ref: VPCB9E5F0B4
      PrivateDnsEnabled: false
      SecurityGroupIds:
        - Fn::GetAtt:
            - SecurityGroupDD263621
            - GroupId
      SubnetIds:
        - Ref: VPCiotendpointvpceSubnet1SubnetA48561FC
        - Ref: VPCiotendpointvpceSubnet2Subnet4943D247
      VpcEndpointType: Interface
    Metadata:
      aws:cdk:path: IoTEndpointStaticIPs/IoTVPCEndpointSecurityGroup/Resource
  VPCEndpointIPsLambdaRoleC4F4583B:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DescribeNetworkInterfaceAttribute
                Effect: Allow
                Resource: "*"
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-*
            Version: "2012-10-17"
          PolicyName: VPCEndpointIPsLambdaPolicy
      RoleName: VPCEndpointIPsLambdaRole
    Metadata:
      aws:cdk:path: IoTEndpointStaticIPs/VPCEndpointIPsLambdaRole/Resource
  VPCEndpointIPsLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: "

          import cfnresponse

          import boto3

          import json

          def lambda_handler(event, context):

          \    print('REQUEST RECEIVED:\\n' + json.dumps(event))

          \    responseStatus = cfnresponse.FAILED

          \    responseData = {}

          \    if 'RequestType' not in event:

          \        responseData = {'error': 'RequestType not in event'}

          \    elif event['RequestType'] == 'Delete':

          \        responseStatus = cfnresponse.SUCCESS

          \    elif event['RequestType'] in ['Create', 'Update']:

          \        try:

          \            responseData['IPs'] = []

          \            ec2 = boto3.resource('ec2')

          \            eni_ids = event['ResourceProperties']['NetworkInterfaceIds']

          \            for eni_id in eni_ids:

          \                eni = ec2.NetworkInterface(eni_id)

          \                responseData['IPs'].append(eni.private_ip_address)

          \            responseStatus = cfnresponse.SUCCESS

          \        except Exception as e:

          \            responseData = {'error': str(e)}

          \    cfnresponse.send(event, context, responseStatus, responseData)

          \    "
      Role:
        Fn::GetAtt:
          - VPCEndpointIPsLambdaRoleC4F4583B
          - Arn
      Handler: index.lambda_handler
      Runtime: python3.9
      Timeout: 10
    Metadata:
      aws:cdk:path: IoTEndpointStaticIPs/VPCEndpointIPsLambdaFunction
  IoTVPCEndpointIPs:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - VPCEndpointIPsLambdaFunction
          - Arn
      NetworkInterfaceIds:
        Fn::GetAtt:
          - IoTVPCEndpointSecurityGroup3EC6262D
          - NetworkInterfaceIds
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: IoTEndpointStaticIPs/IoTVPCEndpointIPs/Default
  ElasticIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: IoTEndpointStaticIPs/ElasticIP1
  ElasticIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: IoTEndpointStaticIPs/ElasticIP2
  NLB55158F82:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: "false"
      Scheme: internet-facing
      SubnetMappings:
        - AllocationId:
            Fn::GetAtt:
              - ElasticIP1
              - AllocationId
          SubnetId:
            Ref: VPCiotendpointnlbSubnet1Subnet9066A7A6
        - AllocationId:
            Fn::GetAtt:
              - ElasticIP2
              - AllocationId
          SubnetId:
            Ref: VPCiotendpointnlbSubnet2Subnet199025DE
      Subnets: []
      Type: network
    DependsOn:
      - VPCiotendpointnlbSubnet1DefaultRoute3588B246
      - VPCiotendpointnlbSubnet2DefaultRoute825C3CD8
    Metadata:
      aws:cdk:path: IoTEndpointStaticIPs/NLB/Resource
  NLBListenerHTTPSBADE17BB:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: TargetGroupHTTPS0864B778
          Type: forward
      LoadBalancerArn:
        Ref: NLB55158F82
      Port: 443
      Protocol: TCP
    Metadata:
      aws:cdk:path: IoTEndpointStaticIPs/NLB/Listener-HTTPS/Resource
  NLBListenerALTHTTPS8D6A5F1F:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: TargetGroupALTHTTPS93D5F701
          Type: forward
      LoadBalancerArn:
        Ref: NLB55158F82
      Port: 8443
      Protocol: TCP
    Metadata:
      aws:cdk:path: IoTEndpointStaticIPs/NLB/Listener-ALT-HTTPS/Resource
  NLBListenerMQTTS864997C9:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: TargetGroupMQTTSFF7FA92C
          Type: forward
      LoadBalancerArn:
        Ref: NLB55158F82
      Port: 8883
      Protocol: TCP
    Metadata:
      aws:cdk:path: IoTEndpointStaticIPs/NLB/Listener-MQTTS/Resource
  TargetGroupHTTPS0864B778:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 443
      Protocol: TCP
      Targets:
        - Id:
            Fn::Select:
              - 0
              - Fn::GetAtt:
                  - IoTVPCEndpointIPs
                  - IPs
        - Id:
            Fn::Select:
              - 1
              - Fn::GetAtt:
                  - IoTVPCEndpointIPs
                  - IPs
      TargetType: ip
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: IoTEndpointStaticIPs/TargetGroup-HTTPS/Resource
  TargetGroupALTHTTPS93D5F701:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 8443
      Protocol: TCP
      Targets:
        - Id:
            Fn::Select:
              - 0
              - Fn::GetAtt:
                  - IoTVPCEndpointIPs
                  - IPs
        - Id:
            Fn::Select:
              - 1
              - Fn::GetAtt:
                  - IoTVPCEndpointIPs
                  - IPs
      TargetType: ip
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: IoTEndpointStaticIPs/TargetGroup-ALT-HTTPS/Resource
  TargetGroupMQTTSFF7FA92C:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 8883
      Protocol: TCP
      Targets:
        - Id:
            Fn::Select:
              - 0
              - Fn::GetAtt:
                  - IoTVPCEndpointIPs
                  - IPs
        - Id:
            Fn::Select:
              - 1
              - Fn::GetAtt:
                  - IoTVPCEndpointIPs
                  - IPs
      TargetType: ip
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: IoTEndpointStaticIPs/TargetGroup-MQTTS/Resource
  DNSRecord4A9429C1:
    Type: AWS::Route53::RecordSet
    Properties:
      Name:
        Fn::Join:
          - ""
          - - Ref: DomainName
            - "."
      Type: A
      AliasTarget:
        DNSName:
          Fn::Join:
            - ""
            - - dualstack.
              - Fn::GetAtt:
                  - NLB55158F82
                  - DNSName
        HostedZoneId:
          Fn::GetAtt:
            - NLB55158F82
            - CanonicalHostedZoneID
      HostedZoneId:
        Ref: Route53HostedZoneId
    Metadata:
      aws:cdk:path: IoTEndpointStaticIPs/DNSRecord/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/1VR0W7CMAz8lr2HbGVC2itjDCFNW9UiXic3dTtDm1SJA0JV/31pKSo85e7s2JfLXEYL+fIEZzdT+XFWUSbblEEdxarQMViokdH2ZGV0TkxGi9D826Kay3bfqL60j1ci9llFKvWZRu61CSXGM+4gq3DSJ23pnFEEw+Bbs4gtnYBxmrHVwUXAm6Ce4TIuHdmSg+G/GjWLFJW3xJeNNb4Z1j0Iw5gCFAbja503hjSPs+7peht3QqFlKkiFHTVoKNHKdjVpQyQT7QQZlkH7MDVQH1ZBpbfXdxHUsk3MNYD+7EQFdZZDf+HTazV0YQWOSVUG8gwq0Ip0eQohfyOfjT1+Bf190K//8cBvPeQY9Vi/4bG2A1uGAG/B3NFO2D71xatslwkqY/PB54BS5K4TCTrjrQr+vWNTT7Rvm/CP58ZzJ7TJUR7c8yl6k9FcRk8HRzSzXjPVKJPr+Q/aSpUlegIAAA==
    Metadata:
      aws:cdk:path: IoTEndpointStaticIPs/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Outputs:
  OutputElasticIP1:
    Description: Static IP address for IoT Endpoint at the new domain.
    Value:
      Ref: ElasticIP1
  OutputElasticIP2:
    Description: Static IP address for IoT Endpoint at the new domain.
    Value:
      Ref: ElasticIP2
Rules:
  CheckBootstrapVersion:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::Contains:
                - - "1"
                  - "2"
                  - "3"
                  - "4"
                  - "5"
                - Ref: BootstrapVersion
        AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.

