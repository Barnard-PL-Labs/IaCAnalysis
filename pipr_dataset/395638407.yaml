Resources:
  passwordstore5E345815:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: ServerlessPasswordServiceStack/password-store/Resource
  PostFunctionServiceRole1BB2A70F:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: ServerlessPasswordServiceStack/PostFunction/ServiceRole/Resource
  PostFunctionServiceRoleDefaultPolicy2A61B0F2:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - dynamodb:BatchGetItem
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:Query
              - dynamodb:GetItem
              - dynamodb:Scan
              - dynamodb:ConditionCheckItem
              - dynamodb:BatchWriteItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - passwordstore5E345815
                  - Arn
              - Ref: AWS::NoValue
        Version: "2012-10-17"
      PolicyName: PostFunctionServiceRoleDefaultPolicy2A61B0F2
      Roles:
        - Ref: PostFunctionServiceRole1BB2A70F
    Metadata:
      aws:cdk:path: ServerlessPasswordServiceStack/PostFunction/ServiceRole/DefaultPolicy/Resource
  PostFunction61046647:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: AssetParametersb05af48f6e8d80f7a7087dbdeb1f0cb9a1e794374e7c7f26cdda8c6791eec260S3Bucket1E14CC26
        S3Key:
          Fn::Join:
            - ""
            - - Fn::Select:
                  - 0
                  - Fn::Split:
                      - "||"
                      - Ref: AssetParametersb05af48f6e8d80f7a7087dbdeb1f0cb9a1e794374e7c7f26cdda8c6791eec260S3VersionKey0011344B
              - Fn::Select:
                  - 1
                  - Fn::Split:
                      - "||"
                      - Ref: AssetParametersb05af48f6e8d80f7a7087dbdeb1f0cb9a1e794374e7c7f26cdda8c6791eec260S3VersionKey0011344B
      Role:
        Fn::GetAtt:
          - PostFunctionServiceRole1BB2A70F
          - Arn
      Environment:
        Variables:
          TABLE_NAME:
            Ref: passwordstore5E345815
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
      Handler: index.post
      Runtime: nodejs12.x
    DependsOn:
      - PostFunctionServiceRoleDefaultPolicy2A61B0F2
      - PostFunctionServiceRole1BB2A70F
    Metadata:
      aws:cdk:path: ServerlessPasswordServiceStack/PostFunction/Resource
      aws:asset:path: asset.b05af48f6e8d80f7a7087dbdeb1f0cb9a1e794374e7c7f26cdda8c6791eec260
      aws:asset:property: Code
  GetFunctionServiceRoleE63CDF24:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: ServerlessPasswordServiceStack/GetFunction/ServiceRole/Resource
  GetFunctionServiceRoleDefaultPolicy6662E031:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - dynamodb:BatchGetItem
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:Query
              - dynamodb:GetItem
              - dynamodb:Scan
              - dynamodb:ConditionCheckItem
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - passwordstore5E345815
                  - Arn
              - Ref: AWS::NoValue
        Version: "2012-10-17"
      PolicyName: GetFunctionServiceRoleDefaultPolicy6662E031
      Roles:
        - Ref: GetFunctionServiceRoleE63CDF24
    Metadata:
      aws:cdk:path: ServerlessPasswordServiceStack/GetFunction/ServiceRole/DefaultPolicy/Resource
  GetFunctionC96F89C4:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: AssetParametersb05af48f6e8d80f7a7087dbdeb1f0cb9a1e794374e7c7f26cdda8c6791eec260S3Bucket1E14CC26
        S3Key:
          Fn::Join:
            - ""
            - - Fn::Select:
                  - 0
                  - Fn::Split:
                      - "||"
                      - Ref: AssetParametersb05af48f6e8d80f7a7087dbdeb1f0cb9a1e794374e7c7f26cdda8c6791eec260S3VersionKey0011344B
              - Fn::Select:
                  - 1
                  - Fn::Split:
                      - "||"
                      - Ref: AssetParametersb05af48f6e8d80f7a7087dbdeb1f0cb9a1e794374e7c7f26cdda8c6791eec260S3VersionKey0011344B
      Role:
        Fn::GetAtt:
          - GetFunctionServiceRoleE63CDF24
          - Arn
      Environment:
        Variables:
          TABLE_NAME:
            Ref: passwordstore5E345815
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
      Handler: index.get
      Runtime: nodejs12.x
    DependsOn:
      - GetFunctionServiceRoleDefaultPolicy6662E031
      - GetFunctionServiceRoleE63CDF24
    Metadata:
      aws:cdk:path: ServerlessPasswordServiceStack/GetFunction/Resource
      aws:asset:path: asset.b05af48f6e8d80f7a7087dbdeb1f0cb9a1e794374e7c7f26cdda8c6791eec260
      aws:asset:property: Code
  ApiF70053CD:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: Api
      ProtocolType: HTTP
    Metadata:
      aws:cdk:path: ServerlessPasswordServiceStack/Api/Resource
  ApiDefaultStage189A7074:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId:
        Ref: ApiF70053CD
      StageName: $default
      AutoDeploy: true
    Metadata:
      aws:cdk:path: ServerlessPasswordServiceStack/Api/DefaultStage/Resource
  ApiPOSTtasksServerlessPasswordServiceStackApiPOSTtasks94D30099Permission1EC26F4A:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - PostFunction61046647
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:us-west-2:296366873768:"
            - Ref: ApiF70053CD
            - /*/*/tasks
    Metadata:
      aws:cdk:path: ServerlessPasswordServiceStack/Api/POST--tasks/ServerlessPasswordServiceStackApiPOSTtasks94D30099-Permission
  ApiPOSTtasksHttpIntegration9d0218fb87d248ae6ac3ea6e9da0f65f066497FD:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: ApiF70053CD
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::GetAtt:
          - PostFunction61046647
          - Arn
      PayloadFormatVersion: "2.0"
    Metadata:
      aws:cdk:path: ServerlessPasswordServiceStack/Api/POST--tasks/HttpIntegration-9d0218fb87d248ae6ac3ea6e9da0f65f/Resource
  ApiPOSTtasksA41DA87F:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: ApiF70053CD
      RouteKey: POST /tasks
      AuthorizationType: NONE
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: ApiPOSTtasksHttpIntegration9d0218fb87d248ae6ac3ea6e9da0f65f066497FD
    Metadata:
      aws:cdk:path: ServerlessPasswordServiceStack/Api/POST--tasks/Resource
  ApiGETtasksServerlessPasswordServiceStackApiGETtasksED6EB23APermission185B7EB7:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - GetFunctionC96F89C4
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:us-west-2:296366873768:"
            - Ref: ApiF70053CD
            - /*/*/tasks
    Metadata:
      aws:cdk:path: ServerlessPasswordServiceStack/Api/GET--tasks/ServerlessPasswordServiceStackApiGETtasksED6EB23A-Permission
  ApiGETtasksHttpIntegrationdcaf99528392ba35aab0bff7f282e9cf09A14E7D:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: ApiF70053CD
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::GetAtt:
          - GetFunctionC96F89C4
          - Arn
      PayloadFormatVersion: "2.0"
    Metadata:
      aws:cdk:path: ServerlessPasswordServiceStack/Api/GET--tasks/HttpIntegration-dcaf99528392ba35aab0bff7f282e9cf/Resource
  ApiGETtasks155BC0CF:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: ApiF70053CD
      RouteKey: GET /tasks
      AuthorizationType: NONE
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: ApiGETtasksHttpIntegrationdcaf99528392ba35aab0bff7f282e9cf09A14E7D
    Metadata:
      aws:cdk:path: ServerlessPasswordServiceStack/Api/GET--tasks/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAAE11Qy07DMBD8lt6dLSkXjrSVEFygCvzAxlki52FH3nWryMq/EzuUA6eZWe2MZ11CWT7Bw+4Zb1zopt9H7TxB/BTUvaqIXfCa1JGZZJ21xrbq7CyLD1rU+dte0ONIQj6JjyBTyOO7c1EpODazxdE1NcQvrAdKG5ksasCxbrCwrqGO4T3DS7BajLPK4Aixcpsh48UNRs/54cwWxY8FpnYMueSq4RR0T3JCpt94iKvhLzWZyY+GeVVrwcm0KHTD+XqA+CoyHSeTlhIkme7ODTaSRpULsrE3K9R6vAf/k3lvWRaV7oOO99f1t8sDlLuOjSl8sGJGgmrDH41TEAaNAQAA
    Metadata:
      aws:cdk:path: ServerlessPasswordServiceStack/CDKMetadata/Default
Parameters:
  AssetParametersb05af48f6e8d80f7a7087dbdeb1f0cb9a1e794374e7c7f26cdda8c6791eec260S3Bucket1E14CC26:
    Type: String
    Description: S3 bucket for asset "b05af48f6e8d80f7a7087dbdeb1f0cb9a1e794374e7c7f26cdda8c6791eec260"
  AssetParametersb05af48f6e8d80f7a7087dbdeb1f0cb9a1e794374e7c7f26cdda8c6791eec260S3VersionKey0011344B:
    Type: String
    Description: S3 key for asset version "b05af48f6e8d80f7a7087dbdeb1f0cb9a1e794374e7c7f26cdda8c6791eec260"
  AssetParametersb05af48f6e8d80f7a7087dbdeb1f0cb9a1e794374e7c7f26cdda8c6791eec260ArtifactHashDB7E3DD6:
    Type: String
    Description: Artifact hash for asset "b05af48f6e8d80f7a7087dbdeb1f0cb9a1e794374e7c7f26cdda8c6791eec260"
Outputs:
  ApiUrl:
    Value:
      Fn::Join:
        - ""
        - - https://
          - Ref: ApiF70053CD
          - .execute-api.us-west-2.
          - Ref: AWS::URLSuffix
          - /

