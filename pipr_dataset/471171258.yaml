Resources:
  MyClusterMyVpcB3690D4F:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: MyEcsStack/MyCluster/MyVpc
    Metadata:
      aws:cdk:path: MyEcsStack/MyCluster/MyVpc/Resource
  MyClusterMyVpcPublicSubnet1SubnetE120AD3C:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/18
      VpcId:
        Ref: MyClusterMyVpcB3690D4F
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: MyEcsStack/MyCluster/MyVpc/PublicSubnet1
    Metadata:
      aws:cdk:path: MyEcsStack/MyCluster/MyVpc/PublicSubnet1/Subnet
  MyClusterMyVpcPublicSubnet1RouteTableC7AD249A:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyClusterMyVpcB3690D4F
      Tags:
        - Key: Name
          Value: MyEcsStack/MyCluster/MyVpc/PublicSubnet1
    Metadata:
      aws:cdk:path: MyEcsStack/MyCluster/MyVpc/PublicSubnet1/RouteTable
  MyClusterMyVpcPublicSubnet1RouteTableAssociation861AEB0B:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyClusterMyVpcPublicSubnet1RouteTableC7AD249A
      SubnetId:
        Ref: MyClusterMyVpcPublicSubnet1SubnetE120AD3C
    Metadata:
      aws:cdk:path: MyEcsStack/MyCluster/MyVpc/PublicSubnet1/RouteTableAssociation
  MyClusterMyVpcPublicSubnet1DefaultRoute3832DED6:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MyClusterMyVpcPublicSubnet1RouteTableC7AD249A
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: MyClusterMyVpcIGWA3F5FA1C
    DependsOn:
      - MyClusterMyVpcVPCGW5C8E4951
    Metadata:
      aws:cdk:path: MyEcsStack/MyCluster/MyVpc/PublicSubnet1/DefaultRoute
  MyClusterMyVpcPublicSubnet1EIP770776A6:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: MyEcsStack/MyCluster/MyVpc/PublicSubnet1
    Metadata:
      aws:cdk:path: MyEcsStack/MyCluster/MyVpc/PublicSubnet1/EIP
  MyClusterMyVpcPublicSubnet1NATGatewayD456AE3B:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId:
        Ref: MyClusterMyVpcPublicSubnet1SubnetE120AD3C
      AllocationId:
        Fn::GetAtt:
          - MyClusterMyVpcPublicSubnet1EIP770776A6
          - AllocationId
      Tags:
        - Key: Name
          Value: MyEcsStack/MyCluster/MyVpc/PublicSubnet1
    Metadata:
      aws:cdk:path: MyEcsStack/MyCluster/MyVpc/PublicSubnet1/NATGateway
  MyClusterMyVpcPublicSubnet2SubnetE5FCBA38:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.64.0/18
      VpcId:
        Ref: MyClusterMyVpcB3690D4F
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: MyEcsStack/MyCluster/MyVpc/PublicSubnet2
    Metadata:
      aws:cdk:path: MyEcsStack/MyCluster/MyVpc/PublicSubnet2/Subnet
  MyClusterMyVpcPublicSubnet2RouteTable4EDD0310:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyClusterMyVpcB3690D4F
      Tags:
        - Key: Name
          Value: MyEcsStack/MyCluster/MyVpc/PublicSubnet2
    Metadata:
      aws:cdk:path: MyEcsStack/MyCluster/MyVpc/PublicSubnet2/RouteTable
  MyClusterMyVpcPublicSubnet2RouteTableAssociationE0F6CD6E:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyClusterMyVpcPublicSubnet2RouteTable4EDD0310
      SubnetId:
        Ref: MyClusterMyVpcPublicSubnet2SubnetE5FCBA38
    Metadata:
      aws:cdk:path: MyEcsStack/MyCluster/MyVpc/PublicSubnet2/RouteTableAssociation
  MyClusterMyVpcPublicSubnet2DefaultRouteD6A1570C:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MyClusterMyVpcPublicSubnet2RouteTable4EDD0310
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: MyClusterMyVpcIGWA3F5FA1C
    DependsOn:
      - MyClusterMyVpcVPCGW5C8E4951
    Metadata:
      aws:cdk:path: MyEcsStack/MyCluster/MyVpc/PublicSubnet2/DefaultRoute
  MyClusterMyVpcPublicSubnet2EIP67E55EE5:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: MyEcsStack/MyCluster/MyVpc/PublicSubnet2
    Metadata:
      aws:cdk:path: MyEcsStack/MyCluster/MyVpc/PublicSubnet2/EIP
  MyClusterMyVpcPublicSubnet2NATGateway83729DCE:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId:
        Ref: MyClusterMyVpcPublicSubnet2SubnetE5FCBA38
      AllocationId:
        Fn::GetAtt:
          - MyClusterMyVpcPublicSubnet2EIP67E55EE5
          - AllocationId
      Tags:
        - Key: Name
          Value: MyEcsStack/MyCluster/MyVpc/PublicSubnet2
    Metadata:
      aws:cdk:path: MyEcsStack/MyCluster/MyVpc/PublicSubnet2/NATGateway
  MyClusterMyVpcPrivateSubnet1Subnet04B5649F:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.128.0/18
      VpcId:
        Ref: MyClusterMyVpcB3690D4F
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: MyEcsStack/MyCluster/MyVpc/PrivateSubnet1
    Metadata:
      aws:cdk:path: MyEcsStack/MyCluster/MyVpc/PrivateSubnet1/Subnet
  MyClusterMyVpcPrivateSubnet1RouteTable40E5E214:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyClusterMyVpcB3690D4F
      Tags:
        - Key: Name
          Value: MyEcsStack/MyCluster/MyVpc/PrivateSubnet1
    Metadata:
      aws:cdk:path: MyEcsStack/MyCluster/MyVpc/PrivateSubnet1/RouteTable
  MyClusterMyVpcPrivateSubnet1RouteTableAssociation501EFFC2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyClusterMyVpcPrivateSubnet1RouteTable40E5E214
      SubnetId:
        Ref: MyClusterMyVpcPrivateSubnet1Subnet04B5649F
    Metadata:
      aws:cdk:path: MyEcsStack/MyCluster/MyVpc/PrivateSubnet1/RouteTableAssociation
  MyClusterMyVpcPrivateSubnet1DefaultRoute794CF13D:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MyClusterMyVpcPrivateSubnet1RouteTable40E5E214
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: MyClusterMyVpcPublicSubnet1NATGatewayD456AE3B
    Metadata:
      aws:cdk:path: MyEcsStack/MyCluster/MyVpc/PrivateSubnet1/DefaultRoute
  MyClusterMyVpcPrivateSubnet2SubnetD7F74814:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.192.0/18
      VpcId:
        Ref: MyClusterMyVpcB3690D4F
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: MyEcsStack/MyCluster/MyVpc/PrivateSubnet2
    Metadata:
      aws:cdk:path: MyEcsStack/MyCluster/MyVpc/PrivateSubnet2/Subnet
  MyClusterMyVpcPrivateSubnet2RouteTableC6413650:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyClusterMyVpcB3690D4F
      Tags:
        - Key: Name
          Value: MyEcsStack/MyCluster/MyVpc/PrivateSubnet2
    Metadata:
      aws:cdk:path: MyEcsStack/MyCluster/MyVpc/PrivateSubnet2/RouteTable
  MyClusterMyVpcPrivateSubnet2RouteTableAssociationD444C9E1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyClusterMyVpcPrivateSubnet2RouteTableC6413650
      SubnetId:
        Ref: MyClusterMyVpcPrivateSubnet2SubnetD7F74814
    Metadata:
      aws:cdk:path: MyEcsStack/MyCluster/MyVpc/PrivateSubnet2/RouteTableAssociation
  MyClusterMyVpcPrivateSubnet2DefaultRoute72414217:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MyClusterMyVpcPrivateSubnet2RouteTableC6413650
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: MyClusterMyVpcPublicSubnet2NATGateway83729DCE
    Metadata:
      aws:cdk:path: MyEcsStack/MyCluster/MyVpc/PrivateSubnet2/DefaultRoute
  MyClusterMyVpcIGWA3F5FA1C:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MyEcsStack/MyCluster/MyVpc
    Metadata:
      aws:cdk:path: MyEcsStack/MyCluster/MyVpc/IGW
  MyClusterMyVpcVPCGW5C8E4951:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: MyClusterMyVpcB3690D4F
      InternetGatewayId:
        Ref: MyClusterMyVpcIGWA3F5FA1C
    Metadata:
      aws:cdk:path: MyEcsStack/MyCluster/MyVpc/VPCGW
  MyCluster96E166F1:
    Type: AWS::ECS::Cluster
    Metadata:
      aws:cdk:path: MyEcsStack/MyCluster/MyCluster/Resource
  MyClusterMyFargateServiceLB4A119228:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: "false"
      Scheme: internet-facing
      SecurityGroups:
        - Fn::GetAtt:
            - MyClusterMyFargateServiceLBSecurityGroup8D149EC7
            - GroupId
      Subnets:
        - Ref: MyClusterMyVpcPublicSubnet1SubnetE120AD3C
        - Ref: MyClusterMyVpcPublicSubnet2SubnetE5FCBA38
      Type: application
    DependsOn:
      - MyClusterMyVpcPublicSubnet1DefaultRoute3832DED6
      - MyClusterMyVpcPublicSubnet2DefaultRouteD6A1570C
    Metadata:
      aws:cdk:path: MyEcsStack/MyCluster/MyFargateService/LB/Resource
  MyClusterMyFargateServiceLBSecurityGroup8D149EC7:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatically created Security Group for ELB MyEcsStackMyClusterMyFargateServiceLBFC8D02EF
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Ref: MyClusterMyVpcB3690D4F
    Metadata:
      aws:cdk:path: MyEcsStack/MyCluster/MyFargateService/LB/SecurityGroup/Resource
  MyClusterMyFargateServiceLBSecurityGrouptoMyEcsStackMyClusterMyFargateServiceSecurityGroup88638850804B401C10:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId:
        Fn::GetAtt:
          - MyClusterMyFargateServiceLBSecurityGroup8D149EC7
          - GroupId
      IpProtocol: tcp
      Description: Load balancer to target
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - MyClusterMyFargateServiceSecurityGroup845309D9
          - GroupId
      FromPort: 80
      ToPort: 80
    Metadata:
      aws:cdk:path: MyEcsStack/MyCluster/MyFargateService/LB/SecurityGroup/to MyEcsStackMyClusterMyFargateServiceSecurityGroup88638850:80
  MyClusterMyFargateServiceLBPublicListener6968899F:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: MyClusterMyFargateServiceLBPublicListenerECSGroup5D76611E
          Type: forward
      LoadBalancerArn:
        Ref: MyClusterMyFargateServiceLB4A119228
      Port: 80
      Protocol: HTTP
    Metadata:
      aws:cdk:path: MyEcsStack/MyCluster/MyFargateService/LB/PublicListener/Resource
  MyClusterMyFargateServiceLBPublicListenerECSGroup5D76611E:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: "false"
      TargetType: ip
      VpcId:
        Ref: MyClusterMyVpcB3690D4F
    Metadata:
      aws:cdk:path: MyEcsStack/MyCluster/MyFargateService/LB/PublicListener/ECSGroup/Resource
  MyClusterMyFargateServiceTaskDefTaskRole2E302C40:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: MyEcsStack/MyCluster/MyFargateService/TaskDef/TaskRole/Resource
  MyClusterMyFargateServiceTaskDef0DD3E8E0:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image:
            Fn::Sub: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/cdk-hnb659fds-container-assets-${AWS::AccountId}-${AWS::Region}:5da5e52278dc96e7a2624c2c077043f3dbcb4cc3406f0e391563e89bb262ddc5
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: MyClusterMyFargateServiceTaskDefwebLogGroup07C148EB
              awslogs-stream-prefix: MyFargateService
              awslogs-region:
                Ref: AWS::Region
          Name: web
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
      Cpu: "512"
      ExecutionRoleArn:
        Fn::GetAtt:
          - MyClusterMyFargateServiceTaskDefExecutionRole2FAA343A
          - Arn
      Family: MyEcsStackMyClusterMyFargateServiceTaskDef90D4A7D6
      Memory: "1024"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::GetAtt:
          - MyClusterMyFargateServiceTaskDefTaskRole2E302C40
          - Arn
    Metadata:
      aws:cdk:path: MyEcsStack/MyCluster/MyFargateService/TaskDef/Resource
  MyClusterMyFargateServiceTaskDefwebLogGroup07C148EB:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: MyEcsStack/MyCluster/MyFargateService/TaskDef/web/LogGroup/Resource
  MyClusterMyFargateServiceTaskDefExecutionRole2FAA343A:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: MyEcsStack/MyCluster/MyFargateService/TaskDef/ExecutionRole/Resource
  MyClusterMyFargateServiceTaskDefExecutionRoleDefaultPolicy61C4F9CC:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":ecr:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :repository/
                  - Fn::Sub: cdk-hnb659fds-container-assets-${AWS::AccountId}-${AWS::Region}
          - Action: ecr:GetAuthorizationToken
            Effect: Allow
            Resource: "*"
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - MyClusterMyFargateServiceTaskDefwebLogGroup07C148EB
                - Arn
        Version: "2012-10-17"
      PolicyName: MyClusterMyFargateServiceTaskDefExecutionRoleDefaultPolicy61C4F9CC
      Roles:
        - Ref: MyClusterMyFargateServiceTaskDefExecutionRole2FAA343A
    Metadata:
      aws:cdk:path: MyEcsStack/MyCluster/MyFargateService/TaskDef/ExecutionRole/DefaultPolicy/Resource
  MyClusterMyFargateServiceC2C66686:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: MyCluster96E166F1
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 3
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: web
          ContainerPort: 80
          TargetGroupArn:
            Ref: MyClusterMyFargateServiceLBPublicListenerECSGroup5D76611E
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::GetAtt:
                - MyClusterMyFargateServiceSecurityGroup845309D9
                - GroupId
          Subnets:
            - Ref: MyClusterMyVpcPrivateSubnet1Subnet04B5649F
            - Ref: MyClusterMyVpcPrivateSubnet2SubnetD7F74814
      TaskDefinition:
        Ref: MyClusterMyFargateServiceTaskDef0DD3E8E0
    DependsOn:
      - MyClusterMyFargateServiceLBPublicListenerECSGroup5D76611E
      - MyClusterMyFargateServiceLBPublicListener6968899F
    Metadata:
      aws:cdk:path: MyEcsStack/MyCluster/MyFargateService/Service/Service
  MyClusterMyFargateServiceSecurityGroup845309D9:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: MyEcsStack/MyCluster/MyFargateService/Service/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: MyClusterMyVpcB3690D4F
    Metadata:
      aws:cdk:path: MyEcsStack/MyCluster/MyFargateService/Service/SecurityGroup/Resource
  MyClusterMyFargateServiceSecurityGroupfromMyEcsStackMyClusterMyFargateServiceLBSecurityGroupCFFA0B8280D0EB959E:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort: 80
      GroupId:
        Fn::GetAtt:
          - MyClusterMyFargateServiceSecurityGroup845309D9
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - MyClusterMyFargateServiceLBSecurityGroup8D149EC7
          - GroupId
      ToPort: 80
    Metadata:
      aws:cdk:path: MyEcsStack/MyCluster/MyFargateService/Service/SecurityGroup/from MyEcsStackMyClusterMyFargateServiceLBSecurityGroupCFFA0B82:80
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/31SwW7bMAz9lt4Vbcmlu6ZpVwQoWsMJeg1omXXZOJIhSgkCw/8+Wo4brx120uPTo0g+aqHnt/rnDZx4Zsr9rKZCt5sAZq+E2rVoFrp9bYxavdnXbKWyWNRkNrGwGHruinIXA26hqPHKX7klszMEgZz9FPfgYZ31xzOERwh4grPKPB0FXh9e24Be8CgYOrlEyyC9vh/QBrVBEz2F86N3sUk9/Jd4qDwyf6PXNvGdQsO6XdWRpXqvGuFv8BX0U/H+Ht/I0jjTV8bZAGTRT7hL7gb9kczg0wBTuV0DoR+V9bJpxOXk1pOD8g5qsAbLL+lYAwcytSiKpCBbHWVd/85OQ/wVT3Uks9mLZsST+61Ulg2MRk7CThEcdJu7Ye/pzJzkpUUNqJ/O74AZA+t7Z/bo1weo+k8hK5Y7nWPjmILz5ztgVLWrxPwnV31WHHHXqRzZRT/Y9xJDE4NKD8mvrcSB1MVEInsok/udsq5E/cE/jvNfer7Q85sPJpr5aAMdUOfD+QcC6uZpEQMAAA==
    Metadata:
      aws:cdk:path: MyEcsStack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Outputs:
  MyClusterMyFargateServiceLoadBalancerDNS12C81C20:
    Value:
      Fn::GetAtt:
        - MyClusterMyFargateServiceLB4A119228
        - DNSName
  MyClusterMyFargateServiceServiceURL9010526A:
    Value:
      Fn::Join:
        - ""
        - - http://
          - Fn::GetAtt:
              - MyClusterMyFargateServiceLB4A119228
              - DNSName
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
Rules:
  CheckBootstrapVersion:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::Contains:
                - - "1"
                  - "2"
                  - "3"
                  - "4"
                  - "5"
                - Ref: BootstrapVersion
        AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.

