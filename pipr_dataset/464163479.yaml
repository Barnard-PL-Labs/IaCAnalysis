Description: Fargate + Next.js
Resources:
  PokeVPC3A5CF89A:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: PokeService/PokeVPC
    Metadata:
      aws:cdk:path: PokeService/PokeVPC/Resource
  PokeVPCingressSubnet1Subnet672E6D99:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      VpcId:
        Ref: PokeVPC3A5CF89A
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: ingress
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: PokeService/PokeVPC/ingressSubnet1
    Metadata:
      aws:cdk:path: PokeService/PokeVPC/ingressSubnet1/Subnet
  PokeVPCingressSubnet1RouteTableD9A066F1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: PokeVPC3A5CF89A
      Tags:
        - Key: Name
          Value: PokeService/PokeVPC/ingressSubnet1
    Metadata:
      aws:cdk:path: PokeService/PokeVPC/ingressSubnet1/RouteTable
  PokeVPCingressSubnet1RouteTableAssociationDB2EDACF:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PokeVPCingressSubnet1RouteTableD9A066F1
      SubnetId:
        Ref: PokeVPCingressSubnet1Subnet672E6D99
    Metadata:
      aws:cdk:path: PokeService/PokeVPC/ingressSubnet1/RouteTableAssociation
  PokeVPCingressSubnet1DefaultRouteE310C1CC:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PokeVPCingressSubnet1RouteTableD9A066F1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: PokeVPCIGWBB3FBB0D
    DependsOn:
      - PokeVPCVPCGW0BB2ABF7
    Metadata:
      aws:cdk:path: PokeService/PokeVPC/ingressSubnet1/DefaultRoute
  PokeVPCingressSubnet2Subnet798380A8:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      VpcId:
        Ref: PokeVPC3A5CF89A
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: ingress
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: PokeService/PokeVPC/ingressSubnet2
    Metadata:
      aws:cdk:path: PokeService/PokeVPC/ingressSubnet2/Subnet
  PokeVPCingressSubnet2RouteTableD6E01CBC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: PokeVPC3A5CF89A
      Tags:
        - Key: Name
          Value: PokeService/PokeVPC/ingressSubnet2
    Metadata:
      aws:cdk:path: PokeService/PokeVPC/ingressSubnet2/RouteTable
  PokeVPCingressSubnet2RouteTableAssociation3D5466BB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PokeVPCingressSubnet2RouteTableD6E01CBC
      SubnetId:
        Ref: PokeVPCingressSubnet2Subnet798380A8
    Metadata:
      aws:cdk:path: PokeService/PokeVPC/ingressSubnet2/RouteTableAssociation
  PokeVPCingressSubnet2DefaultRoute0263F21A:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PokeVPCingressSubnet2RouteTableD6E01CBC
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: PokeVPCIGWBB3FBB0D
    DependsOn:
      - PokeVPCVPCGW0BB2ABF7
    Metadata:
      aws:cdk:path: PokeService/PokeVPC/ingressSubnet2/DefaultRoute
  PokeVPCIGWBB3FBB0D:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: PokeService/PokeVPC
    Metadata:
      aws:cdk:path: PokeService/PokeVPC/IGW
  PokeVPCVPCGW0BB2ABF7:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: PokeVPC3A5CF89A
      InternetGatewayId:
        Ref: PokeVPCIGWBB3FBB0D
    Metadata:
      aws:cdk:path: PokeService/PokeVPC/VPCGW
  PokeCluster01EF5793:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: PokeCluster
    Metadata:
      aws:cdk:path: PokeService/PokeCluster/Resource
  PokeFargateServiceLBD155F24A:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: "false"
      Scheme: internet-facing
      SecurityGroups:
        - Fn::GetAtt:
            - PokeFargateServiceLBSecurityGroup4DCA3AE6
            - GroupId
      Subnets:
        - Ref: PokeVPCingressSubnet1Subnet672E6D99
        - Ref: PokeVPCingressSubnet2Subnet798380A8
      Type: application
    DependsOn:
      - PokeVPCingressSubnet1DefaultRouteE310C1CC
      - PokeVPCingressSubnet2DefaultRoute0263F21A
    Metadata:
      aws:cdk:path: PokeService/PokeFargateService/LB/Resource
  PokeFargateServiceLBSecurityGroup4DCA3AE6:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatically created Security Group for ELB PokeServicePokeFargateServiceLBB83A2E81
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Ref: PokeVPC3A5CF89A
    Metadata:
      aws:cdk:path: PokeService/PokeFargateService/LB/SecurityGroup/Resource
  PokeFargateServiceLBSecurityGrouptoPokeServicePokeFargateServiceSecurityGroup240F7EFF3000FB6E3C9E:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId:
        Fn::GetAtt:
          - PokeFargateServiceLBSecurityGroup4DCA3AE6
          - GroupId
      IpProtocol: tcp
      Description: Load balancer to target
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - PokeFargateServiceSecurityGroupD4DE9D90
          - GroupId
      FromPort: 3000
      ToPort: 3000
    Metadata:
      aws:cdk:path: PokeService/PokeFargateService/LB/SecurityGroup/to PokeServicePokeFargateServiceSecurityGroup240F7EFF:3000
  PokeFargateServiceLBPublicListener753B1879:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: PokeFargateServiceLBPublicListenerECSGroupC01047A8
          Type: forward
      LoadBalancerArn:
        Ref: PokeFargateServiceLBD155F24A
      Port: 80
      Protocol: HTTP
    Metadata:
      aws:cdk:path: PokeService/PokeFargateService/LB/PublicListener/Resource
  PokeFargateServiceLBPublicListenerECSGroupC01047A8:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: "false"
      TargetType: ip
      VpcId:
        Ref: PokeVPC3A5CF89A
    Metadata:
      aws:cdk:path: PokeService/PokeFargateService/LB/PublicListener/ECSGroup/Resource
  PokeFargateServiceTaskDefTaskRole52E4621A:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: PokeService/PokeFargateService/TaskDef/TaskRole/Resource
  PokeFargateServiceTaskDef70615A69:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image:
            Fn::Sub: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/cdk-hnb659fds-container-assets-${AWS::AccountId}-${AWS::Region}:8b12393662b5dda2447813ddc4090916c8556f5edc15c34eb8be2eaf1f4196b6
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: PokeFargateServiceTaskDefwebLogGroup6BA5A79E
              awslogs-stream-prefix: PokeFargateService
              awslogs-region:
                Ref: AWS::Region
          Name: web
          PortMappings:
            - ContainerPort: 3000
              Protocol: tcp
      Cpu: "512"
      ExecutionRoleArn:
        Fn::GetAtt:
          - PokeFargateServiceTaskDefExecutionRoleF0CFA99A
          - Arn
      Family: PokeServicePokeFargateServiceTaskDef927B7BBE
      Memory: "1024"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::GetAtt:
          - PokeFargateServiceTaskDefTaskRole52E4621A
          - Arn
    Metadata:
      aws:cdk:path: PokeService/PokeFargateService/TaskDef/Resource
  PokeFargateServiceTaskDefwebLogGroup6BA5A79E:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: PokeService/PokeFargateService/TaskDef/web/LogGroup/Resource
  PokeFargateServiceTaskDefExecutionRoleF0CFA99A:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: PokeService/PokeFargateService/TaskDef/ExecutionRole/Resource
  PokeFargateServiceTaskDefExecutionRoleDefaultPolicy5B14EC52:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":ecr:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :repository/
                  - Fn::Sub: cdk-hnb659fds-container-assets-${AWS::AccountId}-${AWS::Region}
          - Action: ecr:GetAuthorizationToken
            Effect: Allow
            Resource: "*"
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - PokeFargateServiceTaskDefwebLogGroup6BA5A79E
                - Arn
        Version: "2012-10-17"
      PolicyName: PokeFargateServiceTaskDefExecutionRoleDefaultPolicy5B14EC52
      Roles:
        - Ref: PokeFargateServiceTaskDefExecutionRoleF0CFA99A
    Metadata:
      aws:cdk:path: PokeService/PokeFargateService/TaskDef/ExecutionRole/DefaultPolicy/Resource
  PokeFargateServiceFF7FB5FC:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: PokeCluster01EF5793
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 2
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: web
          ContainerPort: 3000
          TargetGroupArn:
            Ref: PokeFargateServiceLBPublicListenerECSGroupC01047A8
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Fn::GetAtt:
                - PokeFargateServiceSecurityGroupD4DE9D90
                - GroupId
          Subnets:
            - Ref: PokeVPCingressSubnet1Subnet672E6D99
            - Ref: PokeVPCingressSubnet2Subnet798380A8
      TaskDefinition:
        Ref: PokeFargateServiceTaskDef70615A69
    DependsOn:
      - PokeFargateServiceLBPublicListenerECSGroupC01047A8
      - PokeFargateServiceLBPublicListener753B1879
    Metadata:
      aws:cdk:path: PokeService/PokeFargateService/Service/Service
  PokeFargateServiceSecurityGroupD4DE9D90:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: PokeService/PokeFargateService/Service/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: PokeVPC3A5CF89A
    Metadata:
      aws:cdk:path: PokeService/PokeFargateService/Service/SecurityGroup/Resource
  PokeFargateServiceSecurityGroupfromPokeServicePokeFargateServiceLBSecurityGroupCAE65B65300055217BFB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort: 3000
      GroupId:
        Fn::GetAtt:
          - PokeFargateServiceSecurityGroupD4DE9D90
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - PokeFargateServiceLBSecurityGroup4DCA3AE6
          - GroupId
      ToPort: 3000
    Metadata:
      aws:cdk:path: PokeService/PokeFargateService/Service/SecurityGroup/from PokeServicePokeFargateServiceLBSecurityGroupCAE65B65:3000
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/31STU/DMAz9LdyzwCYOXMeAaRISU4e4Tm5qilmXVHEyNFX977jpysqHOOX55Tm2nzPT02t9dQEfPDHFblJRrptNALNTQm0bNDPdvNRGLV7ty3qh1jGvyGxibjF03BllLgZ8hrzCM3/m5szOEARy9kvcgZUN6EW5hIAfcDyVOUXzII287dEGtUETPYXj0rtYpwL/EvelR+Zf9MomvlVoWDeLKrJU71QDfABfQtcy7+7wlSwNDf9knA1AFv2IO+Vu0B/I9Cb0MJXb1hC6UVnP61osTFY8OihuoQJrsPiRjhVwIFOJIk8KsuVBdvF3dhriWzzWkcxmT5oBj+6fpbJsYDByFLaKYK+bzPVLTefaSV5aVI+66fwWmDGwvnNmh361h7LbuHwMudMZ1o4pOH+8BUZVuVLMf3TlV8UBt63KkF30vX1PMdQxqPSQfMlSHEhdjCSyhyK53yrrCtTvfHmY3ujpTE8v3plo4qMNtEed9ecnOMkvpu4CAAA=
    Metadata:
      aws:cdk:path: PokeService/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Outputs:
  PokeFargateServiceLoadBalancerDNS284CCB59:
    Value:
      Fn::GetAtt:
        - PokeFargateServiceLBD155F24A
        - DNSName
  PokeFargateServiceServiceURL57A45078:
    Value:
      Fn::Join:
        - ""
        - - http://
          - Fn::GetAtt:
              - PokeFargateServiceLBD155F24A
              - DNSName
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
Rules:
  CheckBootstrapVersion:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::Contains:
                - - "1"
                  - "2"
                  - "3"
                  - "4"
                  - "5"
                - Ref: BootstrapVersion
        AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.

