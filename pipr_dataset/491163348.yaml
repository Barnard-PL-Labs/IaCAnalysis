Resources:
  table8235A42E:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: chat_id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: chat_id
          AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: stepn-notify-user
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: tg-notify-dev/table/Resource
  TelegrambotFunctionServiceRole46EE88F0:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: tg-notify-dev/TelegrambotFunction/ServiceRole/Resource
  TelegrambotFunctionServiceRoleDefaultPolicy0F0596D0:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: dynamodb:*
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - table8235A42E
                  - Arn
              - Ref: AWS::NoValue
        Version: "2012-10-17"
      PolicyName: TelegrambotFunctionServiceRoleDefaultPolicy0F0596D0
      Roles:
        - Ref: TelegrambotFunctionServiceRole46EE88F0
    Metadata:
      aws:cdk:path: tg-notify-dev/TelegrambotFunction/ServiceRole/DefaultPolicy/Resource
  TelegrambotFunction5F44A04C:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cdk-hnb659fds-assets-036406153779-us-east-1
        S3Key: 25cf3ef41d024cc4c98c3b2300b2a872ebb5e02f53523ac7948a4c4bb6faf998.zip
      Role:
        Fn::GetAtt:
          - TelegrambotFunctionServiceRole46EE88F0
          - Arn
      Description: src/telegrambot.lambda.ts
      Environment:
        Variables:
          API_KEY: undefined
          TABLE:
            Ref: table8235A42E
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
      Handler: index.handler
      MemorySize: 512
      Runtime: nodejs14.x
      Timeout: 60
    DependsOn:
      - TelegrambotFunctionServiceRoleDefaultPolicy0F0596D0
      - TelegrambotFunctionServiceRole46EE88F0
    Metadata:
      aws:cdk:path: tg-notify-dev/TelegrambotFunction/Resource
      aws:asset:path: asset.25cf3ef41d024cc4c98c3b2300b2a872ebb5e02f53523ac7948a4c4bb6faf998.lambda
      aws:asset:is-bundled: false
      aws:asset:property: Code
  TelegrambotFunctionLogRetention55FBF75D:
    Type: Custom::LogRetention
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A
          - Arn
      LogGroupName:
        Fn::Join:
          - ""
          - - /aws/lambda/
            - Ref: TelegrambotFunction5F44A04C
      RetentionInDays: 3
    Metadata:
      aws:cdk:path: tg-notify-dev/TelegrambotFunction/LogRetention/Resource
  TelegrambotFunctionFunctionUrlC827A52D:
    Type: AWS::Lambda::Url
    Properties:
      AuthType: NONE
      TargetFunctionArn:
        Fn::GetAtt:
          - TelegrambotFunction5F44A04C
          - Arn
    Metadata:
      aws:cdk:path: tg-notify-dev/TelegrambotFunction/FunctionUrl/Resource
  TelegrambotFunctioninvokefunctionurl48023AA3:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunctionUrl
      FunctionName:
        Fn::GetAtt:
          - TelegrambotFunction5F44A04C
          - Arn
      Principal: "*"
      FunctionUrlAuthType: NONE
    Metadata:
      aws:cdk:path: tg-notify-dev/TelegrambotFunction/invoke-function-url
  LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: tg-notify-dev/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/ServiceRole/Resource
  LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:PutRetentionPolicy
              - logs:DeleteRetentionPolicy
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB
      Roles:
        - Ref: LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB
    Metadata:
      aws:cdk:path: tg-notify-dev/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/ServiceRole/DefaultPolicy/Resource
  LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs14.x
      Code:
        S3Bucket: cdk-hnb659fds-assets-036406153779-us-east-1
        S3Key: eb5b005c858404ea0c8f68098ed5dcdf5340e02461f149751d10f59c210d5ef8.zip
      Role:
        Fn::GetAtt:
          - LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB
          - Arn
    DependsOn:
      - LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB
      - LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB
    Metadata:
      aws:cdk:path: tg-notify-dev/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/Resource
      aws:asset:path: asset.eb5b005c858404ea0c8f68098ed5dcdf5340e02461f149751d10f59c210d5ef8
      aws:asset:is-bundled: false
      aws:asset:property: Code
  StateMachineRoleB840431D:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: states.us-east-1.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: tg-notify-dev/StateMachine/Role/Resource
  StateMachineRoleDefaultPolicyDF1E6607:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: dynamodb:scan
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - table8235A42E
                - Arn
          - Action: lambda:InvokeFunction
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - TelegrambotFunction5F44A04C
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - TelegrambotFunction5F44A04C
                        - Arn
                    - :*
        Version: "2012-10-17"
      PolicyName: StateMachineRoleDefaultPolicyDF1E6607
      Roles:
        - Ref: StateMachineRoleB840431D
    Metadata:
      aws:cdk:path: tg-notify-dev/StateMachine/Role/DefaultPolicy/Resource
  StateMachine2E01A3A5:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn:
        Fn::GetAtt:
          - StateMachineRoleB840431D
          - Arn
      DefinitionString:
        Fn::Join:
          - ""
          - - '{"StartAt":"ScanTable","States":{"ScanTable":{"Next":"Need to send message?!","Type":"Task","TimeoutSeconds":10,"ResultSelector":{"count.$":"$.Count","inputForMap.$":"$.Items"},"Resource":"arn:'
            - Ref: AWS::Partition
            - :states:::aws-sdk:dynamodb:scan","Parameters":{"TableName":"
            - Ref: table8235A42E
            - '"}},"Need to send message?!":{"Type":"Choice","InputPath":"$","OutputPath":"$.inputForMap","Choices":[{"Variable":"$.count","NumericLessThan":1,"Next":"Not need send message, Done"},{"Variable":"$.count","NumericGreaterThanEquals":1,"Next":"mapItems"}]},"Not need send message, Done":{"Type":"Succeed"},"mapItems":{"Type":"Map","End":true,"Iterator":{"StartAt":"Notify","States":{"Notify":{"End":true,"Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Type":"Task","Resource":"arn:'
            - Ref: AWS::Partition
            - :states:::lambda:invoke","Parameters":{"FunctionName":"
            - Fn::GetAtt:
                - TelegrambotFunction5F44A04C
                - Arn
            - '","Payload":{"source":"aws.statemachine","CronJob.$":"$"}}}}},"ItemsPath":"$","MaxConcurrency":100}}}'
    DependsOn:
      - StateMachineRoleDefaultPolicyDF1E6607
      - StateMachineRoleB840431D
    Metadata:
      aws:cdk:path: tg-notify-dev/StateMachine/Resource
  StateMachineEventsRoleDBCDECD1:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: tg-notify-dev/StateMachine/EventsRole/Resource
  StateMachineEventsRoleDefaultPolicyFB602CA9:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: states:StartExecution
            Effect: Allow
            Resource:
              Ref: StateMachine2E01A3A5
        Version: "2012-10-17"
      PolicyName: StateMachineEventsRoleDefaultPolicyFB602CA9
      Roles:
        - Ref: StateMachineEventsRoleDBCDECD1
    Metadata:
      aws:cdk:path: tg-notify-dev/StateMachine/EventsRole/DefaultPolicy/Resource
  ScheduleRuleDA5BD877:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(2 minutes)
      State: ENABLED
      Targets:
        - Arn:
            Ref: StateMachine2E01A3A5
          Id: Target0
          RoleArn:
            Fn::GetAtt:
              - StateMachineEventsRoleDBCDECD1
              - Arn
    Metadata:
      aws:cdk:path: tg-notify-dev/ScheduleRule/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/1VRTW/CMAz9LbuHTIXLdgSkSZNAoLKdkZuYEpomVZ0UoSr/fW6AaTu95+ePZydzuXiXxQtcaaZ0M7OmkuMhgGoES8dR3xy0XrP4BZVFsT65TJKw0FYa5PgRnQrGuyn1y5/ku7eT/oA99q0hYj0JA60cS38fmXHvrVG3XJdZErQ4AhEGkssJOJarqBoMKyAU1tckN74uMaDLrhSwOz2c6RiAGpLjGqxdXumA/WAUik1e+9MNvuEj/nVw7dlPNVvoxCEqhagFv0XALaizcXnVv3ESOLA1N5bxcQhjSqJE8rHnSXlvbqmNq3P+mWC+i6GLIQnnNcoLvQ7Fmyzm/BcXMmbWR76pRVne8QeI9BoBpwEAAA==
    Metadata:
      aws:cdk:path: tg-notify-dev/CDKMetadata/Default
Outputs:
  url:
    Value:
      Fn::GetAtt:
        - TelegrambotFunctionFunctionUrlC827A52D
        - FunctionUrl
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
Rules:
  CheckBootstrapVersion:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::Contains:
                - - "1"
                  - "2"
                  - "3"
                  - "4"
                  - "5"
                - Ref: BootstrapVersion
        AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.

