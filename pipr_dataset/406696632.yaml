Resources:
  dynamostoreC1BCDFCD:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: timestamp
          KeyType: HASH
        - AttributeName: thing
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: timestamp
          AttributeType: "N"
        - AttributeName: thing
          AttributeType: S
        - AttributeName: filename
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: tyhac-iotdata-filename-index
          KeySchema:
            - AttributeName: filename
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      SSESpecification:
        SSEEnabled: true
      TableName: tyhac-iotdata
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: tyhac-stack/dynamo-store/Resource
  bucketrawNotifications38176B48:
    Type: Custom::S3BucketNotifications
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691
          - Arn
      BucketName:
        Ref: bucketrawE1DB2AD1
      NotificationConfiguration:
        LambdaFunctionConfigurations:
          - Events:
              - s3:ObjectCreated:*
            LambdaFunctionArn:
              Fn::GetAtt:
                - lambdastaging78F73DE0
                - Arn
      Managed: true
    DependsOn:
      - bucketrawAllowBucketNotificationsTotyhacstacklambdastagingA0A588C5DC5D5630
    Metadata:
      aws:cdk:path: tyhac-stack/bucket-raw/Notifications/Resource
  bucketrawE1DB2AD1:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: tyhac-036406153779-raw
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: tyhac-stack/bucket-raw/Resource
  bucketrawAllowBucketNotificationsTotyhacstacklambdastagingA0A588C5DC5D5630:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - lambdastaging78F73DE0
          - Arn
      Principal: s3.amazonaws.com
      SourceAccount: "036406153779"
      SourceArn:
        Fn::GetAtt:
          - bucketrawE1DB2AD1
          - Arn
    Metadata:
      aws:cdk:path: tyhac-stack/bucket-raw/AllowBucketNotificationsTotyhacstacklambdastagingA0A588C5
  bucketstaging8AA4B1DB:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: tyhac-036406153779-staging
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: tyhac-stack/bucket-staging/Resource
  bucketfinalNotifications2137560F:
    Type: Custom::S3BucketNotifications
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691
          - Arn
      BucketName:
        Ref: bucketfinal379E95F8
      NotificationConfiguration:
        LambdaFunctionConfigurations:
          - Events:
              - s3:ObjectCreated:*
            LambdaFunctionArn:
              Fn::GetAtt:
                - lambdapredictor54E9A56C
                - Arn
      Managed: true
    DependsOn:
      - bucketfinalAllowBucketNotificationsTotyhacstacklambdapredictorBEF6B75B74333E35
    Metadata:
      aws:cdk:path: tyhac-stack/bucket-final/Notifications/Resource
  bucketfinal379E95F8:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: tyhac-036406153779-final
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: tyhac-stack/bucket-final/Resource
  bucketfinalAllowBucketNotificationsTotyhacstacklambdapredictorBEF6B75B74333E35:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - lambdapredictor54E9A56C
          - Arn
      Principal: s3.amazonaws.com
      SourceAccount: "036406153779"
      SourceArn:
        Fn::GetAtt:
          - bucketfinal379E95F8
          - Arn
    Metadata:
      aws:cdk:path: tyhac-stack/bucket-final/AllowBucketNotificationsTotyhacstacklambdapredictorBEF6B75B
  lambdasignServiceRole3BF942C2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: tyhac-stack/lambda-sign/ServiceRole/Resource
  lambdasignServiceRoleDefaultPolicy46347EEC:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:PutObject*
              - s3:Abort*
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - Fn::GetAtt:
                      - bucketrawE1DB2AD1
                      - Arn
                  - /*
          - Action: iot:Publish
            Effect: Allow
            Resource: arn:aws:iot:us-east-1:036406153779:topic/tyhac/sub/presign
        Version: "2012-10-17"
      PolicyName: lambdasignServiceRoleDefaultPolicy46347EEC
      Roles:
        - Ref: lambdasignServiceRole3BF942C2
    Metadata:
      aws:cdk:path: tyhac-stack/lambda-sign/ServiceRole/DefaultPolicy/Resource
  lambdasign25934CF9:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cdk-hnb659fds-assets-036406153779-us-east-1
        S3Key: 77fd15b18992670b5fd1b289809c274ec7c7d97f330418ceba261eed9432b3c2.zip
      Role:
        Fn::GetAtt:
          - lambdasignServiceRole3BF942C2
          - Arn
      Description: tyhac generates pre-signed url for staging audio files from the AWS IoT Core
      Environment:
        Variables:
          BUCKET_RAW:
            Ref: bucketrawE1DB2AD1
          TOPIC_PUB: tyhac/sub/presign
      FunctionName: tyhac-signurl
      Handler: lambda.handler
      Runtime: python3.8
    DependsOn:
      - lambdasignServiceRoleDefaultPolicy46347EEC
      - lambdasignServiceRole3BF942C2
    Metadata:
      aws:cdk:path: tyhac-stack/lambda-sign/Resource
      aws:asset:path: asset.77fd15b18992670b5fd1b289809c274ec7c7d97f330418ceba261eed9432b3c2
      aws:asset:property: Code
  lambdasigniotinvocationD30827F5:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - lambdasign25934CF9
          - Arn
      Principal: iot.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - iotrulesign
          - Arn
    Metadata:
      aws:cdk:path: tyhac-stack/lambda-sign/iot-invocation
  lambdastagingServiceRole1C8370A4:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: tyhac-stack/lambda-staging/ServiceRole/Resource
  lambdastagingServiceRoleDefaultPolicy2714A70A:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
              - s3:DeleteObject*
              - s3:PutObject*
              - s3:Abort*
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - bucketrawE1DB2AD1
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - bucketrawE1DB2AD1
                        - Arn
                    - /*
          - Action:
              - s3:PutObject*
              - s3:Abort*
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - Fn::GetAtt:
                      - bucketstaging8AA4B1DB
                      - Arn
                  - /*
          - Action:
              - s3:PutObject*
              - s3:Abort*
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - Fn::GetAtt:
                      - bucketfinal379E95F8
                      - Arn
                  - /*
          - Action:
              - dynamodb:BatchGetItem
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:Query
              - dynamodb:GetItem
              - dynamodb:Scan
              - dynamodb:ConditionCheckItem
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - dynamostoreC1BCDFCD
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - dynamostoreC1BCDFCD
                        - Arn
                    - /index/*
          - Action: iot:Publish
            Effect: Allow
            Resource:
              - arn:aws:iot:us-east-1:036406153779:topic/tyhac/pub/status
              - arn:aws:iot:us-east-1:036406153779:topic/tyhac/sub/predict
        Version: "2012-10-17"
      PolicyName: lambdastagingServiceRoleDefaultPolicy2714A70A
      Roles:
        - Ref: lambdastagingServiceRole1C8370A4
    Metadata:
      aws:cdk:path: tyhac-stack/lambda-staging/ServiceRole/DefaultPolicy/Resource
  lambdastaging78F73DE0:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ImageUri:
          Fn::Sub: 036406153779.dkr.ecr.us-east-1.${AWS::URLSuffix}/cdk-hnb659fds-container-assets-036406153779-us-east-1:f635bc865c9e19746708cbddf8c53d2874860b4dfd479a9954b80053a72bc134
      Role:
        Fn::GetAtt:
          - lambdastagingServiceRole1C8370A4
          - Arn
      Description: tyhac s3 bucket staging and processing
      Environment:
        Variables:
          REGION: us-east-1
          BUCKET_RAW:
            Ref: bucketrawE1DB2AD1
          BUCKET_STAGE:
            Ref: bucketstaging8AA4B1DB
          BUCKET_FINAL:
            Ref: bucketfinal379E95F8
          DYNAMO_TABLE:
            Ref: dynamostoreC1BCDFCD
          DYNAMO_INDEX: tyhac-iotdata-filename-index
          TOPIC_PUB_STATUS: tyhac/pub/status
          TOPIC_SUB_PREDICT: tyhac/sub/predict
          CONFIDENCE: "15"
      FunctionName: tyhac-staging
      MemorySize: 512
      PackageType: Image
      Timeout: 30
    DependsOn:
      - lambdastagingServiceRoleDefaultPolicy2714A70A
      - lambdastagingServiceRole1C8370A4
    Metadata:
      aws:cdk:path: tyhac-stack/lambda-staging/Resource
  lambdapredictorServiceRole543C6628:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: tyhac-stack/lambda-predictor/ServiceRole/Resource
  lambdapredictorServiceRoleDefaultPolicy96941329:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - bucketfinal379E95F8
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - bucketfinal379E95F8
                        - Arn
                    - /*
          - Action:
              - dynamodb:BatchGetItem
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:Query
              - dynamodb:GetItem
              - dynamodb:Scan
              - dynamodb:ConditionCheckItem
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - dynamostoreC1BCDFCD
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - dynamostoreC1BCDFCD
                        - Arn
                    - /index/*
          - Action: iot:Publish
            Effect: Allow
            Resource:
              - arn:aws:iot:us-east-1:036406153779:topic/tyhac/pub/status
              - arn:aws:iot:us-east-1:036406153779:topic/tyhac/sub/predict
        Version: "2012-10-17"
      PolicyName: lambdapredictorServiceRoleDefaultPolicy96941329
      Roles:
        - Ref: lambdapredictorServiceRole543C6628
    Metadata:
      aws:cdk:path: tyhac-stack/lambda-predictor/ServiceRole/DefaultPolicy/Resource
  lambdapredictor54E9A56C:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ImageUri:
          Fn::Sub: 036406153779.dkr.ecr.us-east-1.${AWS::URLSuffix}/cdk-hnb659fds-container-assets-036406153779-us-east-1:a5b0ea4d4728dea17beaa37b728f6fc19c0b4f56e122b41e2079c8e63b9ff2b6
      Role:
        Fn::GetAtt:
          - lambdapredictorServiceRole543C6628
          - Arn
      Description: tyhac covid-19 predictor
      Environment:
        Variables:
          REGION: us-east-1
          BUCKET_FINAL:
            Ref: bucketfinal379E95F8
          DYNAMO_TABLE:
            Ref: dynamostoreC1BCDFCD
          TOPIC_PUB_STATUS: tyhac/pub/status
          TOPIC_SUB_PREDICT: tyhac/sub/predict
      FunctionName: tyhac-predictor
      MemorySize: 512
      PackageType: Image
      Timeout: 30
    DependsOn:
      - lambdapredictorServiceRoleDefaultPolicy96941329
      - lambdapredictorServiceRole543C6628
    Metadata:
      aws:cdk:path: tyhac-stack/lambda-predictor/Resource
  lambdastatsServiceRoleBE6F783F:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: tyhac-stack/lambda-stats/ServiceRole/Resource
  lambdastatsServiceRoleDefaultPolicyC04ACD36:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - dynamodb:BatchGetItem
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:Query
              - dynamodb:GetItem
              - dynamodb:Scan
              - dynamodb:ConditionCheckItem
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - dynamostoreC1BCDFCD
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - dynamostoreC1BCDFCD
                        - Arn
                    - /index/*
          - Action: iot:Publish
            Effect: Allow
            Resource: arn:aws:iot:us-east-1:036406153779:topic/tyhac/sub/stats
        Version: "2012-10-17"
      PolicyName: lambdastatsServiceRoleDefaultPolicyC04ACD36
      Roles:
        - Ref: lambdastatsServiceRoleBE6F783F
    Metadata:
      aws:cdk:path: tyhac-stack/lambda-stats/ServiceRole/DefaultPolicy/Resource
  lambdastats73E0C7CD:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cdk-hnb659fds-assets-036406153779-us-east-1
        S3Key: d9f1c84fcda541be7f8b7173a975dfac716f203407f4c95511e7e6ab9a91ef7d.zip
      Role:
        Fn::GetAtt:
          - lambdastatsServiceRoleBE6F783F
          - Arn
      Description: tyhac queries dynamo for stats and sends to mqtt
      Environment:
        Variables:
          TOPIC_SUB: tyhac/sub/stats
      FunctionName: tyhac-stats
      Handler: lambda.handler
      Runtime: python3.8
    DependsOn:
      - lambdastatsServiceRoleDefaultPolicyC04ACD36
      - lambdastatsServiceRoleBE6F783F
    Metadata:
      aws:cdk:path: tyhac-stack/lambda-stats/Resource
      aws:asset:path: asset.d9f1c84fcda541be7f8b7173a975dfac716f203407f4c95511e7e6ab9a91ef7d
      aws:asset:property: Code
  lambdastatsiotinvocation94D96326:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - lambdastats73E0C7CD
          - Arn
      Principal: iot.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - iotrulestats
          - Arn
    Metadata:
      aws:cdk:path: tyhac-stack/lambda-stats/iot-invocation
  iotpolicy:
    Type: AWS::IoT::Policy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: iot:Connect
            Resource: arn:aws:iot:us-east-1:036406153779:client/${iot:Connection.Thing.ThingName}
          - Effect: Allow
            Action: iot:Subscribe
            Resource: arn:aws:iot:us-east-1:036406153779:topicfilter/tyhac/sub/*
          - Effect: Allow
            Action: iot:Receive
            Resource: arn:aws:iot:us-east-1:036406153779:topic/tyhac/sub/*
          - Effect: Allow
            Action: iot:Publish
            Resource: arn:aws:iot:us-east-1:036406153779:topic/tyhac/pub/*
    Metadata:
      aws:cdk:path: tyhac-stack/iot-policy
  iotrulesign:
    Type: AWS::IoT::TopicRule
    Properties:
      TopicRulePayload:
        Actions:
          - Lambda:
              FunctionArn:
                Fn::GetAtt:
                  - lambdasign25934CF9
                  - Arn
        Description: tyhac rule requests signed url from lambda
        Sql: SELECT * FROM 'tyhac/pub/presign'
      RuleName: tyhacLambdaPresignRule
    Metadata:
      aws:cdk:path: tyhac-stack/iot-rule-sign
  iotrulestats:
    Type: AWS::IoT::TopicRule
    Properties:
      TopicRulePayload:
        Actions:
          - Lambda:
              FunctionArn:
                Fn::GetAtt:
                  - lambdastats73E0C7CD
                  - Arn
        Description: tyhac rule requests stats data from lambda and dynamodb
        Sql: SELECT * FROM 'tyhac/pub/stats'
      RuleName: tyhacLambdaStatsRule
    Metadata:
      aws:cdk:path: tyhac-stack/iot-rule-stats
  iotrole931D2BC8:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: iot.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: tyhac-stack/iot-role/Resource
  iotroleDefaultPolicy8230F3B3:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: dynamodb:PutItem
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - dynamostoreC1BCDFCD
                - Arn
        Version: "2012-10-17"
      PolicyName: iotroleDefaultPolicy8230F3B3
      Roles:
        - Ref: iotrole931D2BC8
    Metadata:
      aws:cdk:path: tyhac-stack/iot-role/DefaultPolicy/Resource
  iotruledynamo:
    Type: AWS::IoT::TopicRule
    Properties:
      TopicRulePayload:
        Actions:
          - DynamoDBv2:
              PutItem:
                TableName:
                  Ref: dynamostoreC1BCDFCD
              RoleArn:
                Fn::GetAtt:
                  - iotrole931D2BC8
                  - Arn
        Description: tyhac rule to update dynamodb with IoT data
        Sql: SELECT * FROM 'tyhac/pub/status'
      RuleName: tyhacDynamoStatus
    Metadata:
      aws:cdk:path: tyhac-stack/iot-rule-dynamo
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: tyhac-stack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: s3:PutBucketNotification
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      Roles:
        - Ref: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: tyhac-stack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691:
    Type: AWS::Lambda::Function
    Properties:
      Description: AWS CloudFormation handler for "Custom::S3BucketNotifications" resources (@aws-cdk/aws-s3)
      Code:
        ZipFile: |
          import boto3  # type: ignore
          import json
          import logging
          import urllib.request

          s3 = boto3.client("s3")

          CONFIGURATION_TYPES = ["TopicConfigurations", "QueueConfigurations", "LambdaFunctionConfigurations"]

          def handler(event: dict, context):
              response_status = "SUCCESS"
              error_message = ""
              try:
                  props = event["ResourceProperties"]
                  bucket = props["BucketName"]
                  notification_configuration = props["NotificationConfiguration"]
                  request_type = event["RequestType"]
                  managed = props.get('Managed', 'true').lower() == 'true'
                  stack_id = event['StackId']

                  if managed:
                    config = handle_managed(request_type, notification_configuration)
                  else:
                    config = handle_unmanaged(bucket, stack_id, request_type, notification_configuration)

                  put_bucket_notification_configuration(bucket, config)
              except Exception as e:
                  logging.exception("Failed to put bucket notification configuration")
                  response_status = "FAILED"
                  error_message = f"Error: {str(e)}. "
              finally:
                  submit_response(event, context, response_status, error_message)


          def handle_managed(request_type, notification_configuration):
            if request_type == 'Delete':
              return {}
            return notification_configuration


          def handle_unmanaged(bucket, stack_id, request_type, notification_configuration):

            # find external notifications
            external_notifications = find_external_notifications(bucket, stack_id)

            # if delete, that's all we need
            if request_type == 'Delete':
              return external_notifications

            def with_id(notification):
              notification['Id'] = f"{stack_id}-{hash(json.dumps(notification, sort_keys=True))}"
              return notification

            # otherwise, merge external with incoming config and augment with id
            notifications = {}
            for t in CONFIGURATION_TYPES:
              external = external_notifications.get(t, [])
              incoming = [with_id(n) for n in notification_configuration.get(t, [])]
              notifications[t] = external + incoming
            return notifications


          def find_external_notifications(bucket, stack_id):
            existing_notifications = get_bucket_notification_configuration(bucket)
            external_notifications = {}
            for t in CONFIGURATION_TYPES:
              # if the notification was created by us, we know what id to expect
              # so we can filter by it.
              external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f"{stack_id}-")]

            return external_notifications


          def get_bucket_notification_configuration(bucket):
            return s3.get_bucket_notification_configuration(Bucket=bucket)


          def put_bucket_notification_configuration(bucket, notification_configuration):
            s3.put_bucket_notification_configuration(Bucket=bucket, NotificationConfiguration=notification_configuration)


          def submit_response(event: dict, context, response_status: str, error_message: str):
              response_body = json.dumps(
                  {
                      "Status": response_status,
                      "Reason": f"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}",
                      "PhysicalResourceId": event.get("PhysicalResourceId") or event["LogicalResourceId"],
                      "StackId": event["StackId"],
                      "RequestId": event["RequestId"],
                      "LogicalResourceId": event["LogicalResourceId"],
                      "NoEcho": False,
                  }
              ).encode("utf-8")
              headers = {"content-type": "", "content-length": str(len(response_body))}
              try:
                  req = urllib.request.Request(url=event["ResponseURL"], headers=headers, data=response_body, method="PUT")
                  with urllib.request.urlopen(req) as response:
                      print(response.read().decode("utf-8"))
                  print("Status code: " + response.reason)
              except Exception as e:
                  print("send(..) failed executing request.urlopen(..): " + str(e))
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
          - Arn
      Runtime: python3.7
      Timeout: 300
    DependsOn:
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: tyhac-stack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAAE01QQW7DIBB8S+54U7eXHtukqtRb5OQDGG+tjQ0bsZDKQv57wW6snmaYHWYHaqjrV3javekfqUw37JNhj5DOQZtBNSgcvUF1ZCfBRxPU8dtt6rsIhuzsyfWzKgmpm5y23LWQLrodsdgXMit5gXSIZsAl44+tcNCSDaO2bach5ekJvSURYqc+ozOhkCxv/IPzNf9ldY8PbVakLaSG16ULnngkM5XjykqJSpfSAkt3hcY/hH+Z2wwavLFQYD+Vjoo4rP224AvfyDQxP3CeleMO4Sr7e/7S+hnq3VWIKh9dIIvQrPgLjjiT6HIBAAA=
    Metadata:
      aws:cdk:path: tyhac-stack/CDKMetadata/Default
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store.
Rules:
  CheckBootstrapVersion:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::Contains:
                - - "1"
                  - "2"
                  - "3"
                  - "4"
                  - "5"
                - Ref: BootstrapVersion
        AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.

