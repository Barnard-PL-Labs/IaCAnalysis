Resources:
  myStackVPCD4E3DB3C:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: InfrastructureStack/myStack-VPC
    Metadata:
      aws:cdk:path: InfrastructureStack/myStack-VPC/Resource
  myStackVPCPublicSubnet1Subnet6ED3B6AA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/18
      VpcId:
        Ref: myStackVPCD4E3DB3C
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: InfrastructureStack/myStack-VPC/PublicSubnet1
    Metadata:
      aws:cdk:path: InfrastructureStack/myStack-VPC/PublicSubnet1/Subnet
  myStackVPCPublicSubnet1RouteTable307031B8:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: myStackVPCD4E3DB3C
      Tags:
        - Key: Name
          Value: InfrastructureStack/myStack-VPC/PublicSubnet1
    Metadata:
      aws:cdk:path: InfrastructureStack/myStack-VPC/PublicSubnet1/RouteTable
  myStackVPCPublicSubnet1RouteTableAssociation731C85DC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: myStackVPCPublicSubnet1RouteTable307031B8
      SubnetId:
        Ref: myStackVPCPublicSubnet1Subnet6ED3B6AA
    Metadata:
      aws:cdk:path: InfrastructureStack/myStack-VPC/PublicSubnet1/RouteTableAssociation
  myStackVPCPublicSubnet1DefaultRoute224D2355:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: myStackVPCPublicSubnet1RouteTable307031B8
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: myStackVPCIGWD2DAAB1A
    DependsOn:
      - myStackVPCVPCGW40033DA0
    Metadata:
      aws:cdk:path: InfrastructureStack/myStack-VPC/PublicSubnet1/DefaultRoute
  myStackVPCPublicSubnet1EIPD5E46E6C:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: InfrastructureStack/myStack-VPC/PublicSubnet1
    Metadata:
      aws:cdk:path: InfrastructureStack/myStack-VPC/PublicSubnet1/EIP
  myStackVPCPublicSubnet1NATGateway81336FD8:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - myStackVPCPublicSubnet1EIPD5E46E6C
          - AllocationId
      SubnetId:
        Ref: myStackVPCPublicSubnet1Subnet6ED3B6AA
      Tags:
        - Key: Name
          Value: InfrastructureStack/myStack-VPC/PublicSubnet1
    Metadata:
      aws:cdk:path: InfrastructureStack/myStack-VPC/PublicSubnet1/NATGateway
  myStackVPCPublicSubnet2Subnet5B2C7BBF:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.64.0/18
      VpcId:
        Ref: myStackVPCD4E3DB3C
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: InfrastructureStack/myStack-VPC/PublicSubnet2
    Metadata:
      aws:cdk:path: InfrastructureStack/myStack-VPC/PublicSubnet2/Subnet
  myStackVPCPublicSubnet2RouteTable25C8C2B0:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: myStackVPCD4E3DB3C
      Tags:
        - Key: Name
          Value: InfrastructureStack/myStack-VPC/PublicSubnet2
    Metadata:
      aws:cdk:path: InfrastructureStack/myStack-VPC/PublicSubnet2/RouteTable
  myStackVPCPublicSubnet2RouteTableAssociation3DE30450:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: myStackVPCPublicSubnet2RouteTable25C8C2B0
      SubnetId:
        Ref: myStackVPCPublicSubnet2Subnet5B2C7BBF
    Metadata:
      aws:cdk:path: InfrastructureStack/myStack-VPC/PublicSubnet2/RouteTableAssociation
  myStackVPCPublicSubnet2DefaultRouteBDBA92A0:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: myStackVPCPublicSubnet2RouteTable25C8C2B0
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: myStackVPCIGWD2DAAB1A
    DependsOn:
      - myStackVPCVPCGW40033DA0
    Metadata:
      aws:cdk:path: InfrastructureStack/myStack-VPC/PublicSubnet2/DefaultRoute
  myStackVPCPublicSubnet2EIPE8C9E81E:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: InfrastructureStack/myStack-VPC/PublicSubnet2
    Metadata:
      aws:cdk:path: InfrastructureStack/myStack-VPC/PublicSubnet2/EIP
  myStackVPCPublicSubnet2NATGateway58442319:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - myStackVPCPublicSubnet2EIPE8C9E81E
          - AllocationId
      SubnetId:
        Ref: myStackVPCPublicSubnet2Subnet5B2C7BBF
      Tags:
        - Key: Name
          Value: InfrastructureStack/myStack-VPC/PublicSubnet2
    Metadata:
      aws:cdk:path: InfrastructureStack/myStack-VPC/PublicSubnet2/NATGateway
  myStackVPCPrivateSubnet1Subnet92660621:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.128.0/18
      VpcId:
        Ref: myStackVPCD4E3DB3C
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: InfrastructureStack/myStack-VPC/PrivateSubnet1
    Metadata:
      aws:cdk:path: InfrastructureStack/myStack-VPC/PrivateSubnet1/Subnet
  myStackVPCPrivateSubnet1RouteTable94E89E4E:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: myStackVPCD4E3DB3C
      Tags:
        - Key: Name
          Value: InfrastructureStack/myStack-VPC/PrivateSubnet1
    Metadata:
      aws:cdk:path: InfrastructureStack/myStack-VPC/PrivateSubnet1/RouteTable
  myStackVPCPrivateSubnet1RouteTableAssociationC685879F:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: myStackVPCPrivateSubnet1RouteTable94E89E4E
      SubnetId:
        Ref: myStackVPCPrivateSubnet1Subnet92660621
    Metadata:
      aws:cdk:path: InfrastructureStack/myStack-VPC/PrivateSubnet1/RouteTableAssociation
  myStackVPCPrivateSubnet1DefaultRoute7FB3134B:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: myStackVPCPrivateSubnet1RouteTable94E89E4E
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: myStackVPCPublicSubnet1NATGateway81336FD8
    Metadata:
      aws:cdk:path: InfrastructureStack/myStack-VPC/PrivateSubnet1/DefaultRoute
  myStackVPCPrivateSubnet2Subnet961503EF:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.192.0/18
      VpcId:
        Ref: myStackVPCD4E3DB3C
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: InfrastructureStack/myStack-VPC/PrivateSubnet2
    Metadata:
      aws:cdk:path: InfrastructureStack/myStack-VPC/PrivateSubnet2/Subnet
  myStackVPCPrivateSubnet2RouteTable9D3F3D3C:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: myStackVPCD4E3DB3C
      Tags:
        - Key: Name
          Value: InfrastructureStack/myStack-VPC/PrivateSubnet2
    Metadata:
      aws:cdk:path: InfrastructureStack/myStack-VPC/PrivateSubnet2/RouteTable
  myStackVPCPrivateSubnet2RouteTableAssociationB53ACB76:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: myStackVPCPrivateSubnet2RouteTable9D3F3D3C
      SubnetId:
        Ref: myStackVPCPrivateSubnet2Subnet961503EF
    Metadata:
      aws:cdk:path: InfrastructureStack/myStack-VPC/PrivateSubnet2/RouteTableAssociation
  myStackVPCPrivateSubnet2DefaultRouteD3BF2A91:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: myStackVPCPrivateSubnet2RouteTable9D3F3D3C
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: myStackVPCPublicSubnet2NATGateway58442319
    Metadata:
      aws:cdk:path: InfrastructureStack/myStack-VPC/PrivateSubnet2/DefaultRoute
  myStackVPCIGWD2DAAB1A:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: InfrastructureStack/myStack-VPC
    Metadata:
      aws:cdk:path: InfrastructureStack/myStack-VPC/IGW
  myStackVPCVPCGW40033DA0:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: myStackVPCD4E3DB3C
      InternetGatewayId:
        Ref: myStackVPCIGWD2DAAB1A
    Metadata:
      aws:cdk:path: InfrastructureStack/myStack-VPC/VPCGW
  myStackLB24F2F501:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: "false"
      Scheme: internet-facing
      SecurityGroups:
        - Fn::GetAtt:
            - myStackLBSecurityGroup9DA7E850
            - GroupId
      Subnets:
        - Ref: myStackVPCPublicSubnet1Subnet6ED3B6AA
        - Ref: myStackVPCPublicSubnet2Subnet5B2C7BBF
      Type: application
    DependsOn:
      - myStackVPCPublicSubnet1DefaultRoute224D2355
      - myStackVPCPublicSubnet2DefaultRouteBDBA92A0
    Metadata:
      aws:cdk:path: InfrastructureStack/myStack-LB/Resource
  myStackLBSecurityGroup9DA7E850:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatically created Security Group for ELB InfrastructureStackmyStackLBD34EC55A
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Ref: myStackVPCD4E3DB3C
    Metadata:
      aws:cdk:path: InfrastructureStack/myStack-LB/SecurityGroup/Resource
  myStackLBSecurityGrouptoInfrastructureStackmyStackSG13E72C1E3000D9B8623C:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId:
        Fn::GetAtt:
          - myStackLBSecurityGroup9DA7E850
          - GroupId
      IpProtocol: tcp
      Description: Load balancer to target
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - myStackSG622A4011
          - GroupId
      FromPort: 3000
      ToPort: 3000
    Metadata:
      aws:cdk:path: InfrastructureStack/myStack-LB/SecurityGroup/to InfrastructureStackmyStackSG13E72C1E:3000
  myStackLBListenerE29B5CB5:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: myStackLBListenermyStackApplicationFleetGroupCC8AEB50
          Type: forward
      LoadBalancerArn:
        Ref: myStackLB24F2F501
      Port: 80
      Protocol: HTTP
    Metadata:
      aws:cdk:path: InfrastructureStack/myStack-LB/Listener/Resource
  myStackLBListenermyStackApplicationFleetGroupCC8AEB50:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 3000
      Protocol: HTTP
      TargetType: instance
      VpcId:
        Ref: myStackVPCD4E3DB3C
    Metadata:
      aws:cdk:path: InfrastructureStack/myStack-LB/Listener/myStack-ApplicationFleetGroup/Resource
  myStackSG622A4011:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: InfrastructureStack/myStack-SG
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: SSH
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          Description: HTTP
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Ref: myStackVPCD4E3DB3C
    Metadata:
      aws:cdk:path: InfrastructureStack/myStack-SG/Resource
  myStackSGfromInfrastructureStackmyStackLBSecurityGroup09F00BA93000A5B98411:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort: 3000
      GroupId:
        Fn::GetAtt:
          - myStackSG622A4011
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - myStackLBSecurityGroup9DA7E850
          - GroupId
      ToPort: 3000
    Metadata:
      aws:cdk:path: InfrastructureStack/myStack-SG/from InfrastructureStackmyStackLBSecurityGroup09F00BA9:3000
  stackNameRole9E21565C:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - ec2.
                    - Ref: AWS::URLSuffix
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: InfrastructureStack/{stackName}-Role/Resource
  stackNameRoleDefaultPolicy38878E05:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - :s3:::aws-codedeploy-
                    - Ref: AWS::Region
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - :s3:::aws-codedeploy-
                    - Ref: AWS::Region
                    - /latest/*
        Version: "2012-10-17"
      PolicyName: stackNameRoleDefaultPolicy38878E05
      Roles:
        - Ref: stackNameRole9E21565C
    Metadata:
      aws:cdk:path: InfrastructureStack/{stackName}-Role/DefaultPolicy/Resource
  myStackASGInstanceProfileA1954641:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: stackNameRole9E21565C
    Metadata:
      aws:cdk:path: InfrastructureStack/myStack-ASG/InstanceProfile
  myStackASGLaunchConfig3AC13EBE:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        Ref: SsmParameterValueawsserviceamiamazonlinuxlatestamznamihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter
      InstanceType: t2.micro
      IamInstanceProfile:
        Ref: myStackASGInstanceProfileA1954641
      KeyName: MyKeyPair
      SecurityGroups:
        - Fn::GetAtt:
            - myStackSG622A4011
            - GroupId
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - |-
                #!/bin/bash
                PKG_CMD=`which yum 2>/dev/null`
                if [ -z "$PKG_CMD" ]; then
                PKG_CMD=apt-get
                else
                PKG=CMD=yum
                fi
                $PKG_CMD update -y
                $PKG_CMD install -y ruby2.0
                if [ $? -ne 0 ]; then
                $PKG_CMD install -y ruby
                fi
                $PKG_CMD install -y awscli
                TMP_DIR=`mktemp -d`
                cd $TMP_DIR
                aws s3 cp s3://aws-codedeploy-
              - Ref: AWS::Region
              - "/latest/install . --region "
              - Ref: AWS::Region
              - |-
                
                chmod +x ./install
                ./install auto
                rm -fr $TMP_DIR
    DependsOn:
      - stackNameRoleDefaultPolicy38878E05
      - stackNameRole9E21565C
    Metadata:
      aws:cdk:path: InfrastructureStack/myStack-ASG/LaunchConfig
  myStackASG9192FD04:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MaxSize: "4"
      MinSize: "3"
      LaunchConfigurationName:
        Ref: myStackASGLaunchConfig3AC13EBE
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: InfrastructureStack/myStack-ASG
      TargetGroupARNs:
        - Ref: myStackLBListenermyStackApplicationFleetGroupCC8AEB50
      VPCZoneIdentifier:
        - Ref: myStackVPCPublicSubnet1Subnet6ED3B6AA
        - Ref: myStackVPCPublicSubnet2Subnet5B2C7BBF
    UpdatePolicy:
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: true
    Metadata:
      aws:cdk:path: InfrastructureStack/myStack-ASG/ASG
  myStackApp5675603A:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: SimpleReactApp
      ComputePlatform: Server
    Metadata:
      aws:cdk:path: InfrastructureStack/myStack-App/Resource
  myStackSDGRole3FA44C54:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - codedeploy.
                    - Ref: AWS::Region
                    - "."
                    - Ref: AWS::URLSuffix
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSCodeDeployRole
    Metadata:
      aws:cdk:path: InfrastructureStack/myStack-SDG/Role/Resource
  myStackSDG6FD7E62C:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName:
        Ref: myStackApp5675603A
      ServiceRoleArn:
        Fn::GetAtt:
          - myStackSDGRole3FA44C54
          - Arn
      AutoRollbackConfiguration:
        Enabled: true
        Events:
          - DEPLOYMENT_FAILURE
      AutoScalingGroups:
        - Ref: myStackASG9192FD04
      DeploymentGroupName: SimpleReactAppDG
    Metadata:
      aws:cdk:path: InfrastructureStack/myStack-SDG/Resource
  myStackbucket60EFF505:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: my-app-code-in-s3
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: InfrastructureStack/myStack-bucket/Resource
  myStackbucketPolicy62267004:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: myStackbucket60EFF505
      PolicyDocument:
        Statement:
          - Action: s3:*
            Effect: Allow
            Principal: "*"
            Resource:
              Fn::Join:
                - ""
                - - Fn::GetAtt:
                      - myStackbucket60EFF505
                      - Arn
                  - /*
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: InfrastructureStack/myStack-bucket/Policy/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Modules: aws-cdk=2.113.0,@aws-cdk/assets=1.69.0,@aws-cdk/aws-applicationautoscaling=1.69.0,@aws-cdk/aws-autoscaling=1.69.0,@aws-cdk/aws-autoscaling-common=1.69.0,@aws-cdk/aws-cloudwatch=1.69.0,@aws-cdk/aws-codedeploy=1.69.0,@aws-cdk/aws-codeguruprofiler=1.69.0,@aws-cdk/aws-ec2=1.69.0,@aws-cdk/aws-elasticloadbalancingv2=1.69.0,@aws-cdk/aws-events=1.69.0,@aws-cdk/aws-iam=1.69.0,@aws-cdk/aws-kms=1.69.0,@aws-cdk/aws-lambda=1.69.0,@aws-cdk/aws-logs=1.69.0,@aws-cdk/aws-s3=1.69.0,@aws-cdk/aws-s3-assets=1.69.0,@aws-cdk/aws-sqs=1.69.0,@aws-cdk/aws-ssm=1.69.0,@aws-cdk/cloud-assembly-schema=1.69.0,@aws-cdk/core=1.69.0,@aws-cdk/custom-resources=1.69.0,@aws-cdk/cx-api=1.69.0,@aws-cdk/region-info=1.69.0,jsii-runtime=node.js/v18.12.1
    Metadata:
      aws:cdk:path: InfrastructureStack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Parameters:
  SsmParameterValueawsserviceamiamazonlinuxlatestamznamihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-gp2
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2

