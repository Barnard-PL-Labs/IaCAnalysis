Resources:
  MyVpcF9F0CA6F:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: clique-up/MyVpc
    Metadata:
      aws:cdk:path: clique-up/MyVpc/Resource
  MyVpcPublicSubnet1SubnetF6608456:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/18
      VpcId:
        Ref: MyVpcF9F0CA6F
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: clique-up/MyVpc/PublicSubnet1
    Metadata:
      aws:cdk:path: clique-up/MyVpc/PublicSubnet1/Subnet
  MyVpcPublicSubnet1RouteTableC46AB2F4:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyVpcF9F0CA6F
      Tags:
        - Key: Name
          Value: clique-up/MyVpc/PublicSubnet1
    Metadata:
      aws:cdk:path: clique-up/MyVpc/PublicSubnet1/RouteTable
  MyVpcPublicSubnet1RouteTableAssociation2ECEE1CB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyVpcPublicSubnet1RouteTableC46AB2F4
      SubnetId:
        Ref: MyVpcPublicSubnet1SubnetF6608456
    Metadata:
      aws:cdk:path: clique-up/MyVpc/PublicSubnet1/RouteTableAssociation
  MyVpcPublicSubnet1DefaultRoute95FDF9EB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MyVpcPublicSubnet1RouteTableC46AB2F4
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: MyVpcIGW5C4A4F63
    DependsOn:
      - MyVpcVPCGW488ACE0D
    Metadata:
      aws:cdk:path: clique-up/MyVpc/PublicSubnet1/DefaultRoute
  MyVpcPublicSubnet1EIP096967CB:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: clique-up/MyVpc/PublicSubnet1
    Metadata:
      aws:cdk:path: clique-up/MyVpc/PublicSubnet1/EIP
  MyVpcPublicSubnet1NATGatewayAD3400C1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - MyVpcPublicSubnet1EIP096967CB
          - AllocationId
      SubnetId:
        Ref: MyVpcPublicSubnet1SubnetF6608456
      Tags:
        - Key: Name
          Value: clique-up/MyVpc/PublicSubnet1
    Metadata:
      aws:cdk:path: clique-up/MyVpc/PublicSubnet1/NATGateway
  MyVpcPublicSubnet2Subnet492B6BFB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.64.0/18
      VpcId:
        Ref: MyVpcF9F0CA6F
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: clique-up/MyVpc/PublicSubnet2
    Metadata:
      aws:cdk:path: clique-up/MyVpc/PublicSubnet2/Subnet
  MyVpcPublicSubnet2RouteTable1DF17386:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyVpcF9F0CA6F
      Tags:
        - Key: Name
          Value: clique-up/MyVpc/PublicSubnet2
    Metadata:
      aws:cdk:path: clique-up/MyVpc/PublicSubnet2/RouteTable
  MyVpcPublicSubnet2RouteTableAssociation227DE78D:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyVpcPublicSubnet2RouteTable1DF17386
      SubnetId:
        Ref: MyVpcPublicSubnet2Subnet492B6BFB
    Metadata:
      aws:cdk:path: clique-up/MyVpc/PublicSubnet2/RouteTableAssociation
  MyVpcPublicSubnet2DefaultRoute052936F6:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MyVpcPublicSubnet2RouteTable1DF17386
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: MyVpcIGW5C4A4F63
    DependsOn:
      - MyVpcVPCGW488ACE0D
    Metadata:
      aws:cdk:path: clique-up/MyVpc/PublicSubnet2/DefaultRoute
  MyVpcPublicSubnet2EIP8CCBA239:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: clique-up/MyVpc/PublicSubnet2
    Metadata:
      aws:cdk:path: clique-up/MyVpc/PublicSubnet2/EIP
  MyVpcPublicSubnet2NATGateway91BFBEC9:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - MyVpcPublicSubnet2EIP8CCBA239
          - AllocationId
      SubnetId:
        Ref: MyVpcPublicSubnet2Subnet492B6BFB
      Tags:
        - Key: Name
          Value: clique-up/MyVpc/PublicSubnet2
    Metadata:
      aws:cdk:path: clique-up/MyVpc/PublicSubnet2/NATGateway
  MyVpcPrivateSubnet1Subnet5057CF7E:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.128.0/18
      VpcId:
        Ref: MyVpcF9F0CA6F
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: clique-up/MyVpc/PrivateSubnet1
    Metadata:
      aws:cdk:path: clique-up/MyVpc/PrivateSubnet1/Subnet
  MyVpcPrivateSubnet1RouteTable8819E6E2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyVpcF9F0CA6F
      Tags:
        - Key: Name
          Value: clique-up/MyVpc/PrivateSubnet1
    Metadata:
      aws:cdk:path: clique-up/MyVpc/PrivateSubnet1/RouteTable
  MyVpcPrivateSubnet1RouteTableAssociation56D38C7E:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyVpcPrivateSubnet1RouteTable8819E6E2
      SubnetId:
        Ref: MyVpcPrivateSubnet1Subnet5057CF7E
    Metadata:
      aws:cdk:path: clique-up/MyVpc/PrivateSubnet1/RouteTableAssociation
  MyVpcPrivateSubnet1DefaultRouteA8CDE2FA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MyVpcPrivateSubnet1RouteTable8819E6E2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: MyVpcPublicSubnet1NATGatewayAD3400C1
    Metadata:
      aws:cdk:path: clique-up/MyVpc/PrivateSubnet1/DefaultRoute
  MyVpcPrivateSubnet2Subnet0040C983:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.192.0/18
      VpcId:
        Ref: MyVpcF9F0CA6F
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: clique-up/MyVpc/PrivateSubnet2
    Metadata:
      aws:cdk:path: clique-up/MyVpc/PrivateSubnet2/Subnet
  MyVpcPrivateSubnet2RouteTableCEDCEECE:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyVpcF9F0CA6F
      Tags:
        - Key: Name
          Value: clique-up/MyVpc/PrivateSubnet2
    Metadata:
      aws:cdk:path: clique-up/MyVpc/PrivateSubnet2/RouteTable
  MyVpcPrivateSubnet2RouteTableAssociation86A610DA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyVpcPrivateSubnet2RouteTableCEDCEECE
      SubnetId:
        Ref: MyVpcPrivateSubnet2Subnet0040C983
    Metadata:
      aws:cdk:path: clique-up/MyVpc/PrivateSubnet2/RouteTableAssociation
  MyVpcPrivateSubnet2DefaultRoute9CE96294:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MyVpcPrivateSubnet2RouteTableCEDCEECE
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: MyVpcPublicSubnet2NATGateway91BFBEC9
    Metadata:
      aws:cdk:path: clique-up/MyVpc/PrivateSubnet2/DefaultRoute
  MyVpcIGW5C4A4F63:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: clique-up/MyVpc
    Metadata:
      aws:cdk:path: clique-up/MyVpc/IGW
  MyVpcVPCGW488ACE0D:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: MyVpcF9F0CA6F
      InternetGatewayId:
        Ref: MyVpcIGW5C4A4F63
    Metadata:
      aws:cdk:path: clique-up/MyVpc/VPCGW
  Ec2ClusterEE43E89D:
    Type: AWS::ECS::Cluster
    Metadata:
      aws:cdk:path: clique-up/Ec2Cluster/Resource
  Ec2ClusterDefaultAutoScalingGroupInstanceSecurityGroup149B0A9E:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: clique-up/Ec2Cluster/DefaultAutoScalingGroup/InstanceSecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: from 0.0.0.0/0:32768-65535
          FromPort: 32768
          IpProtocol: tcp
          ToPort: 65535
      Tags:
        - Key: Name
          Value: clique-up/Ec2Cluster/DefaultAutoScalingGroup
      VpcId:
        Ref: MyVpcF9F0CA6F
    Metadata:
      aws:cdk:path: clique-up/Ec2Cluster/DefaultAutoScalingGroup/InstanceSecurityGroup/Resource
  Ec2ClusterDefaultAutoScalingGroupInstanceRole73D80898:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - ec2.
                    - Ref: AWS::URLSuffix
        Version: "2012-10-17"
      Tags:
        - Key: Name
          Value: clique-up/Ec2Cluster/DefaultAutoScalingGroup
    Metadata:
      aws:cdk:path: clique-up/Ec2Cluster/DefaultAutoScalingGroup/InstanceRole/Resource
  Ec2ClusterDefaultAutoScalingGroupInstanceRoleDefaultPolicy6D2DC2FD:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecs:CreateCluster
              - ecs:DeregisterContainerInstance
              - ecs:DiscoverPollEndpoint
              - ecs:Poll
              - ecs:RegisterContainerInstance
              - ecs:StartTelemetrySession
              - ecs:Submit*
              - ecr:GetAuthorizationToken
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: Ec2ClusterDefaultAutoScalingGroupInstanceRoleDefaultPolicy6D2DC2FD
      Roles:
        - Ref: Ec2ClusterDefaultAutoScalingGroupInstanceRole73D80898
    Metadata:
      aws:cdk:path: clique-up/Ec2Cluster/DefaultAutoScalingGroup/InstanceRole/DefaultPolicy/Resource
  Ec2ClusterDefaultAutoScalingGroupInstanceProfileDB232471:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: Ec2ClusterDefaultAutoScalingGroupInstanceRole73D80898
    Metadata:
      aws:cdk:path: clique-up/Ec2Cluster/DefaultAutoScalingGroup/InstanceProfile
  Ec2ClusterDefaultAutoScalingGroupLaunchConfig7B2FED3A:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        Ref: SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter
      InstanceType: t2.micro
      IamInstanceProfile:
        Ref: Ec2ClusterDefaultAutoScalingGroupInstanceProfileDB232471
      SecurityGroups:
        - Fn::GetAtt:
            - Ec2ClusterDefaultAutoScalingGroupInstanceSecurityGroup149B0A9E
            - GroupId
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - |-
                #!/bin/bash
                echo ECS_CLUSTER=
              - Ref: Ec2ClusterEE43E89D
              - |-2
                 >> /etc/ecs/ecs.config
                sudo iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP
                sudo service iptables save
                echo ECS_AWSVPC_BLOCK_IMDS=true >> /etc/ecs/ecs.config
    DependsOn:
      - Ec2ClusterDefaultAutoScalingGroupInstanceRoleDefaultPolicy6D2DC2FD
      - Ec2ClusterDefaultAutoScalingGroupInstanceRole73D80898
    Metadata:
      aws:cdk:path: clique-up/Ec2Cluster/DefaultAutoScalingGroup/LaunchConfig
  Ec2ClusterDefaultAutoScalingGroupASGC5A6D4C0:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MaxSize: "1"
      MinSize: "1"
      LaunchConfigurationName:
        Ref: Ec2ClusterDefaultAutoScalingGroupLaunchConfig7B2FED3A
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: clique-up/Ec2Cluster/DefaultAutoScalingGroup
      VPCZoneIdentifier:
        - Ref: MyVpcPrivateSubnet1Subnet5057CF7E
        - Ref: MyVpcPrivateSubnet2Subnet0040C983
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: true
    Metadata:
      aws:cdk:path: clique-up/Ec2Cluster/DefaultAutoScalingGroup/ASG
  Ec2ClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole23116FA3:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Name
          Value: clique-up/Ec2Cluster/DefaultAutoScalingGroup
    Metadata:
      aws:cdk:path: clique-up/Ec2Cluster/DefaultAutoScalingGroup/DrainECSHook/Function/ServiceRole/Resource
  Ec2ClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleDefaultPolicy638C9E33:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ec2:DescribeInstances
              - ec2:DescribeInstanceAttribute
              - ec2:DescribeInstanceStatus
              - ec2:DescribeHosts
            Effect: Allow
            Resource: "*"
          - Action: autoscaling:CompleteLifecycleAction
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":autoscaling:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :autoScalingGroup:*:autoScalingGroupName/
                  - Ref: Ec2ClusterDefaultAutoScalingGroupASGC5A6D4C0
          - Action:
              - ecs:DescribeContainerInstances
              - ecs:DescribeTasks
            Effect: Allow
            Resource: "*"
          - Action:
              - ecs:ListContainerInstances
              - ecs:SubmitContainerStateChange
              - ecs:SubmitTaskStateChange
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - Ec2ClusterEE43E89D
                - Arn
          - Action:
              - ecs:UpdateContainerInstancesState
              - ecs:ListTasks
            Condition:
              ArnEquals:
                ecs:cluster:
                  Fn::GetAtt:
                    - Ec2ClusterEE43E89D
                    - Arn
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: Ec2ClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleDefaultPolicy638C9E33
      Roles:
        - Ref: Ec2ClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole23116FA3
    Metadata:
      aws:cdk:path: clique-up/Ec2Cluster/DefaultAutoScalingGroup/DrainECSHook/Function/ServiceRole/DefaultPolicy/Resource
  Ec2ClusterDefaultAutoScalingGroupDrainECSHookFunctionE0DEFB31:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3, json, os, time

          ecs = boto3.client('ecs')
          autoscaling = boto3.client('autoscaling')


          def lambda_handler(event, context):
            print(json.dumps(event))
            cluster = os.environ['CLUSTER']
            snsTopicArn = event['Records'][0]['Sns']['TopicArn']
            lifecycle_event = json.loads(event['Records'][0]['Sns']['Message'])
            instance_id = lifecycle_event.get('EC2InstanceId')
            if not instance_id:
              print('Got event without EC2InstanceId: %s', json.dumps(event))
              return

            instance_arn = container_instance_arn(cluster, instance_id)
            print('Instance %s has container instance ARN %s' % (lifecycle_event['EC2InstanceId'], instance_arn))

            if not instance_arn:
              return

            while has_tasks(cluster, instance_arn):
              time.sleep(10)

            try:
              print('Terminating instance %s' % instance_id)
              autoscaling.complete_lifecycle_action(
                  LifecycleActionResult='CONTINUE',
                  **pick(lifecycle_event, 'LifecycleHookName', 'LifecycleActionToken', 'AutoScalingGroupName'))
            except Exception as e:
              # Lifecycle action may have already completed.
              print(str(e))


          def container_instance_arn(cluster, instance_id):
            """Turn an instance ID into a container instance ARN."""
            arns = ecs.list_container_instances(cluster=cluster, filter='ec2InstanceId==' + instance_id)['containerInstanceArns']
            if not arns:
              return None
            return arns[0]


          def has_tasks(cluster, instance_arn):
            """Return True if the instance is running tasks for the given cluster."""
            instances = ecs.describe_container_instances(cluster=cluster, containerInstances=[instance_arn])['containerInstances']
            if not instances:
              return False
            instance = instances[0]

            if instance['status'] == 'ACTIVE':
              # Start draining, then try again later
              set_container_instance_to_draining(cluster, instance_arn)
              return True

            tasks = instance['runningTasksCount'] + instance['pendingTasksCount']
            print('Instance %s has %s tasks' % (instance_arn, tasks))

            return tasks > 0


          def set_container_instance_to_draining(cluster, instance_arn):
            ecs.update_container_instances_state(
                cluster=cluster,
                containerInstances=[instance_arn], status='DRAINING')


          def pick(dct, *keys):
            """Pick a subset of a dict."""
            return {k: v for k, v in dct.items() if k in keys}
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
          - Ec2ClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole23116FA3
          - Arn
      Runtime: python3.6
      Environment:
        Variables:
          CLUSTER:
            Ref: Ec2ClusterEE43E89D
      Tags:
        - Key: Name
          Value: clique-up/Ec2Cluster/DefaultAutoScalingGroup
      Timeout: 310
    DependsOn:
      - Ec2ClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleDefaultPolicy638C9E33
      - Ec2ClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole23116FA3
    Metadata:
      aws:cdk:path: clique-up/Ec2Cluster/DefaultAutoScalingGroup/DrainECSHook/Function/Resource
  Ec2ClusterDefaultAutoScalingGroupDrainECSHookFunctionAllowInvokecliqueupEc2ClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicDA8D5E2D7B38ED7E:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - Ec2ClusterDefaultAutoScalingGroupDrainECSHookFunctionE0DEFB31
          - Arn
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: Ec2ClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicF7263B30
    Metadata:
      aws:cdk:path: clique-up/Ec2Cluster/DefaultAutoScalingGroup/DrainECSHook/Function/AllowInvoke:cliqueupEc2ClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicDA8D5E2D
  Ec2ClusterDefaultAutoScalingGroupDrainECSHookFunctionTopic4795E0F6:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      TopicArn:
        Ref: Ec2ClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicF7263B30
      Endpoint:
        Fn::GetAtt:
          - Ec2ClusterDefaultAutoScalingGroupDrainECSHookFunctionE0DEFB31
          - Arn
      Region:
        Fn::Select:
          - 3
          - Fn::Split:
              - ":"
              - Ref: Ec2ClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicF7263B30
    Metadata:
      aws:cdk:path: clique-up/Ec2Cluster/DefaultAutoScalingGroup/DrainECSHook/Function/Topic/Resource
  Ec2ClusterDefaultAutoScalingGroupLifecycleHookDrainHookRole71045ED7:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: autoscaling.amazonaws.com
        Version: "2012-10-17"
      Tags:
        - Key: Name
          Value: clique-up/Ec2Cluster/DefaultAutoScalingGroup
    Metadata:
      aws:cdk:path: clique-up/Ec2Cluster/DefaultAutoScalingGroup/LifecycleHookDrainHook/Role/Resource
  Ec2ClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleDefaultPolicyE499974B:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: sns:Publish
            Effect: Allow
            Resource:
              Ref: Ec2ClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicF7263B30
        Version: "2012-10-17"
      PolicyName: Ec2ClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleDefaultPolicyE499974B
      Roles:
        - Ref: Ec2ClusterDefaultAutoScalingGroupLifecycleHookDrainHookRole71045ED7
    Metadata:
      aws:cdk:path: clique-up/Ec2Cluster/DefaultAutoScalingGroup/LifecycleHookDrainHook/Role/DefaultPolicy/Resource
  Ec2ClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicF7263B30:
    Type: AWS::SNS::Topic
    Properties:
      Tags:
        - Key: Name
          Value: clique-up/Ec2Cluster/DefaultAutoScalingGroup
    Metadata:
      aws:cdk:path: clique-up/Ec2Cluster/DefaultAutoScalingGroup/LifecycleHookDrainHook/Topic/Resource
  Ec2ClusterDefaultAutoScalingGroupLifecycleHookDrainHook5CB1467E:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName:
        Ref: Ec2ClusterDefaultAutoScalingGroupASGC5A6D4C0
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
      DefaultResult: CONTINUE
      HeartbeatTimeout: 300
      NotificationTargetARN:
        Ref: Ec2ClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicF7263B30
      RoleARN:
        Fn::GetAtt:
          - Ec2ClusterDefaultAutoScalingGroupLifecycleHookDrainHookRole71045ED7
          - Arn
    DependsOn:
      - Ec2ClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleDefaultPolicyE499974B
      - Ec2ClusterDefaultAutoScalingGroupLifecycleHookDrainHookRole71045ED7
    Metadata:
      aws:cdk:path: clique-up/Ec2Cluster/DefaultAutoScalingGroup/LifecycleHookDrainHook/Resource
  Ec2ServiceLB381329CE:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - Ref: MyVpcPublicSubnet1SubnetF6608456
        - Ref: MyVpcPublicSubnet2Subnet492B6BFB
      Type: network
    DependsOn:
      - MyVpcPublicSubnet1DefaultRoute95FDF9EB
      - MyVpcPublicSubnet2DefaultRoute052936F6
    Metadata:
      aws:cdk:path: clique-up/Ec2Service/LB/Resource
  Ec2ServiceLBPublicListenerA941070C:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: Ec2ServiceLBPublicListenerECSGroup3DC8690E
          Type: forward
      LoadBalancerArn:
        Ref: Ec2ServiceLB381329CE
      Port: 80
      Protocol: TCP
    Metadata:
      aws:cdk:path: clique-up/Ec2Service/LB/PublicListener/Resource
  Ec2ServiceLBPublicListenerECSGroup3DC8690E:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: TCP
      TargetType: instance
      VpcId:
        Ref: MyVpcF9F0CA6F
    Metadata:
      aws:cdk:path: clique-up/Ec2Service/LB/PublicListener/ECSGroup/Resource
  Ec2ServiceTaskDefTaskRole27A5D642:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: clique-up/Ec2Service/TaskDef/TaskRole/Resource
  Ec2ServiceTaskDef8D94BAA3:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image:
            Fn::Join:
              - ""
              - - Ref: AWS::AccountId
                - .dkr.ecr.
                - Ref: AWS::Region
                - "."
                - Ref: AWS::URLSuffix
                - /cliqueup-service-api:0a774a167528fef58683ba563b332d39618f7df6a405e386af812a37cb9bb499
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: Ec2ServiceTaskDefwebLogGroup923CD0CD
              awslogs-stream-prefix: Ec2Service
              awslogs-region:
                Ref: AWS::Region
          Memory: 512
          Name: web
          PortMappings:
            - ContainerPort: 8000
              HostPort: 0
              Protocol: tcp
      ExecutionRoleArn:
        Fn::GetAtt:
          - Ec2ServiceTaskDefExecutionRole0B89ED3C
          - Arn
      Family: cliqueupEc2ServiceTaskDef3A5DD049
      NetworkMode: bridge
      RequiresCompatibilities:
        - EC2
      TaskRoleArn:
        Fn::GetAtt:
          - Ec2ServiceTaskDefTaskRole27A5D642
          - Arn
    Metadata:
      aws:cdk:path: clique-up/Ec2Service/TaskDef/Resource
  Ec2ServiceTaskDefwebLogGroup923CD0CD:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: clique-up/Ec2Service/TaskDef/web/LogGroup/Resource
  Ec2ServiceTaskDefExecutionRole0B89ED3C:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: clique-up/Ec2Service/TaskDef/ExecutionRole/Resource
  Ec2ServiceTaskDefExecutionRoleDefaultPolicy7E1456F8:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":ecr:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :repository/cliqueup-service-api
          - Action: ecr:GetAuthorizationToken
            Effect: Allow
            Resource: "*"
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - Ec2ServiceTaskDefwebLogGroup923CD0CD
                - Arn
        Version: "2012-10-17"
      PolicyName: Ec2ServiceTaskDefExecutionRoleDefaultPolicy7E1456F8
      Roles:
        - Ref: Ec2ServiceTaskDefExecutionRole0B89ED3C
    Metadata:
      aws:cdk:path: clique-up/Ec2Service/TaskDef/ExecutionRole/DefaultPolicy/Resource
  Ec2Service398F0E46:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: Ec2ClusterEE43E89D
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 0
      DesiredCount: 1
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: EC2
      LoadBalancers:
        - ContainerName: web
          ContainerPort: 8000
          TargetGroupArn:
            Ref: Ec2ServiceLBPublicListenerECSGroup3DC8690E
      SchedulingStrategy: REPLICA
      TaskDefinition:
        Ref: Ec2ServiceTaskDef8D94BAA3
    DependsOn:
      - Ec2ServiceLBPublicListenerECSGroup3DC8690E
      - Ec2ServiceLBPublicListenerA941070C
    Metadata:
      aws:cdk:path: clique-up/Ec2Service/Service/Service
  cliqueupuserpoolsmsRole17B2C98F:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Condition:
              StringEquals:
                sts:ExternalId: cliqueupcliqueupuserpoolDB4FE4E0
            Effect: Allow
            Principal:
              Service: cognito-idp.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action: sns:Publish
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
          PolicyName: sns-publish
    Metadata:
      aws:cdk:path: clique-up/cliqueup-user-pool/smsRole/Resource
  cliqueupuserpool56E7F9CE:
    Type: AWS::Cognito::UserPool
    Properties:
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
          - Name: verified_phone_number
            Priority: 2
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AutoVerifiedAttributes:
        - email
        - phone_number
      EmailVerificationMessage: Hello {username}, Thanks for signing up to CliqueUp! Your verification code is {####}
      EmailVerificationSubject: Verify your email for CliqueUp!
      Policies:
        PasswordPolicy:
          MinimumLength: 12
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
          TemporaryPasswordValidityDays: 3
      Schema:
        - Mutable: false
          Name: email
          Required: true
        - Mutable: true
          Name: phone_number
          Required: false
      SmsConfiguration:
        ExternalId: cliqueupcliqueupuserpoolDB4FE4E0
        SnsCallerArn:
          Fn::GetAtt:
            - cliqueupuserpoolsmsRole17B2C98F
            - Arn
      SmsVerificationMessage: Hello {username}, Thanks for signing up to our CliqueUp! Your verification code is {####}
      UsernameAttributes:
        - email
        - phone_number
      UserPoolName: cliqueup-user-pool
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
        EmailMessage: Hello {username}, Thanks for signing up to CliqueUp! Your verification code is {####}
        EmailSubject: Verify your email for CliqueUp!
        SmsMessage: Hello {username}, Thanks for signing up to our CliqueUp! Your verification code is {####}
    Metadata:
      aws:cdk:path: clique-up/cliqueup-user-pool/Resource
  InstanceSubnetGroupF2CBA54F:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for Instance database
      SubnetIds:
        - Ref: MyVpcPublicSubnet1SubnetF6608456
        - Ref: MyVpcPublicSubnet2Subnet492B6BFB
    Metadata:
      aws:cdk:path: clique-up/Instance/SubnetGroup
  InstanceSecurityGroupB4E5FA83:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Instance database
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: MyVpcF9F0CA6F
    Metadata:
      aws:cdk:path: clique-up/Instance/SecurityGroup/Resource
  InstanceSecurityGroupfrom00000IndirectPort7D6BC055:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      CidrIp: 0.0.0.0/0
      Description: from 0.0.0.0/0:{IndirectPort}
      FromPort:
        Fn::GetAtt:
          - InstanceC1063A87
          - Endpoint.Port
      GroupId:
        Fn::GetAtt:
          - InstanceSecurityGroupB4E5FA83
          - GroupId
      ToPort:
        Fn::GetAtt:
          - InstanceC1063A87
          - Endpoint.Port
    Metadata:
      aws:cdk:path: clique-up/Instance/SecurityGroup/from 0.0.0.0_0:{IndirectPort}
  InstanceC1063A87:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t3.micro
      AllocatedStorage: "100"
      CopyTagsToSnapshot: true
      DBName: cliqueup
      DBSubnetGroupName:
        Ref: InstanceSubnetGroupF2CBA54F
      DeletionProtection: true
      Engine: postgres
      EngineVersion: "11.1"
      MasterUsername: master
      MasterUserPassword: Passw0rd
      PubliclyAccessible: true
      StorageType: gp2
      VPCSecurityGroups:
        - Fn::GetAtt:
            - InstanceSecurityGroupB4E5FA83
            - GroupId
    UpdateReplacePolicy: Snapshot
    Metadata:
      aws:cdk:path: clique-up/Instance/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Modules: aws-cdk=2.113.0,@aws-cdk/assets=1.51.0,@aws-cdk/aws-applicationautoscaling=1.51.0,@aws-cdk/aws-autoscaling=1.51.0,@aws-cdk/aws-autoscaling-common=1.51.0,@aws-cdk/aws-autoscaling-hooktargets=1.51.0,@aws-cdk/aws-certificatemanager=1.51.0,@aws-cdk/aws-cloudwatch=1.51.0,@aws-cdk/aws-cognito=1.49.1,@aws-cdk/aws-ec2=1.51.0,@aws-cdk/aws-ecr=1.51.0,@aws-cdk/aws-ecr-assets=1.51.0,@aws-cdk/aws-ecs=1.51.0,@aws-cdk/aws-ecs-patterns=1.51.0,@aws-cdk/aws-elasticloadbalancingv2=1.51.0,@aws-cdk/aws-events=1.51.0,@aws-cdk/aws-events-targets=1.51.0,@aws-cdk/aws-iam=1.51.0,@aws-cdk/aws-kms=1.51.0,@aws-cdk/aws-lambda=1.51.0,@aws-cdk/aws-logs=1.51.0,@aws-cdk/aws-rds=1.51.0,@aws-cdk/aws-route53=1.51.0,@aws-cdk/aws-route53-targets=1.51.0,@aws-cdk/aws-s3=1.51.0,@aws-cdk/aws-s3-assets=1.51.0,@aws-cdk/aws-sam=1.51.0,@aws-cdk/aws-secretsmanager=1.51.0,@aws-cdk/aws-servicediscovery=1.51.0,@aws-cdk/aws-sns=1.51.0,@aws-cdk/aws-sns-subscriptions=1.51.0,@aws-cdk/aws-sqs=1.51.0,@aws-cdk/aws-ssm=1.51.0,@aws-cdk/cloud-assembly-schema=1.51.0,@aws-cdk/core=1.51.0,@aws-cdk/custom-resources=1.49.1,@aws-cdk/cx-api=1.51.0,@aws-cdk/region-info=1.51.0,jsii-runtime=node.js/v18.12.1
    Condition: CDKMetadataAvailable
Parameters:
  SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
Outputs:
  Ec2ServiceLoadBalancerDNS6983C9B2:
    Value:
      Fn::GetAtt:
        - Ec2ServiceLB381329CE
        - DNSName
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - il-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - me-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2

