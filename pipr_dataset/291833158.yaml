Resources:
  Vpc8378EB38:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: AppMeshTlsGatewayDemoStack/Vpc
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Vpc/Resource
  VpcPublicSubnet1Subnet5C2D37C4:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/18
      VpcId:
        Ref: Vpc8378EB38
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: AppMeshTlsGatewayDemoStack/Vpc/PublicSubnet1
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Vpc/PublicSubnet1/Subnet
  VpcPublicSubnet1RouteTable6C95E38E:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc8378EB38
      Tags:
        - Key: Name
          Value: AppMeshTlsGatewayDemoStack/Vpc/PublicSubnet1
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Vpc/PublicSubnet1/RouteTable
  VpcPublicSubnet1RouteTableAssociation97140677:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcPublicSubnet1RouteTable6C95E38E
      SubnetId:
        Ref: VpcPublicSubnet1Subnet5C2D37C4
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Vpc/PublicSubnet1/RouteTableAssociation
  VpcPublicSubnet1DefaultRoute3DA9E72A:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VpcPublicSubnet1RouteTable6C95E38E
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VpcIGWD7BA715C
    DependsOn:
      - VpcVPCGWBF912B6E
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Vpc/PublicSubnet1/DefaultRoute
  VpcPublicSubnet1EIPD7E02669:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: AppMeshTlsGatewayDemoStack/Vpc/PublicSubnet1
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Vpc/PublicSubnet1/EIP
  VpcPublicSubnet1NATGateway4D7517AA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - VpcPublicSubnet1EIPD7E02669
          - AllocationId
      SubnetId:
        Ref: VpcPublicSubnet1Subnet5C2D37C4
      Tags:
        - Key: Name
          Value: AppMeshTlsGatewayDemoStack/Vpc/PublicSubnet1
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Vpc/PublicSubnet1/NATGateway
  VpcPublicSubnet2Subnet691E08A3:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.64.0/18
      VpcId:
        Ref: Vpc8378EB38
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: AppMeshTlsGatewayDemoStack/Vpc/PublicSubnet2
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Vpc/PublicSubnet2/Subnet
  VpcPublicSubnet2RouteTable94F7E489:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc8378EB38
      Tags:
        - Key: Name
          Value: AppMeshTlsGatewayDemoStack/Vpc/PublicSubnet2
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Vpc/PublicSubnet2/RouteTable
  VpcPublicSubnet2RouteTableAssociationDD5762D8:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcPublicSubnet2RouteTable94F7E489
      SubnetId:
        Ref: VpcPublicSubnet2Subnet691E08A3
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Vpc/PublicSubnet2/RouteTableAssociation
  VpcPublicSubnet2DefaultRoute97F91067:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VpcPublicSubnet2RouteTable94F7E489
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VpcIGWD7BA715C
    DependsOn:
      - VpcVPCGWBF912B6E
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Vpc/PublicSubnet2/DefaultRoute
  VpcPublicSubnet2EIP3C605A87:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: AppMeshTlsGatewayDemoStack/Vpc/PublicSubnet2
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Vpc/PublicSubnet2/EIP
  VpcPublicSubnet2NATGateway9182C01D:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - VpcPublicSubnet2EIP3C605A87
          - AllocationId
      SubnetId:
        Ref: VpcPublicSubnet2Subnet691E08A3
      Tags:
        - Key: Name
          Value: AppMeshTlsGatewayDemoStack/Vpc/PublicSubnet2
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Vpc/PublicSubnet2/NATGateway
  VpcPrivateSubnet1Subnet536B997A:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.128.0/18
      VpcId:
        Ref: Vpc8378EB38
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: AppMeshTlsGatewayDemoStack/Vpc/PrivateSubnet1
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Vpc/PrivateSubnet1/Subnet
  VpcPrivateSubnet1RouteTableB2C5B500:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc8378EB38
      Tags:
        - Key: Name
          Value: AppMeshTlsGatewayDemoStack/Vpc/PrivateSubnet1
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Vpc/PrivateSubnet1/RouteTable
  VpcPrivateSubnet1RouteTableAssociation70C59FA6:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcPrivateSubnet1RouteTableB2C5B500
      SubnetId:
        Ref: VpcPrivateSubnet1Subnet536B997A
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Vpc/PrivateSubnet1/RouteTableAssociation
  VpcPrivateSubnet1DefaultRouteBE02A9ED:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VpcPrivateSubnet1RouteTableB2C5B500
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: VpcPublicSubnet1NATGateway4D7517AA
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Vpc/PrivateSubnet1/DefaultRoute
  VpcPrivateSubnet2Subnet3788AAA1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.192.0/18
      VpcId:
        Ref: Vpc8378EB38
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: AppMeshTlsGatewayDemoStack/Vpc/PrivateSubnet2
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Vpc/PrivateSubnet2/Subnet
  VpcPrivateSubnet2RouteTableA678073B:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc8378EB38
      Tags:
        - Key: Name
          Value: AppMeshTlsGatewayDemoStack/Vpc/PrivateSubnet2
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Vpc/PrivateSubnet2/RouteTable
  VpcPrivateSubnet2RouteTableAssociationA89CAD56:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcPrivateSubnet2RouteTableA678073B
      SubnetId:
        Ref: VpcPrivateSubnet2Subnet3788AAA1
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Vpc/PrivateSubnet2/RouteTableAssociation
  VpcPrivateSubnet2DefaultRoute060D2087:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VpcPrivateSubnet2RouteTableA678073B
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: VpcPublicSubnet2NATGateway9182C01D
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Vpc/PrivateSubnet2/DefaultRoute
  VpcIGWD7BA715C:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: AppMeshTlsGatewayDemoStack/Vpc
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Vpc/IGW
  VpcVPCGWBF912B6E:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: Vpc8378EB38
      InternetGatewayId:
        Ref: VpcIGWD7BA715C
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Vpc/VPCGW
  Mesh73A573F6:
    Type: AWS::AppMesh::Mesh
    Properties:
      MeshName: AppMeshTlsGatewayDemoStackMesh801256B9
      Spec: {}
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Mesh/Resource
  Namespace9B63B8C8:
    Type: AWS::ServiceDiscovery::HttpNamespace
    Properties:
      Name: test
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Namespace/Resource
  AppServiceE9A897BA:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: app
      NamespaceId:
        Fn::GetAtt:
          - Namespace9B63B8C8
          - Id
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/AppService/Resource
  GatewayCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: gateway.test
      CertificateAuthorityArn: arn:aws:acm-pca:us-west-2:123456789012:certificate-authority/17c11925-da43-4c9d-a2bd-0b9c7828a9cd
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/GatewayCertificate
  ServiceCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: app.test
      CertificateAuthorityArn: arn:aws:acm-pca:us-west-2:123456789012:certificate-authority/17c11925-da43-4c9d-a2bd-0b9c7828a9cd
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/ServiceCertificate
  Gateway:
    Type: AWS::AppMesh::VirtualGateway
    Properties:
      MeshName:
        Fn::GetAtt:
          - Mesh73A573F6
          - MeshName
      Spec:
        BackendDefaults:
          ClientPolicy:
            TLS:
              Validation:
                Trust:
                  ACM:
                    CertificateAuthorityArns:
                      - arn:aws:acm-pca:us-west-2:123456789012:certificate-authority/17c11925-da43-4c9d-a2bd-0b9c7828a9cd
        Listeners:
          - PortMapping:
              Port: 8443
              Protocol: http
            TLS:
              Certificate:
                ACM:
                  CertificateArn:
                    Ref: GatewayCertificate
              Mode: STRICT
      VirtualGatewayName: Gateway
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Gateway
  WebAppNode13D0C479:
    Type: AWS::AppMesh::VirtualNode
    Properties:
      MeshName:
        Fn::GetAtt:
          - Mesh73A573F6
          - MeshName
      Spec:
        Listeners:
          - PortMapping:
              Port: 80
              Protocol: http
            TLS:
              Certificate:
                ACM:
                  CertificateArn:
                    Ref: ServiceCertificate
              Mode: STRICT
        Logging:
          AccessLog:
            File:
              Path: /dev/stdout
        ServiceDiscovery:
          AWSCloudMap:
            NamespaceName: test
            ServiceName:
              Fn::GetAtt:
                - AppServiceE9A897BA
                - Name
      VirtualNodeName: AppMeshTlsGatewayDemoStackWebAppNode44F3F08F
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/WebAppNode/Resource
  WebAppServiceC6FD956B:
    Type: AWS::AppMesh::VirtualService
    Properties:
      MeshName:
        Fn::GetAtt:
          - Mesh73A573F6
          - MeshName
      Spec:
        Provider:
          VirtualNode:
            VirtualNodeName:
              Fn::GetAtt:
                - WebAppNode13D0C479
                - VirtualNodeName
      VirtualServiceName: AppMeshTlsGatewayDemoStackWebAppService689C26D1
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/WebAppService/Resource
  DefaultRoute:
    Type: AWS::AppMesh::GatewayRoute
    Properties:
      GatewayRouteName: default
      MeshName:
        Fn::GetAtt:
          - Mesh73A573F6
          - MeshName
      Spec:
        HttpRoute:
          Action:
            Target:
              VirtualService:
                VirtualServiceName:
                  Fn::GetAtt:
                    - WebAppServiceC6FD956B
                    - VirtualServiceName
          Match:
            Prefix: /
      VirtualGatewayName: Gateway
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/DefaultRoute
  BastionInstanceSecurityGroup71C3847E:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: AppMeshTlsGatewayDemoStack/Bastion/Resource/InstanceSecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: BastionHost
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Bastion/Resource/InstanceSecurityGroup/Resource
  BastionInstanceRoleD3B36EDD:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - ec2.
                    - Ref: AWS::URLSuffix
        Version: "2012-10-17"
      Tags:
        - Key: Name
          Value: BastionHost
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Bastion/Resource/InstanceRole/Resource
  BastionInstanceRoleDefaultPolicy457C3156:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ssmmessages:*
              - ssm:UpdateInstanceInformation
              - ec2messages:*
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: BastionInstanceRoleDefaultPolicy457C3156
      Roles:
        - Ref: BastionInstanceRoleD3B36EDD
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Bastion/Resource/InstanceRole/DefaultPolicy/Resource
  BastionInstanceProfile8FFAF242:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: BastionInstanceRoleD3B36EDD
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Bastion/Resource/InstanceProfile
  Bastion6045F255:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      IamInstanceProfile:
        Ref: BastionInstanceProfile8FFAF242
      ImageId:
        Ref: SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter
      InstanceType: t3.nano
      SecurityGroupIds:
        - Fn::GetAtt:
            - BastionInstanceSecurityGroup71C3847E
            - GroupId
      SubnetId:
        Ref: VpcPrivateSubnet1Subnet536B997A
      Tags:
        - Key: Name
          Value: BastionHost
      UserData:
        Fn::Base64: |-
          #!/bin/bash
          yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
    DependsOn:
      - BastionInstanceRoleDefaultPolicy457C3156
      - BastionInstanceRoleD3B36EDD
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Bastion/Resource/Resource
  ClusterEB0386A7:
    Type: AWS::ECS::Cluster
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Cluster/Resource
  ClusterClusterCapacityInstanceSecurityGroup921EEC40:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: AppMeshTlsGatewayDemoStack/Cluster/ClusterCapacity/InstanceSecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: AppMeshTlsGatewayDemoStack/Cluster/ClusterCapacity
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Cluster/ClusterCapacity/InstanceSecurityGroup/Resource
  ClusterClusterCapacityInstanceSecurityGroupfromAppMeshTlsGatewayDemoStackBastionInstanceSecurityGroup39D6BD67ALLTRAFFIC6D1C62DF:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: "-1"
      Description: from AppMeshTlsGatewayDemoStackBastionInstanceSecurityGroup39D6BD67:ALL TRAFFIC
      GroupId:
        Fn::GetAtt:
          - ClusterClusterCapacityInstanceSecurityGroup921EEC40
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - BastionInstanceSecurityGroup71C3847E
          - GroupId
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Cluster/ClusterCapacity/InstanceSecurityGroup/from AppMeshTlsGatewayDemoStackBastionInstanceSecurityGroup39D6BD67:ALL TRAFFIC
  ClusterClusterCapacityInstanceRoleAAD7B101:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - ec2.
                    - Ref: AWS::URLSuffix
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
        - Key: Name
          Value: AppMeshTlsGatewayDemoStack/Cluster/ClusterCapacity
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Cluster/ClusterCapacity/InstanceRole/Resource
  ClusterClusterCapacityInstanceRoleDefaultPolicyAFBB40C1:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecs:DeregisterContainerInstance
              - ecs:RegisterContainerInstance
              - ecs:Submit*
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - ClusterEB0386A7
                - Arn
          - Action:
              - ecs:Poll
              - ecs:StartTelemetrySession
            Condition:
              ArnEquals:
                ecs:cluster:
                  Fn::GetAtt:
                    - ClusterEB0386A7
                    - Arn
            Effect: Allow
            Resource: "*"
          - Action:
              - ecs:DiscoverPollEndpoint
              - ecr:GetAuthorizationToken
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: ClusterClusterCapacityInstanceRoleDefaultPolicyAFBB40C1
      Roles:
        - Ref: ClusterClusterCapacityInstanceRoleAAD7B101
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Cluster/ClusterCapacity/InstanceRole/DefaultPolicy/Resource
  ClusterClusterCapacityInstanceProfileAA941E05:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: ClusterClusterCapacityInstanceRoleAAD7B101
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Cluster/ClusterCapacity/InstanceProfile
  ClusterClusterCapacityLaunchConfigAE7EAA79:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        Ref: SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter
      InstanceType: t3.small
      IamInstanceProfile:
        Ref: ClusterClusterCapacityInstanceProfileAA941E05
      SecurityGroups:
        - Fn::GetAtt:
            - ClusterClusterCapacityInstanceSecurityGroup921EEC40
            - GroupId
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - |-
                #!/bin/bash
                echo ECS_CLUSTER=
              - Ref: ClusterEB0386A7
              - |-2
                 >> /etc/ecs/ecs.config
                sudo iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP
                sudo service iptables save
                echo ECS_AWSVPC_BLOCK_IMDS=true >> /etc/ecs/ecs.config
    DependsOn:
      - ClusterClusterCapacityInstanceRoleDefaultPolicyAFBB40C1
      - ClusterClusterCapacityInstanceRoleAAD7B101
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Cluster/ClusterCapacity/LaunchConfig
  ClusterClusterCapacityASGE2804661:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MaxSize: "4"
      MinSize: "4"
      LaunchConfigurationName:
        Ref: ClusterClusterCapacityLaunchConfigAE7EAA79
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: AppMeshTlsGatewayDemoStack/Cluster/ClusterCapacity
      VPCZoneIdentifier:
        - Ref: VpcPrivateSubnet1Subnet536B997A
        - Ref: VpcPrivateSubnet2Subnet3788AAA1
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: true
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Cluster/ClusterCapacity/ASG
  ClusterClusterCapacityDrainECSHookFunctionServiceRoleF786F7CC:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Name
          Value: AppMeshTlsGatewayDemoStack/Cluster/ClusterCapacity
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Cluster/ClusterCapacity/DrainECSHook/Function/ServiceRole/Resource
  ClusterClusterCapacityDrainECSHookFunctionServiceRoleDefaultPolicy7805FBD3:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ec2:DescribeInstances
              - ec2:DescribeInstanceAttribute
              - ec2:DescribeInstanceStatus
              - ec2:DescribeHosts
            Effect: Allow
            Resource: "*"
          - Action: autoscaling:CompleteLifecycleAction
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":autoscaling:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :autoScalingGroup:*:autoScalingGroupName/
                  - Ref: ClusterClusterCapacityASGE2804661
          - Action:
              - ecs:DescribeContainerInstances
              - ecs:DescribeTasks
            Condition:
              ArnEquals:
                ecs:cluster:
                  Fn::GetAtt:
                    - ClusterEB0386A7
                    - Arn
            Effect: Allow
            Resource: "*"
          - Action:
              - ecs:ListContainerInstances
              - ecs:SubmitContainerStateChange
              - ecs:SubmitTaskStateChange
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - ClusterEB0386A7
                - Arn
          - Action:
              - ecs:UpdateContainerInstancesState
              - ecs:ListTasks
            Condition:
              ArnEquals:
                ecs:cluster:
                  Fn::GetAtt:
                    - ClusterEB0386A7
                    - Arn
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: ClusterClusterCapacityDrainECSHookFunctionServiceRoleDefaultPolicy7805FBD3
      Roles:
        - Ref: ClusterClusterCapacityDrainECSHookFunctionServiceRoleF786F7CC
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Cluster/ClusterCapacity/DrainECSHook/Function/ServiceRole/DefaultPolicy/Resource
  ClusterClusterCapacityDrainECSHookFunctionD4691DE6:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3, json, os, time

          ecs = boto3.client('ecs')
          autoscaling = boto3.client('autoscaling')


          def lambda_handler(event, context):
            print(json.dumps(event))
            cluster = os.environ['CLUSTER']
            snsTopicArn = event['Records'][0]['Sns']['TopicArn']
            lifecycle_event = json.loads(event['Records'][0]['Sns']['Message'])
            instance_id = lifecycle_event.get('EC2InstanceId')
            if not instance_id:
              print('Got event without EC2InstanceId: %s', json.dumps(event))
              return

            instance_arn = container_instance_arn(cluster, instance_id)
            print('Instance %s has container instance ARN %s' % (lifecycle_event['EC2InstanceId'], instance_arn))

            if not instance_arn:
              return

            while has_tasks(cluster, instance_arn):
              time.sleep(10)

            try:
              print('Terminating instance %s' % instance_id)
              autoscaling.complete_lifecycle_action(
                  LifecycleActionResult='CONTINUE',
                  **pick(lifecycle_event, 'LifecycleHookName', 'LifecycleActionToken', 'AutoScalingGroupName'))
            except Exception as e:
              # Lifecycle action may have already completed.
              print(str(e))


          def container_instance_arn(cluster, instance_id):
            """Turn an instance ID into a container instance ARN."""
            arns = ecs.list_container_instances(cluster=cluster, filter='ec2InstanceId==' + instance_id)['containerInstanceArns']
            if not arns:
              return None
            return arns[0]


          def has_tasks(cluster, instance_arn):
            """Return True if the instance is running tasks for the given cluster."""
            instances = ecs.describe_container_instances(cluster=cluster, containerInstances=[instance_arn])['containerInstances']
            if not instances:
              return False
            instance = instances[0]

            if instance['status'] == 'ACTIVE':
              # Start draining, then try again later
              set_container_instance_to_draining(cluster, instance_arn)
              return True

            tasks = instance['runningTasksCount'] + instance['pendingTasksCount']
            print('Instance %s has %s tasks' % (instance_arn, tasks))

            return tasks > 0


          def set_container_instance_to_draining(cluster, instance_arn):
            ecs.update_container_instances_state(
                cluster=cluster,
                containerInstances=[instance_arn], status='DRAINING')


          def pick(dct, *keys):
            """Pick a subset of a dict."""
            return {k: v for k, v in dct.items() if k in keys}
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
          - ClusterClusterCapacityDrainECSHookFunctionServiceRoleF786F7CC
          - Arn
      Runtime: python3.6
      Environment:
        Variables:
          CLUSTER:
            Ref: ClusterEB0386A7
      Tags:
        - Key: Name
          Value: AppMeshTlsGatewayDemoStack/Cluster/ClusterCapacity
      Timeout: 310
    DependsOn:
      - ClusterClusterCapacityDrainECSHookFunctionServiceRoleDefaultPolicy7805FBD3
      - ClusterClusterCapacityDrainECSHookFunctionServiceRoleF786F7CC
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Cluster/ClusterCapacity/DrainECSHook/Function/Resource
  ClusterClusterCapacityDrainECSHookFunctionAllowInvokeAppMeshTlsGatewayDemoStackClusterClusterCapacityLifecycleHookDrainHookTopic48712C8B8B5766B6:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ClusterClusterCapacityDrainECSHookFunctionD4691DE6
          - Arn
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: ClusterClusterCapacityLifecycleHookDrainHookTopicBADCD679
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Cluster/ClusterCapacity/DrainECSHook/Function/AllowInvoke:AppMeshTlsGatewayDemoStackClusterClusterCapacityLifecycleHookDrainHookTopic48712C8B
  ClusterClusterCapacityDrainECSHookFunctionTopicA1AB4957:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      TopicArn:
        Ref: ClusterClusterCapacityLifecycleHookDrainHookTopicBADCD679
      Endpoint:
        Fn::GetAtt:
          - ClusterClusterCapacityDrainECSHookFunctionD4691DE6
          - Arn
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Cluster/ClusterCapacity/DrainECSHook/Function/Topic/Resource
  ClusterClusterCapacityLifecycleHookDrainHookRoleCFC0E992:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: autoscaling.amazonaws.com
        Version: "2012-10-17"
      Tags:
        - Key: Name
          Value: AppMeshTlsGatewayDemoStack/Cluster/ClusterCapacity
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Cluster/ClusterCapacity/LifecycleHookDrainHook/Role/Resource
  ClusterClusterCapacityLifecycleHookDrainHookRoleDefaultPolicyB94B5462:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: sns:Publish
            Effect: Allow
            Resource:
              Ref: ClusterClusterCapacityLifecycleHookDrainHookTopicBADCD679
        Version: "2012-10-17"
      PolicyName: ClusterClusterCapacityLifecycleHookDrainHookRoleDefaultPolicyB94B5462
      Roles:
        - Ref: ClusterClusterCapacityLifecycleHookDrainHookRoleCFC0E992
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Cluster/ClusterCapacity/LifecycleHookDrainHook/Role/DefaultPolicy/Resource
  ClusterClusterCapacityLifecycleHookDrainHookTopicBADCD679:
    Type: AWS::SNS::Topic
    Properties:
      Tags:
        - Key: Name
          Value: AppMeshTlsGatewayDemoStack/Cluster/ClusterCapacity
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Cluster/ClusterCapacity/LifecycleHookDrainHook/Topic/Resource
  ClusterClusterCapacityLifecycleHookDrainHook423EC4DB:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName:
        Ref: ClusterClusterCapacityASGE2804661
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
      DefaultResult: CONTINUE
      HeartbeatTimeout: 300
      NotificationTargetARN:
        Ref: ClusterClusterCapacityLifecycleHookDrainHookTopicBADCD679
      RoleARN:
        Fn::GetAtt:
          - ClusterClusterCapacityLifecycleHookDrainHookRoleCFC0E992
          - Arn
    DependsOn:
      - ClusterClusterCapacityLifecycleHookDrainHookRoleDefaultPolicyB94B5462
      - ClusterClusterCapacityLifecycleHookDrainHookRoleCFC0E992
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/Cluster/ClusterCapacity/LifecycleHookDrainHook/Resource
  GatewayTaskDefinitionTaskRole9573DBE8:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AWSAppMeshEnvoyAccess
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/GatewayTaskDefinition/TaskRole/Resource
  GatewayTaskDefinitionTaskRoleDefaultPolicy067182AC:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: acm:ExportCertificate
            Effect: Allow
            Resource:
              Ref: GatewayCertificate
          - Action: acm-pca:GetCertificateAuthorityCertificate
            Effect: Allow
            Resource: arn:aws:acm-pca:us-west-2:123456789012:certificate-authority/17c11925-da43-4c9d-a2bd-0b9c7828a9cd
        Version: "2012-10-17"
      PolicyName: GatewayTaskDefinitionTaskRoleDefaultPolicy067182AC
      Roles:
        - Ref: GatewayTaskDefinitionTaskRole9573DBE8
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/GatewayTaskDefinition/TaskRole/DefaultPolicy/Resource
  GatewayTaskDefinition46AB4B70:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Cpu: 1024
          Environment:
            - Name: AWS_REGION
              Value:
                Ref: AWS::Region
            - Name: APPMESH_VIRTUAL_NODE_NAME
              Value:
                Fn::Join:
                  - ""
                  - - mesh/
                    - Fn::GetAtt:
                        - Mesh73A573F6
                        - MeshName
                    - /virtualGateway/
                    - Fn::GetAtt:
                        - Gateway
                        - VirtualGatewayName
          Essential: true
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -s http://localhost:9901/server_info | grep state | grep -q LIVE
            Interval: 5
            Retries: 3
            StartPeriod: 10
            Timeout: 2
          Image:
            Fn::Join:
              - ""
              - - 840364872350.dkr.ecr.
                - Ref: AWS::Region
                - .amazonaws.com/aws-appmesh-envoy:v1.15.0.0-prod
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: GatewayTaskDefinitionenvoyLogGroup135B4A5A
              awslogs-stream-prefix: envoy
              awslogs-region:
                Ref: AWS::Region
          MemoryReservation: 1024
          Name: envoy
          PortMappings:
            - ContainerPort: 8443
              Protocol: tcp
          User: "1337"
      ExecutionRoleArn:
        Fn::GetAtt:
          - GatewayTaskDefinitionExecutionRole2F5044C7
          - Arn
      Family: AppMeshTlsGatewayDemoStackGatewayTaskDefinitionE8862462
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - EC2
      TaskRoleArn:
        Fn::GetAtt:
          - GatewayTaskDefinitionTaskRole9573DBE8
          - Arn
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/GatewayTaskDefinition/Resource
  GatewayTaskDefinitionenvoyLogGroup135B4A5A:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/GatewayTaskDefinition/envoy/LogGroup/Resource
  GatewayTaskDefinitionExecutionRole2F5044C7:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/GatewayTaskDefinition/ExecutionRole/Resource
  GatewayTaskDefinitionExecutionRoleDefaultPolicy5A886673:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - GatewayTaskDefinitionenvoyLogGroup135B4A5A
                - Arn
        Version: "2012-10-17"
      PolicyName: GatewayTaskDefinitionExecutionRoleDefaultPolicy5A886673
      Roles:
        - Ref: GatewayTaskDefinitionExecutionRole2F5044C7
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/GatewayTaskDefinition/ExecutionRole/DefaultPolicy/Resource
  GatewayService20F4B805:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: ClusterEB0386A7
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 2
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: EC2
      LoadBalancers:
        - ContainerName: envoy
          ContainerPort: 8443
          TargetGroupArn:
            Ref: LoadBalancerdefaultdefaultGroup19E8622E
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::GetAtt:
                - GatewayServiceSecurityGroup1D6D3403
                - GroupId
          Subnets:
            - Ref: VpcPrivateSubnet1Subnet536B997A
            - Ref: VpcPrivateSubnet2Subnet3788AAA1
      PlacementConstraints:
        - Type: distinctInstance
      SchedulingStrategy: REPLICA
      TaskDefinition:
        Ref: GatewayTaskDefinition46AB4B70
    DependsOn:
      - LoadBalancerdefaultdefaultGroup19E8622E
      - LoadBalancerdefault3E0454DE
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/GatewayService/Service
  GatewayServiceSecurityGroup1D6D3403:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: AppMeshTlsGatewayDemoStack/GatewayService/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/GatewayService/SecurityGroup/Resource
  GatewayServiceSecurityGroupfromAppMeshTlsGatewayDemoStackBastionInstanceSecurityGroup39D6BD67ALLTRAFFICD1DC2EE6:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: "-1"
      Description: from AppMeshTlsGatewayDemoStackBastionInstanceSecurityGroup39D6BD67:ALL TRAFFIC
      GroupId:
        Fn::GetAtt:
          - GatewayServiceSecurityGroup1D6D3403
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - BastionInstanceSecurityGroup71C3847E
          - GroupId
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/GatewayService/SecurityGroup/from AppMeshTlsGatewayDemoStackBastionInstanceSecurityGroup39D6BD67:ALL TRAFFIC
  GatewayServiceSecurityGroupfromAppMeshTlsGatewayDemoStackLoadBalancerSecurityGroupF22167BB8443DB103657:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort: 8443
      GroupId:
        Fn::GetAtt:
          - GatewayServiceSecurityGroup1D6D3403
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - LoadBalancerSecurityGroupA28D6DD7
          - GroupId
      ToPort: 8443
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/GatewayService/SecurityGroup/from AppMeshTlsGatewayDemoStackLoadBalancerSecurityGroupF22167BB:8443
  WebServiceTaskTaskRole76CA5AB6:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AWSAppMeshEnvoyAccess
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/WebServiceTask/TaskRole/Resource
  WebServiceTaskTaskRoleDefaultPolicy04115EC1:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: acm:ExportCertificate
            Effect: Allow
            Resource:
              Ref: ServiceCertificate
        Version: "2012-10-17"
      PolicyName: WebServiceTaskTaskRoleDefaultPolicy04115EC1
      Roles:
        - Ref: WebServiceTaskTaskRole76CA5AB6
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/WebServiceTask/TaskRole/DefaultPolicy/Resource
  WebServiceTask2D689FC0:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Cpu: 256
          DependsOn:
            - Condition: HEALTHY
              ContainerName: envoy
          Essential: true
          Image: nginx:stable
          MemoryReservation: 256
          Name: app
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
        - Cpu: 1024
          Environment:
            - Name: AWS_REGION
              Value:
                Ref: AWS::Region
            - Name: APPMESH_VIRTUAL_NODE_NAME
              Value:
                Fn::Join:
                  - ""
                  - - mesh/
                    - Fn::GetAtt:
                        - Mesh73A573F6
                        - MeshName
                    - /virtualNode/
                    - Fn::GetAtt:
                        - WebAppNode13D0C479
                        - VirtualNodeName
          Essential: true
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -s http://localhost:9901/server_info | grep state | grep -q LIVE
            Interval: 5
            Retries: 3
            StartPeriod: 10
            Timeout: 2
          Image:
            Fn::Join:
              - ""
              - - 840364872350.dkr.ecr.
                - Ref: AWS::Region
                - .amazonaws.com/aws-appmesh-envoy:v1.15.0.0-prod
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: WebServiceTaskenvoyLogGroupEFECCC8F
              awslogs-stream-prefix: envoy
              awslogs-region:
                Ref: AWS::Region
          MemoryReservation: 1024
          Name: envoy
          User: "1337"
      ExecutionRoleArn:
        Fn::GetAtt:
          - WebServiceTaskExecutionRole9CB15E69
          - Arn
      Family: AppMeshTlsGatewayDemoStackWebServiceTaskB2C30725
      NetworkMode: awsvpc
      ProxyConfiguration:
        ContainerName: envoy
        ProxyConfigurationProperties:
          - Name: AppPorts
            Value: "80"
          - Name: ProxyEgressPort
            Value: "15001"
          - Name: ProxyIngressPort
            Value: "15000"
          - Name: IgnoredUID
            Value: "1337"
          - Name: EgressIgnoredIPs
            Value: 169.254.170.2,169.254.169.254
        Type: APPMESH
      RequiresCompatibilities:
        - EC2
      TaskRoleArn:
        Fn::GetAtt:
          - WebServiceTaskTaskRole76CA5AB6
          - Arn
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/WebServiceTask/Resource
  WebServiceTaskenvoyLogGroupEFECCC8F:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/WebServiceTask/envoy/LogGroup/Resource
  WebServiceTaskExecutionRole9CB15E69:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/WebServiceTask/ExecutionRole/Resource
  WebServiceTaskExecutionRoleDefaultPolicyA978BDF2:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - WebServiceTaskenvoyLogGroupEFECCC8F
                - Arn
        Version: "2012-10-17"
      PolicyName: WebServiceTaskExecutionRoleDefaultPolicyA978BDF2
      Roles:
        - Ref: WebServiceTaskExecutionRole9CB15E69
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/WebServiceTask/ExecutionRole/DefaultPolicy/Resource
  WebService7F8A1763:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: ClusterEB0386A7
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 2
      EnableECSManagedTags: false
      LaunchType: EC2
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::GetAtt:
                - WebServiceSecurityGroupE736A6BB
                - GroupId
          Subnets:
            - Ref: VpcPrivateSubnet1Subnet536B997A
            - Ref: VpcPrivateSubnet2Subnet3788AAA1
      SchedulingStrategy: REPLICA
      ServiceRegistries:
        - RegistryArn:
            Fn::GetAtt:
              - AppServiceE9A897BA
              - Arn
      TaskDefinition:
        Ref: WebServiceTask2D689FC0
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/WebService/Service
  WebServiceSecurityGroupE736A6BB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: AppMeshTlsGatewayDemoStack/WebService/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/WebService/SecurityGroup/Resource
  WebServiceSecurityGroupfromAppMeshTlsGatewayDemoStackGatewayServiceSecurityGroupE999B3AC80B7C70727:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: from AppMeshTlsGatewayDemoStackGatewayServiceSecurityGroupE999B3AC:80
      FromPort: 80
      GroupId:
        Fn::GetAtt:
          - WebServiceSecurityGroupE736A6BB
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - GatewayServiceSecurityGroup1D6D3403
          - GroupId
      ToPort: 80
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/WebService/SecurityGroup/from AppMeshTlsGatewayDemoStackGatewayServiceSecurityGroupE999B3AC:80
  WebServiceSecurityGroupfromAppMeshTlsGatewayDemoStackBastionInstanceSecurityGroup39D6BD67808D3AECF5:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: from AppMeshTlsGatewayDemoStackBastionInstanceSecurityGroup39D6BD67:80
      FromPort: 80
      GroupId:
        Fn::GetAtt:
          - WebServiceSecurityGroupE736A6BB
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - BastionInstanceSecurityGroup71C3847E
          - GroupId
      ToPort: 80
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/WebService/SecurityGroup/from AppMeshTlsGatewayDemoStackBastionInstanceSecurityGroup39D6BD67:80
  AlbCertificate2652E3A6:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: appmeshtlsdemo.example.com
      DomainValidationOptions:
        - DomainName: appmeshtlsdemo.example.com
          ValidationDomain: example.com
      ValidationMethod: EMAIL
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/AlbCertificate/Resource
  LoadBalancerBE9EEC3A:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - Fn::GetAtt:
            - LoadBalancerSecurityGroupA28D6DD7
            - GroupId
      Subnets:
        - Ref: VpcPublicSubnet1Subnet5C2D37C4
        - Ref: VpcPublicSubnet2Subnet691E08A3
      Type: application
    DependsOn:
      - VpcPublicSubnet1DefaultRoute3DA9E72A
      - VpcPublicSubnet2DefaultRoute97F91067
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/LoadBalancer/Resource
  LoadBalancerSecurityGroupA28D6DD7:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatically created Security Group for ELB AppMeshTlsGatewayDemoStackLoadBalancer5EE32486
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/LoadBalancer/SecurityGroup/Resource
  LoadBalancerSecurityGrouptoAppMeshTlsGatewayDemoStackGatewayServiceSecurityGroupE999B3AC84437A836D29:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId:
        Fn::GetAtt:
          - LoadBalancerSecurityGroupA28D6DD7
          - GroupId
      IpProtocol: tcp
      Description: Load balancer to target
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - GatewayServiceSecurityGroup1D6D3403
          - GroupId
      FromPort: 8443
      ToPort: 8443
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/LoadBalancer/SecurityGroup/to AppMeshTlsGatewayDemoStackGatewayServiceSecurityGroupE999B3AC:8443
  LoadBalancerdefault3E0454DE:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: LoadBalancerdefaultdefaultGroup19E8622E
          Type: forward
      LoadBalancerArn:
        Ref: LoadBalancerBE9EEC3A
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn:
            Ref: AlbCertificate2652E3A6
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/LoadBalancer/default/Resource
  LoadBalancerdefaultdefaultGroup19E8622E:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 443
      Protocol: HTTPS
      TargetType: ip
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: AppMeshTlsGatewayDemoStack/LoadBalancer/default/defaultGroup/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Modules: aws-cdk=2.113.0,@aws-cdk/assets=1.61.1,@aws-cdk/aws-applicationautoscaling=1.61.1,@aws-cdk/aws-appmesh=1.61.1,@aws-cdk/aws-autoscaling=1.61.1,@aws-cdk/aws-autoscaling-common=1.61.1,@aws-cdk/aws-autoscaling-hooktargets=1.61.1,@aws-cdk/aws-certificatemanager=1.61.1,@aws-cdk/aws-cloudwatch=1.61.1,@aws-cdk/aws-codeguruprofiler=1.61.1,@aws-cdk/aws-ec2=1.61.1,@aws-cdk/aws-ecr=1.61.1,@aws-cdk/aws-ecr-assets=1.61.1,@aws-cdk/aws-ecs=1.61.1,@aws-cdk/aws-elasticloadbalancingv2=1.61.1,@aws-cdk/aws-events=1.61.1,@aws-cdk/aws-iam=1.61.1,@aws-cdk/aws-kms=1.61.1,@aws-cdk/aws-lambda=1.61.1,@aws-cdk/aws-logs=1.61.1,@aws-cdk/aws-s3=1.61.1,@aws-cdk/aws-s3-assets=1.61.1,@aws-cdk/aws-servicediscovery=1.61.1,@aws-cdk/aws-sns=1.61.1,@aws-cdk/aws-sns-subscriptions=1.61.1,@aws-cdk/aws-sqs=1.61.1,@aws-cdk/aws-ssm=1.61.1,@aws-cdk/cloud-assembly-schema=1.61.1,@aws-cdk/core=1.61.1,@aws-cdk/custom-resources=1.61.1,@aws-cdk/cx-api=1.61.1,@aws-cdk/region-info=1.61.1,jsii-runtime=node.js/v18.12.1
    Condition: CDKMetadataAvailable
Outputs:
  BastionBastionHostId8F8CEB82:
    Description: Instance ID of the bastion host. Use this to connect via SSM Session Manager
    Value:
      Ref: Bastion6045F255
  LoadBalancerHostname:
    Value:
      Fn::GetAtt:
        - LoadBalancerBE9EEC3A
        - DNSName
Parameters:
  SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - il-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - me-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2

