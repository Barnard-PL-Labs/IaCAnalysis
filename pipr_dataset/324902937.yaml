Resources:
  MinecraftServerVpc6EF7A8ED:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: CdkMinecraftStack/MinecraftServer/Vpc
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/Vpc/Resource
  MinecraftServerVpcPublicSubnet1Subnet25663EE9:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/18
      VpcId:
        Ref: MinecraftServerVpc6EF7A8ED
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: CdkMinecraftStack/MinecraftServer/Vpc/PublicSubnet1
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/Vpc/PublicSubnet1/Subnet
  MinecraftServerVpcPublicSubnet1RouteTable6FC563A3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MinecraftServerVpc6EF7A8ED
      Tags:
        - Key: Name
          Value: CdkMinecraftStack/MinecraftServer/Vpc/PublicSubnet1
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/Vpc/PublicSubnet1/RouteTable
  MinecraftServerVpcPublicSubnet1RouteTableAssociation42D312B2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MinecraftServerVpcPublicSubnet1RouteTable6FC563A3
      SubnetId:
        Ref: MinecraftServerVpcPublicSubnet1Subnet25663EE9
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/Vpc/PublicSubnet1/RouteTableAssociation
  MinecraftServerVpcPublicSubnet1DefaultRouteC66ABD35:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MinecraftServerVpcPublicSubnet1RouteTable6FC563A3
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: MinecraftServerVpcIGW66DCEFF8
    DependsOn:
      - MinecraftServerVpcVPCGW7FF6787E
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/Vpc/PublicSubnet1/DefaultRoute
  MinecraftServerVpcPublicSubnet2SubnetC105441D:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.64.0/18
      VpcId:
        Ref: MinecraftServerVpc6EF7A8ED
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: CdkMinecraftStack/MinecraftServer/Vpc/PublicSubnet2
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/Vpc/PublicSubnet2/Subnet
  MinecraftServerVpcPublicSubnet2RouteTable438651EF:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MinecraftServerVpc6EF7A8ED
      Tags:
        - Key: Name
          Value: CdkMinecraftStack/MinecraftServer/Vpc/PublicSubnet2
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/Vpc/PublicSubnet2/RouteTable
  MinecraftServerVpcPublicSubnet2RouteTableAssociationC596F0F2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MinecraftServerVpcPublicSubnet2RouteTable438651EF
      SubnetId:
        Ref: MinecraftServerVpcPublicSubnet2SubnetC105441D
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/Vpc/PublicSubnet2/RouteTableAssociation
  MinecraftServerVpcPublicSubnet2DefaultRoute6040EC0B:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MinecraftServerVpcPublicSubnet2RouteTable438651EF
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: MinecraftServerVpcIGW66DCEFF8
    DependsOn:
      - MinecraftServerVpcVPCGW7FF6787E
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/Vpc/PublicSubnet2/DefaultRoute
  MinecraftServerVpcIsolatedSubnet1Subnet3BCA62DB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.128.0/18
      VpcId:
        Ref: MinecraftServerVpc6EF7A8ED
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Isolated
        - Key: aws-cdk:subnet-type
          Value: Isolated
        - Key: Name
          Value: CdkMinecraftStack/MinecraftServer/Vpc/IsolatedSubnet1
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/Vpc/IsolatedSubnet1/Subnet
  MinecraftServerVpcIsolatedSubnet1RouteTable3624585D:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MinecraftServerVpc6EF7A8ED
      Tags:
        - Key: Name
          Value: CdkMinecraftStack/MinecraftServer/Vpc/IsolatedSubnet1
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/Vpc/IsolatedSubnet1/RouteTable
  MinecraftServerVpcIsolatedSubnet1RouteTableAssociation53535F8B:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MinecraftServerVpcIsolatedSubnet1RouteTable3624585D
      SubnetId:
        Ref: MinecraftServerVpcIsolatedSubnet1Subnet3BCA62DB
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/Vpc/IsolatedSubnet1/RouteTableAssociation
  MinecraftServerVpcIsolatedSubnet2Subnet0E550AE6:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.192.0/18
      VpcId:
        Ref: MinecraftServerVpc6EF7A8ED
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Isolated
        - Key: aws-cdk:subnet-type
          Value: Isolated
        - Key: Name
          Value: CdkMinecraftStack/MinecraftServer/Vpc/IsolatedSubnet2
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/Vpc/IsolatedSubnet2/Subnet
  MinecraftServerVpcIsolatedSubnet2RouteTable8F7ABDB0:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MinecraftServerVpc6EF7A8ED
      Tags:
        - Key: Name
          Value: CdkMinecraftStack/MinecraftServer/Vpc/IsolatedSubnet2
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/Vpc/IsolatedSubnet2/RouteTable
  MinecraftServerVpcIsolatedSubnet2RouteTableAssociation733DF5F4:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MinecraftServerVpcIsolatedSubnet2RouteTable8F7ABDB0
      SubnetId:
        Ref: MinecraftServerVpcIsolatedSubnet2Subnet0E550AE6
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/Vpc/IsolatedSubnet2/RouteTableAssociation
  MinecraftServerVpcIGW66DCEFF8:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: CdkMinecraftStack/MinecraftServer/Vpc
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/Vpc/IGW
  MinecraftServerVpcVPCGW7FF6787E:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: MinecraftServerVpc6EF7A8ED
      InternetGatewayId:
        Ref: MinecraftServerVpcIGW66DCEFF8
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/Vpc/VPCGW
  MinecraftServerEcsClusterA6A9F121:
    Type: AWS::ECS::Cluster
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/EcsCluster/Resource
  MinecraftServerEcsClusterMinecraftServerInstanceSecurityGroup1A4EB195:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: CdkMinecraftStack/MinecraftServer/EcsCluster/MinecraftServer/InstanceSecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: from 0.0.0.0/0:25565
          FromPort: 25565
          IpProtocol: tcp
          ToPort: 25565
      Tags:
        - Key: Name
          Value: CdkMinecraftStack/MinecraftServer/EcsCluster/MinecraftServer
      VpcId:
        Ref: MinecraftServerVpc6EF7A8ED
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/EcsCluster/MinecraftServer/InstanceSecurityGroup/Resource
  MinecraftServerEcsClusterMinecraftServerInstanceRoleAE138038:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - ec2.
                    - Ref: AWS::URLSuffix
        Version: "2012-10-17"
      Tags:
        - Key: Name
          Value: CdkMinecraftStack/MinecraftServer/EcsCluster/MinecraftServer
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/EcsCluster/MinecraftServer/InstanceRole/Resource
  MinecraftServerEcsClusterMinecraftServerInstanceRoleDefaultPolicy099C30EA:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecs:DeregisterContainerInstance
              - ecs:RegisterContainerInstance
              - ecs:Submit*
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - MinecraftServerEcsClusterA6A9F121
                - Arn
          - Action:
              - ecs:Poll
              - ecs:StartTelemetrySession
            Condition:
              ArnEquals:
                ecs:cluster:
                  Fn::GetAtt:
                    - MinecraftServerEcsClusterA6A9F121
                    - Arn
            Effect: Allow
            Resource: "*"
          - Action:
              - ecs:DiscoverPollEndpoint
              - ecr:GetAuthorizationToken
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: MinecraftServerEcsClusterMinecraftServerInstanceRoleDefaultPolicy099C30EA
      Roles:
        - Ref: MinecraftServerEcsClusterMinecraftServerInstanceRoleAE138038
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/EcsCluster/MinecraftServer/InstanceRole/DefaultPolicy/Resource
  MinecraftServerEcsClusterMinecraftServerInstanceProfile09E9E03E:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: MinecraftServerEcsClusterMinecraftServerInstanceRoleAE138038
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/EcsCluster/MinecraftServer/InstanceProfile
  MinecraftServerEcsClusterMinecraftServerLaunchConfigD5F60D59:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        Ref: SsmParameterValueawsserviceecsoptimizedamiamazonlinux2arm64recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter
      InstanceType: t4g.medium
      IamInstanceProfile:
        Ref: MinecraftServerEcsClusterMinecraftServerInstanceProfile09E9E03E
      SecurityGroups:
        - Fn::GetAtt:
            - MinecraftServerEcsClusterMinecraftServerInstanceSecurityGroup1A4EB195
            - GroupId
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - |-
                #!/bin/bash
                echo ECS_CLUSTER=
              - Ref: MinecraftServerEcsClusterA6A9F121
              - |-2
                 >> /etc/ecs/ecs.config
                sudo iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP
                sudo service iptables save
                echo ECS_AWSVPC_BLOCK_IMDS=true >> /etc/ecs/ecs.config
    DependsOn:
      - MinecraftServerEcsClusterMinecraftServerInstanceRoleDefaultPolicy099C30EA
      - MinecraftServerEcsClusterMinecraftServerInstanceRoleAE138038
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/EcsCluster/MinecraftServer/LaunchConfig
  MinecraftServerEcsClusterMinecraftServerASG91033F96:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MaxSize: "1"
      MinSize: "1"
      LaunchConfigurationName:
        Ref: MinecraftServerEcsClusterMinecraftServerLaunchConfigD5F60D59
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: CdkMinecraftStack/MinecraftServer/EcsCluster/MinecraftServer
      VPCZoneIdentifier:
        - Ref: MinecraftServerVpcPublicSubnet1Subnet25663EE9
        - Ref: MinecraftServerVpcPublicSubnet2SubnetC105441D
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: true
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/EcsCluster/MinecraftServer/ASG
  MinecraftServerEcsClusterMinecraftServerDrainECSHookFunctionServiceRole5D2675C6:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Name
          Value: CdkMinecraftStack/MinecraftServer/EcsCluster/MinecraftServer
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/EcsCluster/MinecraftServer/DrainECSHook/Function/ServiceRole/Resource
  MinecraftServerEcsClusterMinecraftServerDrainECSHookFunctionServiceRoleDefaultPolicyBACDB5F0:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ec2:DescribeInstances
              - ec2:DescribeInstanceAttribute
              - ec2:DescribeInstanceStatus
              - ec2:DescribeHosts
            Effect: Allow
            Resource: "*"
          - Action: autoscaling:CompleteLifecycleAction
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":autoscaling:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :autoScalingGroup:*:autoScalingGroupName/
                  - Ref: MinecraftServerEcsClusterMinecraftServerASG91033F96
          - Action:
              - ecs:DescribeContainerInstances
              - ecs:DescribeTasks
            Condition:
              ArnEquals:
                ecs:cluster:
                  Fn::GetAtt:
                    - MinecraftServerEcsClusterA6A9F121
                    - Arn
            Effect: Allow
            Resource: "*"
          - Action:
              - ecs:ListContainerInstances
              - ecs:SubmitContainerStateChange
              - ecs:SubmitTaskStateChange
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - MinecraftServerEcsClusterA6A9F121
                - Arn
          - Action:
              - ecs:UpdateContainerInstancesState
              - ecs:ListTasks
            Condition:
              ArnEquals:
                ecs:cluster:
                  Fn::GetAtt:
                    - MinecraftServerEcsClusterA6A9F121
                    - Arn
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: MinecraftServerEcsClusterMinecraftServerDrainECSHookFunctionServiceRoleDefaultPolicyBACDB5F0
      Roles:
        - Ref: MinecraftServerEcsClusterMinecraftServerDrainECSHookFunctionServiceRole5D2675C6
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/EcsCluster/MinecraftServer/DrainECSHook/Function/ServiceRole/DefaultPolicy/Resource
  MinecraftServerEcsClusterMinecraftServerDrainECSHookFunction7E911E09:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3, json, os, time

          ecs = boto3.client('ecs')
          autoscaling = boto3.client('autoscaling')


          def lambda_handler(event, context):
            print(json.dumps(event))
            cluster = os.environ['CLUSTER']
            snsTopicArn = event['Records'][0]['Sns']['TopicArn']
            lifecycle_event = json.loads(event['Records'][0]['Sns']['Message'])
            instance_id = lifecycle_event.get('EC2InstanceId')
            if not instance_id:
              print('Got event without EC2InstanceId: %s', json.dumps(event))
              return

            instance_arn = container_instance_arn(cluster, instance_id)
            print('Instance %s has container instance ARN %s' % (lifecycle_event['EC2InstanceId'], instance_arn))

            if not instance_arn:
              return

            while has_tasks(cluster, instance_arn):
              time.sleep(10)

            try:
              print('Terminating instance %s' % instance_id)
              autoscaling.complete_lifecycle_action(
                  LifecycleActionResult='CONTINUE',
                  **pick(lifecycle_event, 'LifecycleHookName', 'LifecycleActionToken', 'AutoScalingGroupName'))
            except Exception as e:
              # Lifecycle action may have already completed.
              print(str(e))


          def container_instance_arn(cluster, instance_id):
            """Turn an instance ID into a container instance ARN."""
            arns = ecs.list_container_instances(cluster=cluster, filter='ec2InstanceId==' + instance_id)['containerInstanceArns']
            if not arns:
              return None
            return arns[0]


          def has_tasks(cluster, instance_arn):
            """Return True if the instance is running tasks for the given cluster."""
            instances = ecs.describe_container_instances(cluster=cluster, containerInstances=[instance_arn])['containerInstances']
            if not instances:
              return False
            instance = instances[0]

            if instance['status'] == 'ACTIVE':
              # Start draining, then try again later
              set_container_instance_to_draining(cluster, instance_arn)
              return True

            tasks = instance['runningTasksCount'] + instance['pendingTasksCount']
            print('Instance %s has %s tasks' % (instance_arn, tasks))

            return tasks > 0


          def set_container_instance_to_draining(cluster, instance_arn):
            ecs.update_container_instances_state(
                cluster=cluster,
                containerInstances=[instance_arn], status='DRAINING')


          def pick(dct, *keys):
            """Pick a subset of a dict."""
            return {k: v for k, v in dct.items() if k in keys}
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
          - MinecraftServerEcsClusterMinecraftServerDrainECSHookFunctionServiceRole5D2675C6
          - Arn
      Runtime: python3.6
      Environment:
        Variables:
          CLUSTER:
            Ref: MinecraftServerEcsClusterA6A9F121
      Tags:
        - Key: Name
          Value: CdkMinecraftStack/MinecraftServer/EcsCluster/MinecraftServer
      Timeout: 310
    DependsOn:
      - MinecraftServerEcsClusterMinecraftServerDrainECSHookFunctionServiceRoleDefaultPolicyBACDB5F0
      - MinecraftServerEcsClusterMinecraftServerDrainECSHookFunctionServiceRole5D2675C6
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/EcsCluster/MinecraftServer/DrainECSHook/Function/Resource
  MinecraftServerEcsClusterMinecraftServerDrainECSHookFunctionAllowInvokeCdkMinecraftStackMinecraftServerEcsClusterMinecraftServerLifecycleHookDrainHookTopic5C6AE6C69FCDED68:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - MinecraftServerEcsClusterMinecraftServerDrainECSHookFunction7E911E09
          - Arn
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: MinecraftServerEcsClusterMinecraftServerLifecycleHookDrainHookTopic24A723D3
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/EcsCluster/MinecraftServer/DrainECSHook/Function/AllowInvoke:CdkMinecraftStackMinecraftServerEcsClusterMinecraftServerLifecycleHookDrainHookTopic5C6AE6C6
  MinecraftServerEcsClusterMinecraftServerDrainECSHookFunctionTopic3BBED0F4:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      TopicArn:
        Ref: MinecraftServerEcsClusterMinecraftServerLifecycleHookDrainHookTopic24A723D3
      Endpoint:
        Fn::GetAtt:
          - MinecraftServerEcsClusterMinecraftServerDrainECSHookFunction7E911E09
          - Arn
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/EcsCluster/MinecraftServer/DrainECSHook/Function/Topic/Resource
  MinecraftServerEcsClusterMinecraftServerLifecycleHookDrainHookRole56BEF129:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: autoscaling.amazonaws.com
        Version: "2012-10-17"
      Tags:
        - Key: Name
          Value: CdkMinecraftStack/MinecraftServer/EcsCluster/MinecraftServer
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/EcsCluster/MinecraftServer/LifecycleHookDrainHook/Role/Resource
  MinecraftServerEcsClusterMinecraftServerLifecycleHookDrainHookRoleDefaultPolicy2FFC1D4E:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: sns:Publish
            Effect: Allow
            Resource:
              Ref: MinecraftServerEcsClusterMinecraftServerLifecycleHookDrainHookTopic24A723D3
        Version: "2012-10-17"
      PolicyName: MinecraftServerEcsClusterMinecraftServerLifecycleHookDrainHookRoleDefaultPolicy2FFC1D4E
      Roles:
        - Ref: MinecraftServerEcsClusterMinecraftServerLifecycleHookDrainHookRole56BEF129
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/EcsCluster/MinecraftServer/LifecycleHookDrainHook/Role/DefaultPolicy/Resource
  MinecraftServerEcsClusterMinecraftServerLifecycleHookDrainHookTopic24A723D3:
    Type: AWS::SNS::Topic
    Properties:
      Tags:
        - Key: Name
          Value: CdkMinecraftStack/MinecraftServer/EcsCluster/MinecraftServer
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/EcsCluster/MinecraftServer/LifecycleHookDrainHook/Topic/Resource
  MinecraftServerEcsClusterMinecraftServerLifecycleHookDrainHookFE0CD76D:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName:
        Ref: MinecraftServerEcsClusterMinecraftServerASG91033F96
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
      DefaultResult: CONTINUE
      HeartbeatTimeout: 300
      NotificationTargetARN:
        Ref: MinecraftServerEcsClusterMinecraftServerLifecycleHookDrainHookTopic24A723D3
      RoleARN:
        Fn::GetAtt:
          - MinecraftServerEcsClusterMinecraftServerLifecycleHookDrainHookRole56BEF129
          - Arn
    DependsOn:
      - MinecraftServerEcsClusterMinecraftServerLifecycleHookDrainHookRoleDefaultPolicy2FFC1D4E
      - MinecraftServerEcsClusterMinecraftServerLifecycleHookDrainHookRole56BEF129
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/EcsCluster/MinecraftServer/LifecycleHookDrainHook/Resource
  MinecraftServerServerFilesE9F98114:
    Type: AWS::EFS::FileSystem
    Properties:
      BackupPolicy:
        Status: ENABLED
      Encrypted: true
      FileSystemTags:
        - Key: Name
          Value: CdkMinecraftStack/MinecraftServer/ServerFiles
      LifecyclePolicies:
        - TransitionToIA: AFTER_7_DAYS
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/ServerFiles/Resource
  MinecraftServerServerFilesEfsSecurityGroupDEC004A9:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: CdkMinecraftStack/MinecraftServer/ServerFiles/EfsSecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: CdkMinecraftStack/MinecraftServer/ServerFiles
      VpcId:
        Ref: MinecraftServerVpc6EF7A8ED
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/ServerFiles/EfsSecurityGroup/Resource
  MinecraftServerServerFilesEfsSecurityGroupfromCdkMinecraftStackMinecraftServerEcsClusterMinecraftServerInstanceSecurityGroup9F67F2F42049F149CA96:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: from CdkMinecraftStackMinecraftServerEcsClusterMinecraftServerInstanceSecurityGroup9F67F2F4:2049
      FromPort: 2049
      GroupId:
        Fn::GetAtt:
          - MinecraftServerServerFilesEfsSecurityGroupDEC004A9
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - MinecraftServerEcsClusterMinecraftServerInstanceSecurityGroup1A4EB195
          - GroupId
      ToPort: 2049
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/ServerFiles/EfsSecurityGroup/from CdkMinecraftStackMinecraftServerEcsClusterMinecraftServerInstanceSecurityGroup9F67F2F4:2049
  MinecraftServerServerFilesEfsMountTarget111DF37A6:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: MinecraftServerServerFilesE9F98114
      SecurityGroups:
        - Fn::GetAtt:
            - MinecraftServerServerFilesEfsSecurityGroupDEC004A9
            - GroupId
      SubnetId:
        Ref: MinecraftServerVpcIsolatedSubnet1Subnet3BCA62DB
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/ServerFiles/EfsMountTarget1
  MinecraftServerServerFilesEfsMountTarget238755C90:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: MinecraftServerServerFilesE9F98114
      SecurityGroups:
        - Fn::GetAtt:
            - MinecraftServerServerFilesEfsSecurityGroupDEC004A9
            - GroupId
      SubnetId:
        Ref: MinecraftServerVpcIsolatedSubnet2Subnet0E550AE6
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/ServerFiles/EfsMountTarget2
  MinecraftServerEc2TaskTaskRole3251797A:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/Ec2Task/TaskRole/Resource
  MinecraftServerEc2Task04D54B37:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Environment:
            - Name: EULA
              Value: "true"
          Essential: true
          Image: itzg/minecraft-server:multiarch
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: MinecraftServerEc2TaskMinecraftServerLogGroupFE492123
              awslogs-stream-prefix: Minecraft
              awslogs-region:
                Ref: AWS::Region
          MemoryReservation: 1024
          MountPoints:
            - ContainerPath: /data
              ReadOnly: false
              SourceVolume: ServerFilesEfs
          Name: MinecraftServer
          PortMappings:
            - ContainerPort: 25565
              HostPort: 25565
              Protocol: tcp
      ExecutionRoleArn:
        Fn::GetAtt:
          - MinecraftServerEc2TaskExecutionRole90A72522
          - Arn
      Family: CdkMinecraftStackMinecraftServerEc2TaskBFB10170
      NetworkMode: bridge
      RequiresCompatibilities:
        - EC2
      TaskRoleArn:
        Fn::GetAtt:
          - MinecraftServerEc2TaskTaskRole3251797A
          - Arn
      Volumes:
        - Name: ServerFilesEfs
          EfsVolumeConfiguration:
            FileSystemId:
              Ref: MinecraftServerServerFilesE9F98114
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/Ec2Task/Resource
  MinecraftServerEc2TaskMinecraftServerLogGroupFE492123:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/Ec2Task/MinecraftServer/LogGroup/Resource
  MinecraftServerEc2TaskExecutionRole90A72522:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/Ec2Task/ExecutionRole/Resource
  MinecraftServerEc2TaskExecutionRoleDefaultPolicy20DF327D:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - MinecraftServerEc2TaskMinecraftServerLogGroupFE492123
                - Arn
        Version: "2012-10-17"
      PolicyName: MinecraftServerEc2TaskExecutionRoleDefaultPolicy20DF327D
      Roles:
        - Ref: MinecraftServerEc2TaskExecutionRole90A72522
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/Ec2Task/ExecutionRole/DefaultPolicy/Resource
  MinecraftServerEc2ServiceF6F2B72E:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: MinecraftServerEcsClusterA6A9F121
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 1
      EnableECSManagedTags: false
      LaunchType: EC2
      SchedulingStrategy: REPLICA
      TaskDefinition:
        Ref: MinecraftServerEc2Task04D54B37
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/Ec2Service/Service
  MinecraftServerDnsUpdateServiceRole8C90A2D0:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/DnsUpdate/ServiceRole/Resource
  MinecraftServerDnsUpdateServiceRoleDefaultPolicy9007A7DE:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: route53:*
            Effect: Allow
            Resource: "*"
          - Action: ec2:DescribeInstance*
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: MinecraftServerDnsUpdateServiceRoleDefaultPolicy9007A7DE
      Roles:
        - Ref: MinecraftServerDnsUpdateServiceRole8C90A2D0
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/DnsUpdate/ServiceRole/DefaultPolicy/Resource
  MinecraftServerDnsUpdateC24E78F7:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: AssetParameters13d17d9691d0382cc0834a72186d28d08dfc12e5afcbae778ebacf0d4c84f8c7S3Bucket7987D4EB
        S3Key:
          Fn::Join:
            - ""
            - - Fn::Select:
                  - 0
                  - Fn::Split:
                      - "||"
                      - Ref: AssetParameters13d17d9691d0382cc0834a72186d28d08dfc12e5afcbae778ebacf0d4c84f8c7S3VersionKeyF85DF1AD
              - Fn::Select:
                  - 1
                  - Fn::Split:
                      - "||"
                      - Ref: AssetParameters13d17d9691d0382cc0834a72186d28d08dfc12e5afcbae778ebacf0d4c84f8c7S3VersionKeyF85DF1AD
      Handler: dns_update.handler
      Role:
        Fn::GetAtt:
          - MinecraftServerDnsUpdateServiceRole8C90A2D0
          - Arn
      Runtime: python3.7
      Description: Set Route53 record for Minecraft
      Environment:
        Variables:
          HostedZoneId: ""
          RecordName: ""
      MemorySize: 128
      Timeout: 20
    DependsOn:
      - MinecraftServerDnsUpdateServiceRoleDefaultPolicy9007A7DE
      - MinecraftServerDnsUpdateServiceRole8C90A2D0
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/DnsUpdate/Resource
      aws:asset:path: asset.13d17d9691d0382cc0834a72186d28d08dfc12e5afcbae778ebacf0d4c84f8c7
      aws:asset:property: Code
  MinecraftServerEc2InstanceLaunchRule759292C7:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.autoscaling
        detail-type:
          - EC2 Instance Launch Successful
        detail:
          AutoScalingGroupName:
            - Ref: MinecraftServerEcsClusterMinecraftServerASG91033F96
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - MinecraftServerDnsUpdateC24E78F7
              - Arn
          Id: Target0
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/Ec2InstanceLaunchRule/Resource
  MinecraftServerEc2InstanceLaunchRuleAllowEventRuleCdkMinecraftStackMinecraftServerEc2InstanceLaunchRuleE9C496BE3CB9B7E2:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - MinecraftServerDnsUpdateC24E78F7
          - Arn
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - MinecraftServerEc2InstanceLaunchRule759292C7
          - Arn
    Metadata:
      aws:cdk:path: CdkMinecraftStack/MinecraftServer/Ec2InstanceLaunchRule/AllowEventRuleCdkMinecraftStackMinecraftServerEc2InstanceLaunchRuleE9C496BE
  ScaleDown2D6349BF:
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName:
        Ref: MinecraftServerEcsClusterMinecraftServerASG91033F96
      MaxSize: 0
      MinSize: 0
      Recurrence: 0 22 * * *
    Metadata:
      aws:cdk:path: CdkMinecraftStack/ScaleDown/Resource
  ScaleUpAF7DDD3C:
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName:
        Ref: MinecraftServerEcsClusterMinecraftServerASG91033F96
      MaxSize: 1
      MinSize: 1
      Recurrence: 0 15 * * *
    Metadata:
      aws:cdk:path: CdkMinecraftStack/ScaleUp/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Modules: aws-cdk=2.113.0,@aws-cdk/assets=1.81.0,@aws-cdk/aws-applicationautoscaling=1.81.0,@aws-cdk/aws-autoscaling=1.81.0,@aws-cdk/aws-autoscaling-common=1.81.0,@aws-cdk/aws-autoscaling-hooktargets=1.81.0,@aws-cdk/aws-cloudwatch=1.81.0,@aws-cdk/aws-codeguruprofiler=1.81.0,@aws-cdk/aws-ec2=1.81.0,@aws-cdk/aws-ecr=1.81.0,@aws-cdk/aws-ecr-assets=1.81.0,@aws-cdk/aws-ecs=1.81.0,@aws-cdk/aws-efs=1.81.0,@aws-cdk/aws-elasticloadbalancingv2=1.81.0,@aws-cdk/aws-events=1.81.0,@aws-cdk/aws-events-targets=1.81.0,@aws-cdk/aws-iam=1.81.0,@aws-cdk/aws-kms=1.81.0,@aws-cdk/aws-lambda=1.81.0,@aws-cdk/aws-logs=1.81.0,@aws-cdk/aws-s3=1.81.0,@aws-cdk/aws-s3-assets=1.81.0,@aws-cdk/aws-servicediscovery=1.81.0,@aws-cdk/aws-sns=1.81.0,@aws-cdk/aws-sns-subscriptions=1.81.0,@aws-cdk/aws-sqs=1.81.0,@aws-cdk/aws-ssm=1.81.0,@aws-cdk/cloud-assembly-schema=1.81.0,@aws-cdk/core=1.81.0,@aws-cdk/custom-resources=1.81.0,@aws-cdk/cx-api=1.81.0,@aws-cdk/region-info=1.81.0,jsii-runtime=node.js/v18.12.1
    Metadata:
      aws:cdk:path: CdkMinecraftStack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Parameters:
  SsmParameterValueawsserviceecsoptimizedamiamazonlinux2arm64recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/arm64/recommended/image_id
  AssetParameters13d17d9691d0382cc0834a72186d28d08dfc12e5afcbae778ebacf0d4c84f8c7S3Bucket7987D4EB:
    Type: String
    Description: S3 bucket for asset "13d17d9691d0382cc0834a72186d28d08dfc12e5afcbae778ebacf0d4c84f8c7"
  AssetParameters13d17d9691d0382cc0834a72186d28d08dfc12e5afcbae778ebacf0d4c84f8c7S3VersionKeyF85DF1AD:
    Type: String
    Description: S3 key for asset version "13d17d9691d0382cc0834a72186d28d08dfc12e5afcbae778ebacf0d4c84f8c7"
  AssetParameters13d17d9691d0382cc0834a72186d28d08dfc12e5afcbae778ebacf0d4c84f8c7ArtifactHashC102F011:
    Type: String
    Description: Artifact hash for asset "13d17d9691d0382cc0834a72186d28d08dfc12e5afcbae778ebacf0d4c84f8c7"
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2

