Resources:
  FoodLogTableE496A1F1:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: FoodLogTableId
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: FoodLogTableId
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      TableName: FoodLogTable
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: FoodTrackerStack/FoodLogTable/Resource
  FoodLogTableApi9EE11C1C:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: FoodLogTable Service
    Metadata:
      aws:cdk:path: FoodTrackerStack/FoodLogTableApi/Resource
  FoodLogTableApiCloudWatchRole44E1BB8B:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
    Metadata:
      aws:cdk:path: FoodTrackerStack/FoodLogTableApi/CloudWatchRole/Resource
  FoodLogTableApiAccount077970A2:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn:
        Fn::GetAtt:
          - FoodLogTableApiCloudWatchRole44E1BB8B
          - Arn
    DependsOn:
      - FoodLogTableApi9EE11C1C
    Metadata:
      aws:cdk:path: FoodTrackerStack/FoodLogTableApi/Account
  FoodLogTableApiDeploymentE0B2B05Bdaa584609b5b14fc3d01bbded01cbc19:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:
        Ref: FoodLogTableApi9EE11C1C
      Description: Automatically created by the RestApi construct
    DependsOn:
      - FoodLogTableApifoodlogtableidDELETEB671230E
      - FoodLogTableApifoodlogtableidGETCE783A56
      - FoodLogTableApifoodlogtableidOPTIONSF49F38EA
      - FoodLogTableApifoodlogtableidPUT155C56B9
      - FoodLogTableApifoodlogtableid507D834F
      - FoodLogTableApifoodlogtableGET63DF5453
      - FoodLogTableApifoodlogtableOPTIONS13AE5774
      - FoodLogTableApifoodlogtablePOST72B84ED8
      - FoodLogTableApifoodlogtable8161F1C3
      - FoodLogTableApiOPTIONSF9D1E715
    Metadata:
      aws:cdk:path: FoodTrackerStack/FoodLogTableApi/Deployment/Resource
  FoodLogTableApiDeploymentStageprod8CAACB7C:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId:
        Ref: FoodLogTableApi9EE11C1C
      DeploymentId:
        Ref: FoodLogTableApiDeploymentE0B2B05Bdaa584609b5b14fc3d01bbded01cbc19
      StageName: prod
    DependsOn:
      - FoodLogTableApiAccount077970A2
    Metadata:
      aws:cdk:path: FoodTrackerStack/FoodLogTableApi/DeploymentStage.prod/Resource
  FoodLogTableApiOPTIONSF9D1E715:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Fn::GetAtt:
          - FoodLogTableApi9EE11C1C
          - RootResourceId
      RestApiId:
        Ref: FoodLogTableApi9EE11C1C
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,Access-Control-Allow-Origin,requestId'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST,PUT,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          StatusCode: "204"
    Metadata:
      aws:cdk:path: FoodTrackerStack/FoodLogTableApi/Default/OPTIONS/Resource
  FoodLogTableApifoodlogtable8161F1C3:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
          - FoodLogTableApi9EE11C1C
          - RootResourceId
      PathPart: foodlogtable
      RestApiId:
        Ref: FoodLogTableApi9EE11C1C
    Metadata:
      aws:cdk:path: FoodTrackerStack/FoodLogTableApi/Default/foodlogtable/Resource
  FoodLogTableApifoodlogtableOPTIONS13AE5774:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: FoodLogTableApifoodlogtable8161F1C3
      RestApiId:
        Ref: FoodLogTableApi9EE11C1C
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,Access-Control-Allow-Origin,requestId'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST,PUT,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          StatusCode: "204"
    Metadata:
      aws:cdk:path: FoodTrackerStack/FoodLogTableApi/Default/foodlogtable/OPTIONS/Resource
  FoodLogTableApifoodlogtableid507D834F:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: FoodLogTableApifoodlogtable8161F1C3
      PathPart: "{id}"
      RestApiId:
        Ref: FoodLogTableApi9EE11C1C
    Metadata:
      aws:cdk:path: FoodTrackerStack/FoodLogTableApi/Default/foodlogtable/{id}/Resource
  FoodLogTableApifoodlogtableidOPTIONSF49F38EA:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: FoodLogTableApifoodlogtableid507D834F
      RestApiId:
        Ref: FoodLogTableApi9EE11C1C
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,Access-Control-Allow-Origin,requestId'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST,PUT,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          StatusCode: "204"
    Metadata:
      aws:cdk:path: FoodTrackerStack/FoodLogTableApi/Default/foodlogtable/{id}/OPTIONS/Resource
  FoodLogTableApifoodlogtableidDELETEB671230E:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: DELETE
      ResourceId:
        Ref: FoodLogTableApifoodlogtableid507D834F
      RestApiId:
        Ref: FoodLogTableApi9EE11C1C
      AuthorizationType: NONE
      Integration:
        Credentials:
          Fn::GetAtt:
            - deleteRole7BF4A48A
            - Arn
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            StatusCode: "200"
          - ResponseTemplates:
              application/json: |-
                {
                            "error": "Bad input!"
                          }
            SelectionPattern: "400"
            StatusCode: "400"
          - ResponseTemplates:
              application/json: |-
                {
                            "error": "Internal Service Error!"
                          }
            SelectionPattern: 5\d{2}
            StatusCode: "500"
        RequestTemplates:
          application/json: |-
            {
                          "Key": {
                            "FoodLogTableId": {
                              "S": "$method.request.path.id"
                            }
                          },
                          "TableName": "FoodLogTable"
                        }
        Type: AWS
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - :dynamodb:action/DeleteItem
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"
        - StatusCode: "400"
        - StatusCode: "500"
    Metadata:
      aws:cdk:path: FoodTrackerStack/FoodLogTableApi/Default/foodlogtable/{id}/DELETE/Resource
  FoodLogTableApifoodlogtableidGETCE783A56:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId:
        Ref: FoodLogTableApifoodlogtableid507D834F
      RestApiId:
        Ref: FoodLogTableApi9EE11C1C
      AuthorizationType: NONE
      Integration:
        Credentials:
          Fn::GetAtt:
            - getRoleEC20DC84
            - Arn
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            StatusCode: "200"
          - ResponseTemplates:
              application/json: |-
                {
                            "error": "Bad input!"
                          }
            SelectionPattern: "400"
            StatusCode: "400"
          - ResponseTemplates:
              application/json: |-
                {
                            "error": "Internal Service Error!"
                          }
            SelectionPattern: 5\d{2}
            StatusCode: "500"
        RequestTemplates:
          application/json: |-
            {
                          "Key": {
                            "FoodLogTableId": {
                              "S": "$method.request.path.id"
                            }
                          },
                          "TableName": "FoodLogTable"
                        }
        Type: AWS
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - :dynamodb:action/GetItem
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"
        - StatusCode: "400"
        - StatusCode: "500"
    Metadata:
      aws:cdk:path: FoodTrackerStack/FoodLogTableApi/Default/foodlogtable/{id}/GET/Resource
  FoodLogTableApifoodlogtableidPUT155C56B9:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: PUT
      ResourceId:
        Ref: FoodLogTableApifoodlogtableid507D834F
      RestApiId:
        Ref: FoodLogTableApi9EE11C1C
      AuthorizationType: NONE
      Integration:
        Credentials:
          Fn::GetAtt:
            - putRole5147F438
            - Arn
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            StatusCode: "200"
          - ResponseTemplates:
              application/json: |-
                {
                            "error": "Bad input!"
                          }
            SelectionPattern: "400"
            StatusCode: "400"
          - ResponseTemplates:
              application/json: |-
                {
                            "error": "Internal Service Error!"
                          }
            SelectionPattern: 5\d{2}
            StatusCode: "500"
        RequestTemplates:
          application/json: |-
            {
                          "Item": {
                            "FoodLogTableId": {
                              "S": "$method.request.path.id"
                            },
                            "Name": {
                              "S": "$input.path('$.name')"
                            },
                            "Carbs": {
                              "N": "$input.path('$.carbs')"
                            },
                            "Protein": {
                              "N": "$input.path('$.protein')"
                            },
                            "Fat": {
                              "N": "$input.path('$.fat')"
                            }
                          },
                          "TableName": "FoodLogTable"
                        }
        Type: AWS
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - :dynamodb:action/PutItem
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"
        - StatusCode: "400"
        - StatusCode: "500"
    Metadata:
      aws:cdk:path: FoodTrackerStack/FoodLogTableApi/Default/foodlogtable/{id}/PUT/Resource
  FoodLogTableApifoodlogtableGET63DF5453:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId:
        Ref: FoodLogTableApifoodlogtable8161F1C3
      RestApiId:
        Ref: FoodLogTableApi9EE11C1C
      AuthorizationType: NONE
      Integration:
        Credentials:
          Fn::GetAtt:
            - scanRole26043BF1
            - Arn
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            StatusCode: "200"
          - ResponseTemplates:
              application/json: |-
                {
                            "error": "Bad input!"
                          }
            SelectionPattern: "400"
            StatusCode: "400"
          - ResponseTemplates:
              application/json: |-
                {
                            "error": "Internal Service Error!"
                          }
            SelectionPattern: 5\d{2}
            StatusCode: "500"
        RequestTemplates:
          application/json: |-
            {
                          "TableName": "FoodLogTable"
                        }
        Type: AWS
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - :dynamodb:action/Scan
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"
        - StatusCode: "400"
        - StatusCode: "500"
    Metadata:
      aws:cdk:path: FoodTrackerStack/FoodLogTableApi/Default/foodlogtable/GET/Resource
  FoodLogTableApifoodlogtablePOST72B84ED8:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId:
        Ref: FoodLogTableApifoodlogtable8161F1C3
      RestApiId:
        Ref: FoodLogTableApi9EE11C1C
      AuthorizationType: NONE
      Integration:
        Credentials:
          Fn::GetAtt:
            - putRole5147F438
            - Arn
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: |-
                {
                                "requestId": "$context.requestId"
                              }
            StatusCode: "200"
          - ResponseTemplates:
              application/json: |-
                {
                            "error": "Bad input!"
                          }
            SelectionPattern: "400"
            StatusCode: "400"
          - ResponseTemplates:
              application/json: |-
                {
                            "error": "Internal Service Error!"
                          }
            SelectionPattern: 5\d{2}
            StatusCode: "500"
        RequestTemplates:
          application/json: |-
            {
                          "Item": {
                            "FoodLogTableId": {
                              "S": "$context.requestId"
                            },
                            "Name": {
                              "S": "$input.path('$.name')"
                            },
                            "Carbs": {
                              "N": "$input.path('$.carbs')"
                            },
                            "Protein": {
                              "N": "$input.path('$.protein')"
                            },
                            "Fat": {
                              "N": "$input.path('$.fat')"
                            }
                          },
                          "TableName": "FoodLogTable"
                        }
        Type: AWS
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - :dynamodb:action/PutItem
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"
        - StatusCode: "400"
        - StatusCode: "500"
    Metadata:
      aws:cdk:path: FoodTrackerStack/FoodLogTableApi/Default/foodlogtable/POST/Resource
  deletePolicy29E5B0C7:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: dynamodb:DeleteItem
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - FoodLogTableE496A1F1
                - Arn
        Version: "2012-10-17"
      PolicyName: deletePolicy29E5B0C7
      Roles:
        - Ref: deleteRole7BF4A48A
    Metadata:
      aws:cdk:path: FoodTrackerStack/deletePolicy/Resource
  getPolicyC36434CE:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: dynamodb:GetItem
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - FoodLogTableE496A1F1
                - Arn
        Version: "2012-10-17"
      PolicyName: getPolicyC36434CE
      Roles:
        - Ref: getRoleEC20DC84
    Metadata:
      aws:cdk:path: FoodTrackerStack/getPolicy/Resource
  putPolicy39B7208E:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: dynamodb:PutItem
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - FoodLogTableE496A1F1
                - Arn
        Version: "2012-10-17"
      PolicyName: putPolicy39B7208E
      Roles:
        - Ref: putRole5147F438
    Metadata:
      aws:cdk:path: FoodTrackerStack/putPolicy/Resource
  scanPolicy9623BCA9:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: dynamodb:Scan
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - FoodLogTableE496A1F1
                - Arn
        Version: "2012-10-17"
      PolicyName: scanPolicy9623BCA9
      Roles:
        - Ref: scanRole26043BF1
    Metadata:
      aws:cdk:path: FoodTrackerStack/scanPolicy/Resource
  deleteRole7BF4A48A:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: FoodTrackerStack/deleteRole/Resource
  getRoleEC20DC84:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: FoodTrackerStack/getRole/Resource
  putRole5147F438:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: FoodTrackerStack/putRole/Resource
  scanRole26043BF1:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: FoodTrackerStack/scanRole/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/1WQQQ+CMAyFf4v3MQPx4BX1ajTq3dStahVW4oaEkP13C2iCp359L+3rlulsodMZND4x9pkUdNHdMYB5KpHOnW0dlGxFPMGlQLW+ugGigopuELCBVncH9CGvqHcnmBvDtQtqg1XBbYmCok46ybkNK0eQUa5fBlfgUW0x3Nn25pd+7jdk4KgISonn8bKh7rkg0/btSDH+je7qUNVhuqTnNTtLgdhF5diifvj5O13qNJOveXii5CUPoRL1YawfxQuOljYBAAA=
    Metadata:
      aws:cdk:path: FoodTrackerStack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Outputs:
  FoodLogTableApiEndpoint80415001:
    Value:
      Fn::Join:
        - ""
        - - https://
          - Ref: FoodLogTableApi9EE11C1C
          - .execute-api.
          - Ref: AWS::Region
          - "."
          - Ref: AWS::URLSuffix
          - /
          - Ref: FoodLogTableApiDeploymentStageprod8CAACB7C
          - /
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
Rules:
  CheckBootstrapVersion:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::Contains:
                - - "1"
                  - "2"
                  - "3"
                  - "4"
                  - "5"
                - Ref: BootstrapVersion
        AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.

