Resources:
  GreetingVpcE379962A:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: greeting-app-mesh/GreetingVpc
    Metadata:
      aws:cdk:path: greeting-app-mesh/GreetingVpc/Resource
  GreetingVpcPublicSubnet1SubnetC2F66756:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/18
      VpcId:
        Ref: GreetingVpcE379962A
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: greeting-app-mesh/GreetingVpc/PublicSubnet1
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
    Metadata:
      aws:cdk:path: greeting-app-mesh/GreetingVpc/PublicSubnet1/Subnet
  GreetingVpcPublicSubnet1RouteTableDF985C84:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: GreetingVpcE379962A
      Tags:
        - Key: Name
          Value: greeting-app-mesh/GreetingVpc/PublicSubnet1
    Metadata:
      aws:cdk:path: greeting-app-mesh/GreetingVpc/PublicSubnet1/RouteTable
  GreetingVpcPublicSubnet1RouteTableAssociationFA3BEDB9:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: GreetingVpcPublicSubnet1RouteTableDF985C84
      SubnetId:
        Ref: GreetingVpcPublicSubnet1SubnetC2F66756
    Metadata:
      aws:cdk:path: greeting-app-mesh/GreetingVpc/PublicSubnet1/RouteTableAssociation
  GreetingVpcPublicSubnet1DefaultRoute13F0C03E:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: GreetingVpcPublicSubnet1RouteTableDF985C84
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: GreetingVpcIGW2B1C3108
    DependsOn:
      - GreetingVpcVPCGWFA0FEB29
    Metadata:
      aws:cdk:path: greeting-app-mesh/GreetingVpc/PublicSubnet1/DefaultRoute
  GreetingVpcPublicSubnet1EIP470AE761:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    Metadata:
      aws:cdk:path: greeting-app-mesh/GreetingVpc/PublicSubnet1/EIP
  GreetingVpcPublicSubnet1NATGatewayB10F778B:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - GreetingVpcPublicSubnet1EIP470AE761
          - AllocationId
      SubnetId:
        Ref: GreetingVpcPublicSubnet1SubnetC2F66756
      Tags:
        - Key: Name
          Value: greeting-app-mesh/GreetingVpc/PublicSubnet1
    Metadata:
      aws:cdk:path: greeting-app-mesh/GreetingVpc/PublicSubnet1/NATGateway
  GreetingVpcPublicSubnet2SubnetE4B2866F:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.64.0/18
      VpcId:
        Ref: GreetingVpcE379962A
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: greeting-app-mesh/GreetingVpc/PublicSubnet2
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
    Metadata:
      aws:cdk:path: greeting-app-mesh/GreetingVpc/PublicSubnet2/Subnet
  GreetingVpcPublicSubnet2RouteTableC678B858:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: GreetingVpcE379962A
      Tags:
        - Key: Name
          Value: greeting-app-mesh/GreetingVpc/PublicSubnet2
    Metadata:
      aws:cdk:path: greeting-app-mesh/GreetingVpc/PublicSubnet2/RouteTable
  GreetingVpcPublicSubnet2RouteTableAssociation833029E9:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: GreetingVpcPublicSubnet2RouteTableC678B858
      SubnetId:
        Ref: GreetingVpcPublicSubnet2SubnetE4B2866F
    Metadata:
      aws:cdk:path: greeting-app-mesh/GreetingVpc/PublicSubnet2/RouteTableAssociation
  GreetingVpcPublicSubnet2DefaultRoute8CF6B809:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: GreetingVpcPublicSubnet2RouteTableC678B858
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: GreetingVpcIGW2B1C3108
    DependsOn:
      - GreetingVpcVPCGWFA0FEB29
    Metadata:
      aws:cdk:path: greeting-app-mesh/GreetingVpc/PublicSubnet2/DefaultRoute
  GreetingVpcPublicSubnet2EIP25A063F1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    Metadata:
      aws:cdk:path: greeting-app-mesh/GreetingVpc/PublicSubnet2/EIP
  GreetingVpcPublicSubnet2NATGateway3CAEF29B:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - GreetingVpcPublicSubnet2EIP25A063F1
          - AllocationId
      SubnetId:
        Ref: GreetingVpcPublicSubnet2SubnetE4B2866F
      Tags:
        - Key: Name
          Value: greeting-app-mesh/GreetingVpc/PublicSubnet2
    Metadata:
      aws:cdk:path: greeting-app-mesh/GreetingVpc/PublicSubnet2/NATGateway
  GreetingVpcPrivateSubnet1Subnet9F6BD596:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.128.0/18
      VpcId:
        Ref: GreetingVpcE379962A
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: greeting-app-mesh/GreetingVpc/PrivateSubnet1
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
    Metadata:
      aws:cdk:path: greeting-app-mesh/GreetingVpc/PrivateSubnet1/Subnet
  GreetingVpcPrivateSubnet1RouteTable6C024CFF:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: GreetingVpcE379962A
      Tags:
        - Key: Name
          Value: greeting-app-mesh/GreetingVpc/PrivateSubnet1
    Metadata:
      aws:cdk:path: greeting-app-mesh/GreetingVpc/PrivateSubnet1/RouteTable
  GreetingVpcPrivateSubnet1RouteTableAssociationF07686A1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: GreetingVpcPrivateSubnet1RouteTable6C024CFF
      SubnetId:
        Ref: GreetingVpcPrivateSubnet1Subnet9F6BD596
    Metadata:
      aws:cdk:path: greeting-app-mesh/GreetingVpc/PrivateSubnet1/RouteTableAssociation
  GreetingVpcPrivateSubnet1DefaultRoute39E4A7BC:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: GreetingVpcPrivateSubnet1RouteTable6C024CFF
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: GreetingVpcPublicSubnet1NATGatewayB10F778B
    Metadata:
      aws:cdk:path: greeting-app-mesh/GreetingVpc/PrivateSubnet1/DefaultRoute
  GreetingVpcPrivateSubnet2Subnet38EDDB21:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.192.0/18
      VpcId:
        Ref: GreetingVpcE379962A
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: greeting-app-mesh/GreetingVpc/PrivateSubnet2
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
    Metadata:
      aws:cdk:path: greeting-app-mesh/GreetingVpc/PrivateSubnet2/Subnet
  GreetingVpcPrivateSubnet2RouteTableE148428B:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: GreetingVpcE379962A
      Tags:
        - Key: Name
          Value: greeting-app-mesh/GreetingVpc/PrivateSubnet2
    Metadata:
      aws:cdk:path: greeting-app-mesh/GreetingVpc/PrivateSubnet2/RouteTable
  GreetingVpcPrivateSubnet2RouteTableAssociation477753B5:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: GreetingVpcPrivateSubnet2RouteTableE148428B
      SubnetId:
        Ref: GreetingVpcPrivateSubnet2Subnet38EDDB21
    Metadata:
      aws:cdk:path: greeting-app-mesh/GreetingVpc/PrivateSubnet2/RouteTableAssociation
  GreetingVpcPrivateSubnet2DefaultRoute900BFF95:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: GreetingVpcPrivateSubnet2RouteTableE148428B
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: GreetingVpcPublicSubnet2NATGateway3CAEF29B
    Metadata:
      aws:cdk:path: greeting-app-mesh/GreetingVpc/PrivateSubnet2/DefaultRoute
  GreetingVpcIGW2B1C3108:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: greeting-app-mesh/GreetingVpc
    Metadata:
      aws:cdk:path: greeting-app-mesh/GreetingVpc/IGW
  GreetingVpcVPCGWFA0FEB29:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: GreetingVpcE379962A
      InternetGatewayId:
        Ref: GreetingVpcIGW2B1C3108
    Metadata:
      aws:cdk:path: greeting-app-mesh/GreetingVpc/VPCGW
  ClusterEB0386A7:
    Type: AWS::ECS::Cluster
    Metadata:
      aws:cdk:path: greeting-app-mesh/Cluster/Resource
  ClusterDefaultServiceDiscoveryNamespaceC336F9B4:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: internal
      Vpc:
        Ref: GreetingVpcE379962A
    Metadata:
      aws:cdk:path: greeting-app-mesh/Cluster/DefaultServiceDiscoveryNamespace/Resource
  ClustergreetercapacityInstanceSecurityGroupAF5C3390:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: greeting-app-mesh/Cluster/greeter-capacity/InstanceSecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: greeting-app-mesh/Cluster/greeter-capacity
      VpcId:
        Ref: GreetingVpcE379962A
    Metadata:
      aws:cdk:path: greeting-app-mesh/Cluster/greeter-capacity/InstanceSecurityGroup/Resource
  ClustergreetercapacityInstanceRole19409099:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - ec2.
                    - Ref: AWS::URLSuffix
        Version: "2012-10-17"
      Tags:
        - Key: Name
          Value: greeting-app-mesh/Cluster/greeter-capacity
    Metadata:
      aws:cdk:path: greeting-app-mesh/Cluster/greeter-capacity/InstanceRole/Resource
  ClustergreetercapacityInstanceRoleDefaultPolicyBDB58BD2:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecs:CreateCluster
              - ecs:DeregisterContainerInstance
              - ecs:DiscoverPollEndpoint
              - ecs:Poll
              - ecs:RegisterContainerInstance
              - ecs:StartTelemetrySession
              - ecs:Submit*
              - ecr:GetAuthorizationToken
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: ClustergreetercapacityInstanceRoleDefaultPolicyBDB58BD2
      Roles:
        - Ref: ClustergreetercapacityInstanceRole19409099
    Metadata:
      aws:cdk:path: greeting-app-mesh/Cluster/greeter-capacity/InstanceRole/DefaultPolicy/Resource
  ClustergreetercapacityInstanceProfile251BCDE4:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: ClustergreetercapacityInstanceRole19409099
    Metadata:
      aws:cdk:path: greeting-app-mesh/Cluster/greeter-capacity/InstanceProfile
  ClustergreetercapacityLaunchConfig704F2DF5:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        Ref: SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter
      InstanceType: t3.xlarge
      IamInstanceProfile:
        Ref: ClustergreetercapacityInstanceProfile251BCDE4
      SecurityGroups:
        - Fn::GetAtt:
            - ClustergreetercapacityInstanceSecurityGroupAF5C3390
            - GroupId
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - |-
                #!/bin/bash
                echo ECS_CLUSTER=
              - Ref: ClusterEB0386A7
              - |-2
                 >> /etc/ecs/ecs.config
                sudo iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP
                sudo service iptables save
                echo ECS_AWSVPC_BLOCK_IMDS=true >> /etc/ecs/ecs.config
    DependsOn:
      - ClustergreetercapacityInstanceRoleDefaultPolicyBDB58BD2
      - ClustergreetercapacityInstanceRole19409099
    Metadata:
      aws:cdk:path: greeting-app-mesh/Cluster/greeter-capacity/LaunchConfig
  ClustergreetercapacityASG6EF3107F:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MaxSize: "3"
      MinSize: "3"
      DesiredCapacity: "3"
      LaunchConfigurationName:
        Ref: ClustergreetercapacityLaunchConfig704F2DF5
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: greeting-app-mesh/Cluster/greeter-capacity
      VPCZoneIdentifier:
        - Ref: GreetingVpcPrivateSubnet1Subnet9F6BD596
        - Ref: GreetingVpcPrivateSubnet2Subnet38EDDB21
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: true
    Metadata:
      aws:cdk:path: greeting-app-mesh/Cluster/greeter-capacity/ASG
  ClustergreetercapacityDrainECSHookFunctionServiceRole14DC87BA:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Name
          Value: greeting-app-mesh/Cluster/greeter-capacity
    Metadata:
      aws:cdk:path: greeting-app-mesh/Cluster/greeter-capacity/DrainECSHook/Function/ServiceRole/Resource
  ClustergreetercapacityDrainECSHookFunctionServiceRoleDefaultPolicy9A426E92:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ec2:DescribeInstances
              - ec2:DescribeInstanceAttribute
              - ec2:DescribeInstanceStatus
              - ec2:DescribeHosts
            Effect: Allow
            Resource: "*"
          - Action: autoscaling:CompleteLifecycleAction
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":autoscaling:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :autoScalingGroup:*:autoScalingGroupName/
                  - Ref: ClustergreetercapacityASG6EF3107F
          - Action:
              - ecs:DescribeContainerInstances
              - ecs:DescribeTasks
            Effect: Allow
            Resource: "*"
          - Action:
              - ecs:ListContainerInstances
              - ecs:SubmitContainerStateChange
              - ecs:SubmitTaskStateChange
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - ClusterEB0386A7
                - Arn
          - Action:
              - ecs:UpdateContainerInstancesState
              - ecs:ListTasks
            Condition:
              ArnEquals:
                ecs:cluster:
                  Fn::GetAtt:
                    - ClusterEB0386A7
                    - Arn
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: ClustergreetercapacityDrainECSHookFunctionServiceRoleDefaultPolicy9A426E92
      Roles:
        - Ref: ClustergreetercapacityDrainECSHookFunctionServiceRole14DC87BA
    Metadata:
      aws:cdk:path: greeting-app-mesh/Cluster/greeter-capacity/DrainECSHook/Function/ServiceRole/DefaultPolicy/Resource
  ClustergreetercapacityDrainECSHookFunctionC9412316:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3, json, os, time

          ecs = boto3.client('ecs')
          autoscaling = boto3.client('autoscaling')


          def lambda_handler(event, context):
            print(json.dumps(event))
            cluster = os.environ['CLUSTER']
            snsTopicArn = event['Records'][0]['Sns']['TopicArn']
            lifecycle_event = json.loads(event['Records'][0]['Sns']['Message'])
            instance_id = lifecycle_event.get('EC2InstanceId')
            if not instance_id:
              print('Got event without EC2InstanceId: %s', json.dumps(event))
              return

            instance_arn = container_instance_arn(cluster, instance_id)
            print('Instance %s has container instance ARN %s' % (lifecycle_event['EC2InstanceId'], instance_arn))

            if not instance_arn:
              return

            while has_tasks(cluster, instance_arn):
              time.sleep(10)

            try:
              print('Terminating instance %s' % instance_id)
              autoscaling.complete_lifecycle_action(
                  LifecycleActionResult='CONTINUE',
                  **pick(lifecycle_event, 'LifecycleHookName', 'LifecycleActionToken', 'AutoScalingGroupName'))
            except Exception as e:
              # Lifecycle action may have already completed.
              print(str(e))


          def container_instance_arn(cluster, instance_id):
            """Turn an instance ID into a container instance ARN."""
            arns = ecs.list_container_instances(cluster=cluster, filter='ec2InstanceId==' + instance_id)['containerInstanceArns']
            if not arns:
              return None
            return arns[0]


          def has_tasks(cluster, instance_arn):
            """Return True if the instance is running tasks for the given cluster."""
            instances = ecs.describe_container_instances(cluster=cluster, containerInstances=[instance_arn])['containerInstances']
            if not instances:
              return False
            instance = instances[0]

            if instance['status'] == 'ACTIVE':
              # Start draining, then try again later
              set_container_instance_to_draining(cluster, instance_arn)
              return True

            tasks = instance['runningTasksCount'] + instance['pendingTasksCount']
            print('Instance %s has %s tasks' % (instance_arn, tasks))

            return tasks > 0


          def set_container_instance_to_draining(cluster, instance_arn):
            ecs.update_container_instances_state(
                cluster=cluster,
                containerInstances=[instance_arn], status='DRAINING')


          def pick(dct, *keys):
            """Pick a subset of a dict."""
            return {k: v for k, v in dct.items() if k in keys}
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
          - ClustergreetercapacityDrainECSHookFunctionServiceRole14DC87BA
          - Arn
      Runtime: python3.6
      Environment:
        Variables:
          CLUSTER:
            Ref: ClusterEB0386A7
      Tags:
        - Key: Name
          Value: greeting-app-mesh/Cluster/greeter-capacity
      Timeout: 310
    DependsOn:
      - ClustergreetercapacityDrainECSHookFunctionServiceRoleDefaultPolicy9A426E92
      - ClustergreetercapacityDrainECSHookFunctionServiceRole14DC87BA
    Metadata:
      aws:cdk:path: greeting-app-mesh/Cluster/greeter-capacity/DrainECSHook/Function/Resource
  ClustergreetercapacityDrainECSHookFunctionAllowInvokegreetingappmeshClustergreetercapacityLifecycleHookDrainHookTopic98B93C09B13226A9:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ClustergreetercapacityDrainECSHookFunctionC9412316
          - Arn
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: ClustergreetercapacityLifecycleHookDrainHookTopicB1CCB7C3
    Metadata:
      aws:cdk:path: greeting-app-mesh/Cluster/greeter-capacity/DrainECSHook/Function/AllowInvoke:greetingappmeshClustergreetercapacityLifecycleHookDrainHookTopic98B93C09
  ClustergreetercapacityDrainECSHookFunctionTopicD26DC16E:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      TopicArn:
        Ref: ClustergreetercapacityLifecycleHookDrainHookTopicB1CCB7C3
      Endpoint:
        Fn::GetAtt:
          - ClustergreetercapacityDrainECSHookFunctionC9412316
          - Arn
    Metadata:
      aws:cdk:path: greeting-app-mesh/Cluster/greeter-capacity/DrainECSHook/Function/Topic/Resource
  ClustergreetercapacityLifecycleHookDrainHookRoleCA0C0149:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: autoscaling.amazonaws.com
        Version: "2012-10-17"
      Tags:
        - Key: Name
          Value: greeting-app-mesh/Cluster/greeter-capacity
    Metadata:
      aws:cdk:path: greeting-app-mesh/Cluster/greeter-capacity/LifecycleHookDrainHook/Role/Resource
  ClustergreetercapacityLifecycleHookDrainHookRoleDefaultPolicy684F8ACD:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: sns:Publish
            Effect: Allow
            Resource:
              Ref: ClustergreetercapacityLifecycleHookDrainHookTopicB1CCB7C3
        Version: "2012-10-17"
      PolicyName: ClustergreetercapacityLifecycleHookDrainHookRoleDefaultPolicy684F8ACD
      Roles:
        - Ref: ClustergreetercapacityLifecycleHookDrainHookRoleCA0C0149
    Metadata:
      aws:cdk:path: greeting-app-mesh/Cluster/greeter-capacity/LifecycleHookDrainHook/Role/DefaultPolicy/Resource
  ClustergreetercapacityLifecycleHookDrainHookTopicB1CCB7C3:
    Type: AWS::SNS::Topic
    Metadata:
      aws:cdk:path: greeting-app-mesh/Cluster/greeter-capacity/LifecycleHookDrainHook/Topic/Resource
  ClustergreetercapacityLifecycleHookDrainHook577B3571:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName:
        Ref: ClustergreetercapacityASG6EF3107F
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
      DefaultResult: CONTINUE
      HeartbeatTimeout: 300
      NotificationTargetARN:
        Ref: ClustergreetercapacityLifecycleHookDrainHookTopicB1CCB7C3
      RoleARN:
        Fn::GetAtt:
          - ClustergreetercapacityLifecycleHookDrainHookRoleCA0C0149
          - Arn
    DependsOn:
      - ClustergreetercapacityLifecycleHookDrainHookRoleDefaultPolicy684F8ACD
      - ClustergreetercapacityLifecycleHookDrainHookRoleCA0C0149
    Metadata:
      aws:cdk:path: greeting-app-mesh/Cluster/greeter-capacity/LifecycleHookDrainHook/Resource
  appmesh3E0C9D60:
    Type: AWS::AppMesh::Mesh
    Properties:
      MeshName: greetingappmesh54CBC203
      Spec: {}
    Metadata:
      aws:cdk:path: greeting-app-mesh/app-mesh/Resource
  namenametaskdefinitionTaskRole53D9FBBD:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: greeting-app-mesh/name/name-task-definition/TaskRole/Resource
  namenametaskdefinitionCF9BC883:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Environment:
            - Name: PORT
              Value: "3000"
          Essential: true
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl localhost:3000
            Interval: 5
            Retries: 3
            StartPeriod: 10
            Timeout: 2
          Image: nathanpeck/name
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: namenametaskdefinitionappLogGroup3405C1FD
              awslogs-stream-prefix: app-mesh-name
              awslogs-region:
                Ref: AWS::Region
          Memory: 128
          Name: app
          PortMappings:
            - ContainerPort: 3000
              HostPort: 3000
              Protocol: tcp
        - Environment:
            - Name: APPMESH_VIRTUAL_NODE_NAME
              Value:
                Fn::Join:
                  - ""
                  - - mesh/
                    - Fn::GetAtt:
                        - appmesh3E0C9D60
                        - MeshName
                    - /virtualNode/name
            - Name: AWS_REGION
              Value:
                Ref: AWS::Region
          Essential: true
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -s http://localhost:9901/server_info | grep state | grep -q LIVE
            Interval: 5
            Retries: 3
            StartPeriod: 10
            Timeout: 2
          Image:
            Fn::Join:
              - ""
              - - 111345817488.dkr.ecr.us-east-1.
                - Ref: AWS::URLSuffix
                - /aws-appmesh-envoy:v1.11.1.1-prod
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: namenametaskdefinitionenvoyLogGroupE88F6925
              awslogs-stream-prefix: name-envoy
              awslogs-region:
                Ref: AWS::Region
          Memory: 128
          Name: envoy
          User: "1337"
      ExecutionRoleArn:
        Fn::GetAtt:
          - namenametaskdefinitionExecutionRole72CFA8C9
          - Arn
      Family: greetingappmeshnamenametaskdefinition628573B4
      NetworkMode: awsvpc
      ProxyConfiguration:
        ContainerName: envoy
        ProxyConfigurationProperties:
          - Name: AppPorts
            Value: "3000"
          - Name: ProxyEgressPort
            Value: "15001"
          - Name: ProxyIngressPort
            Value: "15000"
          - Name: IgnoredUID
            Value: "1337"
          - Name: EgressIgnoredIPs
            Value: 169.254.170.2,169.254.169.254
        Type: APPMESH
      RequiresCompatibilities:
        - EC2
      TaskRoleArn:
        Fn::GetAtt:
          - namenametaskdefinitionTaskRole53D9FBBD
          - Arn
    Metadata:
      aws:cdk:path: greeting-app-mesh/name/name-task-definition/Resource
  namenametaskdefinitionappLogGroup3405C1FD:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: greeting-app-mesh/name/name-task-definition/app/LogGroup/Resource
  namenametaskdefinitionExecutionRole72CFA8C9:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: greeting-app-mesh/name/name-task-definition/ExecutionRole/Resource
  namenametaskdefinitionExecutionRoleDefaultPolicyA22ED1C1:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - namenametaskdefinitionappLogGroup3405C1FD
                - Arn
          - Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
            Effect: Allow
            Resource: arn:aws:ecr:us-east-1:111345817488:repository/aws-appmesh-envoy
          - Action: ecr:GetAuthorizationToken
            Effect: Allow
            Resource: "*"
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - namenametaskdefinitionenvoyLogGroupE88F6925
                - Arn
        Version: "2012-10-17"
      PolicyName: namenametaskdefinitionExecutionRoleDefaultPolicyA22ED1C1
      Roles:
        - Ref: namenametaskdefinitionExecutionRole72CFA8C9
    Metadata:
      aws:cdk:path: greeting-app-mesh/name/name-task-definition/ExecutionRole/DefaultPolicy/Resource
  namenametaskdefinitionenvoyLogGroupE88F6925:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: greeting-app-mesh/name/name-task-definition/envoy/LogGroup/Resource
  namenameserviceService8C31EC3C:
    Type: AWS::ECS::Service
    Properties:
      TaskDefinition:
        Ref: namenametaskdefinitionCF9BC883
      Cluster:
        Ref: ClusterEB0386A7
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 2
      EnableECSManagedTags: false
      LaunchType: EC2
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::GetAtt:
                - namenameserviceSecurityGroup0F44B512
                - GroupId
          Subnets:
            - Ref: GreetingVpcPrivateSubnet1Subnet9F6BD596
            - Ref: GreetingVpcPrivateSubnet2Subnet38EDDB21
      SchedulingStrategy: REPLICA
      ServiceRegistries:
        - RegistryArn:
            Fn::GetAtt:
              - namenameserviceCloudmapServiceA48526C8
              - Arn
    Metadata:
      aws:cdk:path: greeting-app-mesh/name/name-service/Service
  namenameserviceCloudmapServiceA48526C8:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        NamespaceId:
          Fn::GetAtt:
            - ClusterDefaultServiceDiscoveryNamespaceC336F9B4
            - Id
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 2
      Name: name
      NamespaceId:
        Fn::GetAtt:
          - ClusterDefaultServiceDiscoveryNamespaceC336F9B4
          - Id
    Metadata:
      aws:cdk:path: greeting-app-mesh/name/name-service/CloudmapService/Resource
  namenameserviceSecurityGroup0F44B512:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: greeting-app-mesh/name/name-service/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: GreetingVpcE379962A
    Metadata:
      aws:cdk:path: greeting-app-mesh/name/name-service/SecurityGroup/Resource
  namenameserviceSecurityGroupfromgreetingappmeshgreetergreeterserviceSecurityGroup0DFEB06FundefinedBC9C29B4:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: TCP
      Description: Inbound traffic from the app mesh enabled greeter
      FromPort: 3000
      GroupId:
        Fn::GetAtt:
          - namenameserviceSecurityGroup0F44B512
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - greetergreeterserviceSecurityGroup980210A9
          - GroupId
      ToPort: 3000
    Metadata:
      aws:cdk:path: greeting-app-mesh/name/name-service/SecurityGroup/from greetingappmeshgreetergreeterserviceSecurityGroup0DFEB06F:undefined
  namenamevirtualnode4EB0B197:
    Type: AWS::AppMesh::VirtualNode
    Properties:
      MeshName:
        Fn::GetAtt:
          - appmesh3E0C9D60
          - MeshName
      Spec:
        Listeners:
          - HealthCheck:
              HealthyThreshold: 2
              IntervalMillis: 5000
              Path: /
              Port: 3000
              Protocol: http
              TimeoutMillis: 2000
              UnhealthyThreshold: 2
            PortMapping:
              Port: 3000
              Protocol: http
        Logging:
          AccessLog:
            File:
              Path: /dev/stdout
        ServiceDiscovery:
          AWSCloudMap:
            NamespaceName: internal
            ServiceName:
              Fn::GetAtt:
                - namenameserviceCloudmapServiceA48526C8
                - Name
      VirtualNodeName: name
    Metadata:
      aws:cdk:path: greeting-app-mesh/name/name-virtual-node/Resource
  namenamevirtualserviceA11EED33:
    Type: AWS::AppMesh::VirtualService
    Properties:
      MeshName:
        Fn::GetAtt:
          - appmesh3E0C9D60
          - MeshName
      Spec:
        Provider:
          VirtualNode:
            VirtualNodeName:
              Fn::GetAtt:
                - namenamevirtualnode4EB0B197
                - VirtualNodeName
      VirtualServiceName: name.internal
    Metadata:
      aws:cdk:path: greeting-app-mesh/name/name-virtual-service/Resource
  greetinggreetingtaskdefinitionTaskRoleCA3A82AC:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: greeting-app-mesh/greeting/greeting-task-definition/TaskRole/Resource
  greetinggreetingtaskdefinition055E58CE:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Environment:
            - Name: PORT
              Value: "3000"
          Essential: true
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl localhost:3000
            Interval: 5
            Retries: 3
            StartPeriod: 10
            Timeout: 2
          Image: nathanpeck/greeting
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: greetinggreetingtaskdefinitionappLogGroup980574AF
              awslogs-stream-prefix: app-mesh-greeting
              awslogs-region:
                Ref: AWS::Region
          Memory: 128
          Name: app
          PortMappings:
            - ContainerPort: 3000
              HostPort: 3000
              Protocol: tcp
        - Environment:
            - Name: APPMESH_VIRTUAL_NODE_NAME
              Value:
                Fn::Join:
                  - ""
                  - - mesh/
                    - Fn::GetAtt:
                        - appmesh3E0C9D60
                        - MeshName
                    - /virtualNode/greeting
            - Name: AWS_REGION
              Value:
                Ref: AWS::Region
          Essential: true
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -s http://localhost:9901/server_info | grep state | grep -q LIVE
            Interval: 5
            Retries: 3
            StartPeriod: 10
            Timeout: 2
          Image:
            Fn::Join:
              - ""
              - - 111345817488.dkr.ecr.us-east-1.
                - Ref: AWS::URLSuffix
                - /aws-appmesh-envoy:v1.11.1.1-prod
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: greetinggreetingtaskdefinitionenvoyLogGroup76D990E8
              awslogs-stream-prefix: greeting-envoy
              awslogs-region:
                Ref: AWS::Region
          Memory: 128
          Name: envoy
          User: "1337"
      ExecutionRoleArn:
        Fn::GetAtt:
          - greetinggreetingtaskdefinitionExecutionRole64008524
          - Arn
      Family: greetingappmeshgreetinggreetingtaskdefinitionA33F85DF
      NetworkMode: awsvpc
      ProxyConfiguration:
        ContainerName: envoy
        ProxyConfigurationProperties:
          - Name: AppPorts
            Value: "3000"
          - Name: ProxyEgressPort
            Value: "15001"
          - Name: ProxyIngressPort
            Value: "15000"
          - Name: IgnoredUID
            Value: "1337"
          - Name: EgressIgnoredIPs
            Value: 169.254.170.2,169.254.169.254
        Type: APPMESH
      RequiresCompatibilities:
        - EC2
      TaskRoleArn:
        Fn::GetAtt:
          - greetinggreetingtaskdefinitionTaskRoleCA3A82AC
          - Arn
    Metadata:
      aws:cdk:path: greeting-app-mesh/greeting/greeting-task-definition/Resource
  greetinggreetingtaskdefinitionappLogGroup980574AF:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: greeting-app-mesh/greeting/greeting-task-definition/app/LogGroup/Resource
  greetinggreetingtaskdefinitionExecutionRole64008524:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: greeting-app-mesh/greeting/greeting-task-definition/ExecutionRole/Resource
  greetinggreetingtaskdefinitionExecutionRoleDefaultPolicy6EA0FECA:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - greetinggreetingtaskdefinitionappLogGroup980574AF
                - Arn
          - Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
            Effect: Allow
            Resource: arn:aws:ecr:us-east-1:111345817488:repository/aws-appmesh-envoy
          - Action: ecr:GetAuthorizationToken
            Effect: Allow
            Resource: "*"
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - greetinggreetingtaskdefinitionenvoyLogGroup76D990E8
                - Arn
        Version: "2012-10-17"
      PolicyName: greetinggreetingtaskdefinitionExecutionRoleDefaultPolicy6EA0FECA
      Roles:
        - Ref: greetinggreetingtaskdefinitionExecutionRole64008524
    Metadata:
      aws:cdk:path: greeting-app-mesh/greeting/greeting-task-definition/ExecutionRole/DefaultPolicy/Resource
  greetinggreetingtaskdefinitionenvoyLogGroup76D990E8:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: greeting-app-mesh/greeting/greeting-task-definition/envoy/LogGroup/Resource
  greetinggreetingserviceServiceBE9EB41C:
    Type: AWS::ECS::Service
    Properties:
      TaskDefinition:
        Ref: greetinggreetingtaskdefinition055E58CE
      Cluster:
        Ref: ClusterEB0386A7
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 2
      EnableECSManagedTags: false
      LaunchType: EC2
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::GetAtt:
                - greetinggreetingserviceSecurityGroupB6E6D6EA
                - GroupId
          Subnets:
            - Ref: GreetingVpcPrivateSubnet1Subnet9F6BD596
            - Ref: GreetingVpcPrivateSubnet2Subnet38EDDB21
      SchedulingStrategy: REPLICA
      ServiceRegistries:
        - RegistryArn:
            Fn::GetAtt:
              - greetinggreetingserviceCloudmapService5D71686F
              - Arn
    Metadata:
      aws:cdk:path: greeting-app-mesh/greeting/greeting-service/Service
  greetinggreetingserviceCloudmapService5D71686F:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        NamespaceId:
          Fn::GetAtt:
            - ClusterDefaultServiceDiscoveryNamespaceC336F9B4
            - Id
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 2
      Name: greeting
      NamespaceId:
        Fn::GetAtt:
          - ClusterDefaultServiceDiscoveryNamespaceC336F9B4
          - Id
    Metadata:
      aws:cdk:path: greeting-app-mesh/greeting/greeting-service/CloudmapService/Resource
  greetinggreetingserviceSecurityGroupB6E6D6EA:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: greeting-app-mesh/greeting/greeting-service/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: GreetingVpcE379962A
    Metadata:
      aws:cdk:path: greeting-app-mesh/greeting/greeting-service/SecurityGroup/Resource
  greetinggreetingserviceSecurityGroupfromgreetingappmeshgreetergreeterserviceSecurityGroup0DFEB06Fundefined76C35708:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: TCP
      Description: Inbound traffic from the app mesh enabled greeter
      FromPort: 3000
      GroupId:
        Fn::GetAtt:
          - greetinggreetingserviceSecurityGroupB6E6D6EA
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - greetergreeterserviceSecurityGroup980210A9
          - GroupId
      ToPort: 3000
    Metadata:
      aws:cdk:path: greeting-app-mesh/greeting/greeting-service/SecurityGroup/from greetingappmeshgreetergreeterserviceSecurityGroup0DFEB06F:undefined
  greetinggreetingvirtualnode86C63E8D:
    Type: AWS::AppMesh::VirtualNode
    Properties:
      MeshName:
        Fn::GetAtt:
          - appmesh3E0C9D60
          - MeshName
      Spec:
        Listeners:
          - HealthCheck:
              HealthyThreshold: 2
              IntervalMillis: 5000
              Path: /
              Port: 3000
              Protocol: http
              TimeoutMillis: 2000
              UnhealthyThreshold: 2
            PortMapping:
              Port: 3000
              Protocol: http
        Logging:
          AccessLog:
            File:
              Path: /dev/stdout
        ServiceDiscovery:
          AWSCloudMap:
            NamespaceName: internal
            ServiceName:
              Fn::GetAtt:
                - greetinggreetingserviceCloudmapService5D71686F
                - Name
      VirtualNodeName: greeting
    Metadata:
      aws:cdk:path: greeting-app-mesh/greeting/greeting-virtual-node/Resource
  greetinggreetingvirtualserviceD12188C1:
    Type: AWS::AppMesh::VirtualService
    Properties:
      MeshName:
        Fn::GetAtt:
          - appmesh3E0C9D60
          - MeshName
      Spec:
        Provider:
          VirtualNode:
            VirtualNodeName:
              Fn::GetAtt:
                - greetinggreetingvirtualnode86C63E8D
                - VirtualNodeName
      VirtualServiceName: greeting.internal
    Metadata:
      aws:cdk:path: greeting-app-mesh/greeting/greeting-virtual-service/Resource
  greetergreetertaskdefinitionTaskRoleEECFBE1E:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: greeting-app-mesh/greeter/greeter-task-definition/TaskRole/Resource
  greetergreetertaskdefinition8C59B20D:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Environment:
            - Name: GREETING_URL
              Value: http://greeting.internal:3000
            - Name: NAME_URL
              Value: http://name.internal:3000
            - Name: PORT
              Value: "3000"
          Essential: true
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl localhost:3000
            Interval: 5
            Retries: 3
            StartPeriod: 10
            Timeout: 2
          Image: nathanpeck/greeter
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: greetergreetertaskdefinitionappLogGroup15ECA5BE
              awslogs-stream-prefix: app-mesh-greeter
              awslogs-region:
                Ref: AWS::Region
          Memory: 128
          Name: app
          PortMappings:
            - ContainerPort: 3000
              HostPort: 3000
              Protocol: tcp
        - Environment:
            - Name: APPMESH_VIRTUAL_NODE_NAME
              Value:
                Fn::Join:
                  - ""
                  - - mesh/
                    - Fn::GetAtt:
                        - appmesh3E0C9D60
                        - MeshName
                    - /virtualNode/greeter
            - Name: AWS_REGION
              Value:
                Ref: AWS::Region
          Essential: true
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -s http://localhost:9901/server_info | grep state | grep -q LIVE
            Interval: 5
            Retries: 3
            StartPeriod: 10
            Timeout: 2
          Image:
            Fn::Join:
              - ""
              - - 111345817488.dkr.ecr.us-east-1.
                - Ref: AWS::URLSuffix
                - /aws-appmesh-envoy:v1.11.1.1-prod
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: greetergreetertaskdefinitionenvoyLogGroup1CE1E27F
              awslogs-stream-prefix: greeter-envoy
              awslogs-region:
                Ref: AWS::Region
          Memory: 128
          Name: envoy
          User: "1337"
      ExecutionRoleArn:
        Fn::GetAtt:
          - greetergreetertaskdefinitionExecutionRole9EAF9C82
          - Arn
      Family: greetingappmeshgreetergreetertaskdefinition6785309A
      NetworkMode: awsvpc
      ProxyConfiguration:
        ContainerName: envoy
        ProxyConfigurationProperties:
          - Name: AppPorts
            Value: "3000"
          - Name: ProxyEgressPort
            Value: "15001"
          - Name: ProxyIngressPort
            Value: "15000"
          - Name: IgnoredUID
            Value: "1337"
          - Name: EgressIgnoredIPs
            Value: 169.254.170.2,169.254.169.254
        Type: APPMESH
      RequiresCompatibilities:
        - EC2
      TaskRoleArn:
        Fn::GetAtt:
          - greetergreetertaskdefinitionTaskRoleEECFBE1E
          - Arn
    Metadata:
      aws:cdk:path: greeting-app-mesh/greeter/greeter-task-definition/Resource
  greetergreetertaskdefinitionappLogGroup15ECA5BE:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: greeting-app-mesh/greeter/greeter-task-definition/app/LogGroup/Resource
  greetergreetertaskdefinitionExecutionRole9EAF9C82:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: greeting-app-mesh/greeter/greeter-task-definition/ExecutionRole/Resource
  greetergreetertaskdefinitionExecutionRoleDefaultPolicy0A187663:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - greetergreetertaskdefinitionappLogGroup15ECA5BE
                - Arn
          - Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
            Effect: Allow
            Resource: arn:aws:ecr:us-east-1:111345817488:repository/aws-appmesh-envoy
          - Action: ecr:GetAuthorizationToken
            Effect: Allow
            Resource: "*"
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - greetergreetertaskdefinitionenvoyLogGroup1CE1E27F
                - Arn
        Version: "2012-10-17"
      PolicyName: greetergreetertaskdefinitionExecutionRoleDefaultPolicy0A187663
      Roles:
        - Ref: greetergreetertaskdefinitionExecutionRole9EAF9C82
    Metadata:
      aws:cdk:path: greeting-app-mesh/greeter/greeter-task-definition/ExecutionRole/DefaultPolicy/Resource
  greetergreetertaskdefinitionenvoyLogGroup1CE1E27F:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: greeting-app-mesh/greeter/greeter-task-definition/envoy/LogGroup/Resource
  greetergreeterserviceServiceEF733357:
    Type: AWS::ECS::Service
    Properties:
      TaskDefinition:
        Ref: greetergreetertaskdefinition8C59B20D
      Cluster:
        Ref: ClusterEB0386A7
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 2
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: EC2
      LoadBalancers:
        - ContainerName: app
          ContainerPort: 3000
          TargetGroupArn:
            Ref: externalPublicListenergreeterGroup138AB5AD
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::GetAtt:
                - greetergreeterserviceSecurityGroup980210A9
                - GroupId
          Subnets:
            - Ref: GreetingVpcPrivateSubnet1Subnet9F6BD596
            - Ref: GreetingVpcPrivateSubnet2Subnet38EDDB21
      SchedulingStrategy: REPLICA
      ServiceRegistries:
        - RegistryArn:
            Fn::GetAtt:
              - greetergreeterserviceCloudmapServiceFFE2FC62
              - Arn
    DependsOn:
      - externalPublicListenergreeterGroup138AB5AD
      - externalPublicListener4F32291C
    Metadata:
      aws:cdk:path: greeting-app-mesh/greeter/greeter-service/Service
  greetergreeterserviceCloudmapServiceFFE2FC62:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        NamespaceId:
          Fn::GetAtt:
            - ClusterDefaultServiceDiscoveryNamespaceC336F9B4
            - Id
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 2
      Name: greeter
      NamespaceId:
        Fn::GetAtt:
          - ClusterDefaultServiceDiscoveryNamespaceC336F9B4
          - Id
    Metadata:
      aws:cdk:path: greeting-app-mesh/greeter/greeter-service/CloudmapService/Resource
  greetergreeterserviceSecurityGroup980210A9:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: greeting-app-mesh/greeter/greeter-service/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: GreetingVpcE379962A
    Metadata:
      aws:cdk:path: greeting-app-mesh/greeter/greeter-service/SecurityGroup/Resource
  greetergreeterserviceSecurityGroupfromgreetingappmeshexternalSecurityGroupBAF744C03000F76C237B:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort: 3000
      GroupId:
        Fn::GetAtt:
          - greetergreeterserviceSecurityGroup980210A9
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - externalSecurityGroupCBA1C4B8
          - GroupId
      ToPort: 3000
    Metadata:
      aws:cdk:path: greeting-app-mesh/greeter/greeter-service/SecurityGroup/from greetingappmeshexternalSecurityGroupBAF744C0:3000
  greetergreetervirtualnode8BF3F072:
    Type: AWS::AppMesh::VirtualNode
    Properties:
      MeshName:
        Fn::GetAtt:
          - appmesh3E0C9D60
          - MeshName
      Spec:
        Backends:
          - VirtualService:
              VirtualServiceName:
                Fn::GetAtt:
                  - namenamevirtualserviceA11EED33
                  - VirtualServiceName
          - VirtualService:
              VirtualServiceName:
                Fn::GetAtt:
                  - greetinggreetingvirtualserviceD12188C1
                  - VirtualServiceName
        Listeners:
          - HealthCheck:
              HealthyThreshold: 2
              IntervalMillis: 5000
              Path: /
              Port: 3000
              Protocol: http
              TimeoutMillis: 2000
              UnhealthyThreshold: 2
            PortMapping:
              Port: 3000
              Protocol: http
        Logging:
          AccessLog:
            File:
              Path: /dev/stdout
        ServiceDiscovery:
          AWSCloudMap:
            NamespaceName: internal
            ServiceName:
              Fn::GetAtt:
                - greetergreeterserviceCloudmapServiceFFE2FC62
                - Name
      VirtualNodeName: greeter
    Metadata:
      aws:cdk:path: greeting-app-mesh/greeter/greeter-virtual-node/Resource
  greetergreetervirtualserviceE94AC0BE:
    Type: AWS::AppMesh::VirtualService
    Properties:
      MeshName:
        Fn::GetAtt:
          - appmesh3E0C9D60
          - MeshName
      Spec:
        Provider:
          VirtualNode:
            VirtualNodeName:
              Fn::GetAtt:
                - greetergreetervirtualnode8BF3F072
                - VirtualNodeName
      VirtualServiceName: greeter.internal
    Metadata:
      aws:cdk:path: greeting-app-mesh/greeter/greeter-virtual-service/Resource
  external068F12D1:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - Fn::GetAtt:
            - externalSecurityGroupCBA1C4B8
            - GroupId
      Subnets:
        - Ref: GreetingVpcPublicSubnet1SubnetC2F66756
        - Ref: GreetingVpcPublicSubnet2SubnetE4B2866F
      Type: application
    DependsOn:
      - GreetingVpcPublicSubnet1DefaultRoute13F0C03E
      - GreetingVpcPublicSubnet2DefaultRoute8CF6B809
    Metadata:
      aws:cdk:path: greeting-app-mesh/external/Resource
  externalSecurityGroupCBA1C4B8:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatically created Security Group for ELB greetingappmeshexternalB67DE655
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Ref: GreetingVpcE379962A
    Metadata:
      aws:cdk:path: greeting-app-mesh/external/SecurityGroup/Resource
  externalSecurityGrouptogreetingappmeshgreetergreeterserviceSecurityGroup0DFEB06F3000925E2603:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId:
        Fn::GetAtt:
          - externalSecurityGroupCBA1C4B8
          - GroupId
      IpProtocol: tcp
      Description: Load balancer to target
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - greetergreeterserviceSecurityGroup980210A9
          - GroupId
      FromPort: 3000
      ToPort: 3000
    Metadata:
      aws:cdk:path: greeting-app-mesh/external/SecurityGroup/to greetingappmeshgreetergreeterserviceSecurityGroup0DFEB06F:3000
  externalPublicListener4F32291C:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: externalPublicListenergreeterGroup138AB5AD
          Type: forward
      LoadBalancerArn:
        Ref: external068F12D1
      Port: 80
      Protocol: HTTP
    Metadata:
      aws:cdk:path: greeting-app-mesh/external/PublicListener/Resource
  externalPublicListenergreeterGroup138AB5AD:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Ref: GreetingVpcE379962A
    Metadata:
      aws:cdk:path: greeting-app-mesh/external/PublicListener/greeterGroup/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Modules: aws-cdk=2.113.0,@aws-cdk/assets=1.12.0,@aws-cdk/aws-applicationautoscaling=1.12.0,@aws-cdk/aws-appmesh=1.12.0,@aws-cdk/aws-autoscaling=1.12.0,@aws-cdk/aws-autoscaling-common=1.12.0,@aws-cdk/aws-autoscaling-hooktargets=1.12.0,@aws-cdk/aws-cloudformation=1.12.0,@aws-cdk/aws-cloudwatch=1.12.0,@aws-cdk/aws-ec2=1.12.0,@aws-cdk/aws-ecr=1.12.0,@aws-cdk/aws-ecr-assets=1.12.0,@aws-cdk/aws-ecs=1.12.0,@aws-cdk/aws-elasticloadbalancingv2=1.12.0,@aws-cdk/aws-events=1.12.0,@aws-cdk/aws-iam=1.12.0,@aws-cdk/aws-kms=1.12.0,@aws-cdk/aws-lambda=1.12.0,@aws-cdk/aws-logs=1.12.0,@aws-cdk/aws-s3=1.12.0,@aws-cdk/aws-s3-assets=1.12.0,@aws-cdk/aws-servicediscovery=1.12.0,@aws-cdk/aws-sns=1.12.0,@aws-cdk/aws-sns-subscriptions=1.12.0,@aws-cdk/aws-sqs=1.12.0,@aws-cdk/aws-ssm=1.12.0,@aws-cdk/core=1.12.0,@aws-cdk/cx-api=1.12.0,@aws-cdk/region-info=1.12.0,jsii-runtime=node.js/v18.12.1
    Condition: CDKMetadataAvailable
Parameters:
  SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
Outputs:
  ExternalDNS:
    Value:
      Fn::GetAtt:
        - external068F12D1
        - DNSName
    Export:
      Name: greeter-app-external
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - il-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - me-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2

