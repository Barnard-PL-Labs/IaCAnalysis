Resources:
  jogocobrinha82CF8E2D:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: jogo-cobrinha
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: InfrastructureStack/jogo-cobrinha/Resource
  appclusterD09F8E40:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: app-cluster
    Metadata:
      aws:cdk:path: InfrastructureStack/app-cluster/Resource
  appclusterVpcF4697FAF:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: InfrastructureStack/app-cluster/Vpc
    Metadata:
      aws:cdk:path: InfrastructureStack/app-cluster/Vpc/Resource
  appclusterVpcPublicSubnet1Subnet1347BA62:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/18
      VpcId:
        Ref: appclusterVpcF4697FAF
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: InfrastructureStack/app-cluster/Vpc/PublicSubnet1
    Metadata:
      aws:cdk:path: InfrastructureStack/app-cluster/Vpc/PublicSubnet1/Subnet
  appclusterVpcPublicSubnet1RouteTable02FD5D8A:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: appclusterVpcF4697FAF
      Tags:
        - Key: Name
          Value: InfrastructureStack/app-cluster/Vpc/PublicSubnet1
    Metadata:
      aws:cdk:path: InfrastructureStack/app-cluster/Vpc/PublicSubnet1/RouteTable
  appclusterVpcPublicSubnet1RouteTableAssociationF673EB1A:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: appclusterVpcPublicSubnet1RouteTable02FD5D8A
      SubnetId:
        Ref: appclusterVpcPublicSubnet1Subnet1347BA62
    Metadata:
      aws:cdk:path: InfrastructureStack/app-cluster/Vpc/PublicSubnet1/RouteTableAssociation
  appclusterVpcPublicSubnet1DefaultRouteB86F4432:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: appclusterVpcPublicSubnet1RouteTable02FD5D8A
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: appclusterVpcIGW17A11835
    DependsOn:
      - appclusterVpcVPCGW22BF8E05
    Metadata:
      aws:cdk:path: InfrastructureStack/app-cluster/Vpc/PublicSubnet1/DefaultRoute
  appclusterVpcPublicSubnet1EIP791F54CD:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: InfrastructureStack/app-cluster/Vpc/PublicSubnet1
    Metadata:
      aws:cdk:path: InfrastructureStack/app-cluster/Vpc/PublicSubnet1/EIP
  appclusterVpcPublicSubnet1NATGateway796FA016:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - appclusterVpcPublicSubnet1EIP791F54CD
          - AllocationId
      SubnetId:
        Ref: appclusterVpcPublicSubnet1Subnet1347BA62
      Tags:
        - Key: Name
          Value: InfrastructureStack/app-cluster/Vpc/PublicSubnet1
    Metadata:
      aws:cdk:path: InfrastructureStack/app-cluster/Vpc/PublicSubnet1/NATGateway
  appclusterVpcPublicSubnet2Subnet119BDD5B:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.64.0/18
      VpcId:
        Ref: appclusterVpcF4697FAF
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: InfrastructureStack/app-cluster/Vpc/PublicSubnet2
    Metadata:
      aws:cdk:path: InfrastructureStack/app-cluster/Vpc/PublicSubnet2/Subnet
  appclusterVpcPublicSubnet2RouteTable1703EEF9:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: appclusterVpcF4697FAF
      Tags:
        - Key: Name
          Value: InfrastructureStack/app-cluster/Vpc/PublicSubnet2
    Metadata:
      aws:cdk:path: InfrastructureStack/app-cluster/Vpc/PublicSubnet2/RouteTable
  appclusterVpcPublicSubnet2RouteTableAssociation71C9A72C:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: appclusterVpcPublicSubnet2RouteTable1703EEF9
      SubnetId:
        Ref: appclusterVpcPublicSubnet2Subnet119BDD5B
    Metadata:
      aws:cdk:path: InfrastructureStack/app-cluster/Vpc/PublicSubnet2/RouteTableAssociation
  appclusterVpcPublicSubnet2DefaultRouteDD35755B:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: appclusterVpcPublicSubnet2RouteTable1703EEF9
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: appclusterVpcIGW17A11835
    DependsOn:
      - appclusterVpcVPCGW22BF8E05
    Metadata:
      aws:cdk:path: InfrastructureStack/app-cluster/Vpc/PublicSubnet2/DefaultRoute
  appclusterVpcPublicSubnet2EIPD0A381A3:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: InfrastructureStack/app-cluster/Vpc/PublicSubnet2
    Metadata:
      aws:cdk:path: InfrastructureStack/app-cluster/Vpc/PublicSubnet2/EIP
  appclusterVpcPublicSubnet2NATGatewayF51AEF9D:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - appclusterVpcPublicSubnet2EIPD0A381A3
          - AllocationId
      SubnetId:
        Ref: appclusterVpcPublicSubnet2Subnet119BDD5B
      Tags:
        - Key: Name
          Value: InfrastructureStack/app-cluster/Vpc/PublicSubnet2
    Metadata:
      aws:cdk:path: InfrastructureStack/app-cluster/Vpc/PublicSubnet2/NATGateway
  appclusterVpcPrivateSubnet1Subnet85B29794:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.128.0/18
      VpcId:
        Ref: appclusterVpcF4697FAF
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: InfrastructureStack/app-cluster/Vpc/PrivateSubnet1
    Metadata:
      aws:cdk:path: InfrastructureStack/app-cluster/Vpc/PrivateSubnet1/Subnet
  appclusterVpcPrivateSubnet1RouteTableD6707859:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: appclusterVpcF4697FAF
      Tags:
        - Key: Name
          Value: InfrastructureStack/app-cluster/Vpc/PrivateSubnet1
    Metadata:
      aws:cdk:path: InfrastructureStack/app-cluster/Vpc/PrivateSubnet1/RouteTable
  appclusterVpcPrivateSubnet1RouteTableAssociationCD96E882:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: appclusterVpcPrivateSubnet1RouteTableD6707859
      SubnetId:
        Ref: appclusterVpcPrivateSubnet1Subnet85B29794
    Metadata:
      aws:cdk:path: InfrastructureStack/app-cluster/Vpc/PrivateSubnet1/RouteTableAssociation
  appclusterVpcPrivateSubnet1DefaultRoute14B52D9A:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: appclusterVpcPrivateSubnet1RouteTableD6707859
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: appclusterVpcPublicSubnet1NATGateway796FA016
    Metadata:
      aws:cdk:path: InfrastructureStack/app-cluster/Vpc/PrivateSubnet1/DefaultRoute
  appclusterVpcPrivateSubnet2Subnet04E6990A:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.192.0/18
      VpcId:
        Ref: appclusterVpcF4697FAF
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: InfrastructureStack/app-cluster/Vpc/PrivateSubnet2
    Metadata:
      aws:cdk:path: InfrastructureStack/app-cluster/Vpc/PrivateSubnet2/Subnet
  appclusterVpcPrivateSubnet2RouteTableC3B35EF6:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: appclusterVpcF4697FAF
      Tags:
        - Key: Name
          Value: InfrastructureStack/app-cluster/Vpc/PrivateSubnet2
    Metadata:
      aws:cdk:path: InfrastructureStack/app-cluster/Vpc/PrivateSubnet2/RouteTable
  appclusterVpcPrivateSubnet2RouteTableAssociation5B806D40:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: appclusterVpcPrivateSubnet2RouteTableC3B35EF6
      SubnetId:
        Ref: appclusterVpcPrivateSubnet2Subnet04E6990A
    Metadata:
      aws:cdk:path: InfrastructureStack/app-cluster/Vpc/PrivateSubnet2/RouteTableAssociation
  appclusterVpcPrivateSubnet2DefaultRouteF79A6EC7:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: appclusterVpcPrivateSubnet2RouteTableC3B35EF6
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: appclusterVpcPublicSubnet2NATGatewayF51AEF9D
    Metadata:
      aws:cdk:path: InfrastructureStack/app-cluster/Vpc/PrivateSubnet2/DefaultRoute
  appclusterVpcIGW17A11835:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: InfrastructureStack/app-cluster/Vpc
    Metadata:
      aws:cdk:path: InfrastructureStack/app-cluster/Vpc/IGW
  appclusterVpcVPCGW22BF8E05:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: appclusterVpcF4697FAF
      InternetGatewayId:
        Ref: appclusterVpcIGW17A11835
    Metadata:
      aws:cdk:path: InfrastructureStack/app-cluster/Vpc/VPCGW
  appclusterappscalinggroupInstanceSecurityGroup6409D719:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: InfrastructureStack/app-cluster/app-scaling-group/InstanceSecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: InfrastructureStack/app-cluster/app-scaling-group
      VpcId:
        Ref: appclusterVpcF4697FAF
    Metadata:
      aws:cdk:path: InfrastructureStack/app-cluster/app-scaling-group/InstanceSecurityGroup/Resource
  appclusterappscalinggroupInstanceSecurityGroupfromInfrastructureStackappserviceLBSecurityGroupB9319A983276865535228FF360:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort: 32768
      GroupId:
        Fn::GetAtt:
          - appclusterappscalinggroupInstanceSecurityGroup6409D719
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - appserviceLBSecurityGroup9E323373
          - GroupId
      ToPort: 65535
    Metadata:
      aws:cdk:path: InfrastructureStack/app-cluster/app-scaling-group/InstanceSecurityGroup/from InfrastructureStackappserviceLBSecurityGroupB9319A98:32768-65535
  appclusterappscalinggroupInstanceRole6818F7D0:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - ec2.
                    - Ref: AWS::URLSuffix
        Version: "2012-10-17"
      Tags:
        - Key: Name
          Value: InfrastructureStack/app-cluster/app-scaling-group
    Metadata:
      aws:cdk:path: InfrastructureStack/app-cluster/app-scaling-group/InstanceRole/Resource
  appclusterappscalinggroupInstanceRoleDefaultPolicy1FEAC72B:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecs:CreateCluster
              - ecs:DeregisterContainerInstance
              - ecs:DiscoverPollEndpoint
              - ecs:Poll
              - ecs:RegisterContainerInstance
              - ecs:StartTelemetrySession
              - ecs:Submit*
              - ecr:GetAuthorizationToken
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: appclusterappscalinggroupInstanceRoleDefaultPolicy1FEAC72B
      Roles:
        - Ref: appclusterappscalinggroupInstanceRole6818F7D0
    Metadata:
      aws:cdk:path: InfrastructureStack/app-cluster/app-scaling-group/InstanceRole/DefaultPolicy/Resource
  appclusterappscalinggroupInstanceProfile3457C042:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: appclusterappscalinggroupInstanceRole6818F7D0
    Metadata:
      aws:cdk:path: InfrastructureStack/app-cluster/app-scaling-group/InstanceProfile
  appclusterappscalinggroupLaunchConfig41C606B2:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        Ref: SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter
      InstanceType: t2.micro
      IamInstanceProfile:
        Ref: appclusterappscalinggroupInstanceProfile3457C042
      SecurityGroups:
        - Fn::GetAtt:
            - appclusterappscalinggroupInstanceSecurityGroup6409D719
            - GroupId
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - |-
                #!/bin/bash
                echo ECS_CLUSTER=
              - Ref: appclusterD09F8E40
              - |-2
                 >> /etc/ecs/ecs.config
                sudo iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP
                sudo service iptables save
                echo ECS_AWSVPC_BLOCK_IMDS=true >> /etc/ecs/ecs.config
    DependsOn:
      - appclusterappscalinggroupInstanceRoleDefaultPolicy1FEAC72B
      - appclusterappscalinggroupInstanceRole6818F7D0
    Metadata:
      aws:cdk:path: InfrastructureStack/app-cluster/app-scaling-group/LaunchConfig
  appclusterappscalinggroupASGB713DFDF:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MaxSize: "1"
      MinSize: "1"
      DesiredCapacity: "1"
      LaunchConfigurationName:
        Ref: appclusterappscalinggroupLaunchConfig41C606B2
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: InfrastructureStack/app-cluster/app-scaling-group
      VPCZoneIdentifier:
        - Ref: appclusterVpcPrivateSubnet1Subnet85B29794
        - Ref: appclusterVpcPrivateSubnet2Subnet04E6990A
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: true
    Metadata:
      aws:cdk:path: InfrastructureStack/app-cluster/app-scaling-group/ASG
  appclusterappscalinggroupDrainECSHookFunctionServiceRole2120A762:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Name
          Value: InfrastructureStack/app-cluster/app-scaling-group
    Metadata:
      aws:cdk:path: InfrastructureStack/app-cluster/app-scaling-group/DrainECSHook/Function/ServiceRole/Resource
  appclusterappscalinggroupDrainECSHookFunctionServiceRoleDefaultPolicy06CC49B1:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ec2:DescribeInstances
              - ec2:DescribeInstanceAttribute
              - ec2:DescribeInstanceStatus
              - ec2:DescribeHosts
            Effect: Allow
            Resource: "*"
          - Action: autoscaling:CompleteLifecycleAction
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":autoscaling:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :autoScalingGroup:*:autoScalingGroupName/
                  - Ref: appclusterappscalinggroupASGB713DFDF
          - Action:
              - ecs:DescribeContainerInstances
              - ecs:DescribeTasks
            Effect: Allow
            Resource: "*"
          - Action:
              - ecs:ListContainerInstances
              - ecs:SubmitContainerStateChange
              - ecs:SubmitTaskStateChange
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - appclusterD09F8E40
                - Arn
          - Action:
              - ecs:UpdateContainerInstancesState
              - ecs:ListTasks
            Condition:
              ArnEquals:
                ecs:cluster:
                  Fn::GetAtt:
                    - appclusterD09F8E40
                    - Arn
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: appclusterappscalinggroupDrainECSHookFunctionServiceRoleDefaultPolicy06CC49B1
      Roles:
        - Ref: appclusterappscalinggroupDrainECSHookFunctionServiceRole2120A762
    Metadata:
      aws:cdk:path: InfrastructureStack/app-cluster/app-scaling-group/DrainECSHook/Function/ServiceRole/DefaultPolicy/Resource
  appclusterappscalinggroupDrainECSHookFunctionE7F5D862:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3, json, os, time

          ecs = boto3.client('ecs')
          autoscaling = boto3.client('autoscaling')


          def lambda_handler(event, context):
            print(json.dumps(event))
            cluster = os.environ['CLUSTER']
            snsTopicArn = event['Records'][0]['Sns']['TopicArn']
            lifecycle_event = json.loads(event['Records'][0]['Sns']['Message'])
            instance_id = lifecycle_event.get('EC2InstanceId')
            if not instance_id:
              print('Got event without EC2InstanceId: %s', json.dumps(event))
              return

            instance_arn = container_instance_arn(cluster, instance_id)
            print('Instance %s has container instance ARN %s' % (lifecycle_event['EC2InstanceId'], instance_arn))

            if not instance_arn:
              return

            while has_tasks(cluster, instance_arn):
              time.sleep(10)

            try:
              print('Terminating instance %s' % instance_id)
              autoscaling.complete_lifecycle_action(
                  LifecycleActionResult='CONTINUE',
                  **pick(lifecycle_event, 'LifecycleHookName', 'LifecycleActionToken', 'AutoScalingGroupName'))
            except Exception as e:
              # Lifecycle action may have already completed.
              print(str(e))


          def container_instance_arn(cluster, instance_id):
            """Turn an instance ID into a container instance ARN."""
            arns = ecs.list_container_instances(cluster=cluster, filter='ec2InstanceId==' + instance_id)['containerInstanceArns']
            if not arns:
              return None
            return arns[0]


          def has_tasks(cluster, instance_arn):
            """Return True if the instance is running tasks for the given cluster."""
            instances = ecs.describe_container_instances(cluster=cluster, containerInstances=[instance_arn])['containerInstances']
            if not instances:
              return False
            instance = instances[0]

            if instance['status'] == 'ACTIVE':
              # Start draining, then try again later
              set_container_instance_to_draining(cluster, instance_arn)
              return True

            tasks = instance['runningTasksCount'] + instance['pendingTasksCount']
            print('Instance %s has %s tasks' % (instance_arn, tasks))

            return tasks > 0


          def set_container_instance_to_draining(cluster, instance_arn):
            ecs.update_container_instances_state(
                cluster=cluster,
                containerInstances=[instance_arn], status='DRAINING')


          def pick(dct, *keys):
            """Pick a subset of a dict."""
            return {k: v for k, v in dct.items() if k in keys}
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
          - appclusterappscalinggroupDrainECSHookFunctionServiceRole2120A762
          - Arn
      Runtime: python3.6
      Environment:
        Variables:
          CLUSTER:
            Ref: appclusterD09F8E40
      Tags:
        - Key: Name
          Value: InfrastructureStack/app-cluster/app-scaling-group
      Timeout: 310
    DependsOn:
      - appclusterappscalinggroupDrainECSHookFunctionServiceRoleDefaultPolicy06CC49B1
      - appclusterappscalinggroupDrainECSHookFunctionServiceRole2120A762
    Metadata:
      aws:cdk:path: InfrastructureStack/app-cluster/app-scaling-group/DrainECSHook/Function/Resource
  appclusterappscalinggroupDrainECSHookFunctionAllowInvokeInfrastructureStackappclusterappscalinggroupLifecycleHookDrainHookTopic0D408576DCD40231:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - appclusterappscalinggroupDrainECSHookFunctionE7F5D862
          - Arn
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: appclusterappscalinggroupLifecycleHookDrainHookTopic61DE31BC
    Metadata:
      aws:cdk:path: InfrastructureStack/app-cluster/app-scaling-group/DrainECSHook/Function/AllowInvoke:InfrastructureStackappclusterappscalinggroupLifecycleHookDrainHookTopic0D408576
  appclusterappscalinggroupDrainECSHookFunctionTopic278B053B:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      TopicArn:
        Ref: appclusterappscalinggroupLifecycleHookDrainHookTopic61DE31BC
      Endpoint:
        Fn::GetAtt:
          - appclusterappscalinggroupDrainECSHookFunctionE7F5D862
          - Arn
    Metadata:
      aws:cdk:path: InfrastructureStack/app-cluster/app-scaling-group/DrainECSHook/Function/Topic/Resource
  appclusterappscalinggroupLifecycleHookDrainHookRole0887DB95:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: autoscaling.amazonaws.com
        Version: "2012-10-17"
      Tags:
        - Key: Name
          Value: InfrastructureStack/app-cluster/app-scaling-group
    Metadata:
      aws:cdk:path: InfrastructureStack/app-cluster/app-scaling-group/LifecycleHookDrainHook/Role/Resource
  appclusterappscalinggroupLifecycleHookDrainHookRoleDefaultPolicy6287E17C:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: sns:Publish
            Effect: Allow
            Resource:
              Ref: appclusterappscalinggroupLifecycleHookDrainHookTopic61DE31BC
        Version: "2012-10-17"
      PolicyName: appclusterappscalinggroupLifecycleHookDrainHookRoleDefaultPolicy6287E17C
      Roles:
        - Ref: appclusterappscalinggroupLifecycleHookDrainHookRole0887DB95
    Metadata:
      aws:cdk:path: InfrastructureStack/app-cluster/app-scaling-group/LifecycleHookDrainHook/Role/DefaultPolicy/Resource
  appclusterappscalinggroupLifecycleHookDrainHookTopic61DE31BC:
    Type: AWS::SNS::Topic
    Properties:
      Tags:
        - Key: Name
          Value: InfrastructureStack/app-cluster/app-scaling-group
    Metadata:
      aws:cdk:path: InfrastructureStack/app-cluster/app-scaling-group/LifecycleHookDrainHook/Topic/Resource
  appclusterappscalinggroupLifecycleHookDrainHook566A67CB:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName:
        Ref: appclusterappscalinggroupASGB713DFDF
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
      DefaultResult: CONTINUE
      HeartbeatTimeout: 300
      NotificationTargetARN:
        Ref: appclusterappscalinggroupLifecycleHookDrainHookTopic61DE31BC
      RoleARN:
        Fn::GetAtt:
          - appclusterappscalinggroupLifecycleHookDrainHookRole0887DB95
          - Arn
    DependsOn:
      - appclusterappscalinggroupLifecycleHookDrainHookRoleDefaultPolicy6287E17C
      - appclusterappscalinggroupLifecycleHookDrainHookRole0887DB95
    Metadata:
      aws:cdk:path: InfrastructureStack/app-cluster/app-scaling-group/LifecycleHookDrainHook/Resource
  appserviceLBC4DC2B0C:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - Fn::GetAtt:
            - appserviceLBSecurityGroup9E323373
            - GroupId
      Subnets:
        - Ref: appclusterVpcPublicSubnet1Subnet1347BA62
        - Ref: appclusterVpcPublicSubnet2Subnet119BDD5B
      Type: application
    DependsOn:
      - appclusterVpcPublicSubnet1DefaultRouteB86F4432
      - appclusterVpcPublicSubnet2DefaultRouteDD35755B
    Metadata:
      aws:cdk:path: InfrastructureStack/app-service/LB/Resource
  appserviceLBSecurityGroup9E323373:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatically created Security Group for ELB InfrastructureStackappserviceLB1DE20F59
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Ref: appclusterVpcF4697FAF
    Metadata:
      aws:cdk:path: InfrastructureStack/app-service/LB/SecurityGroup/Resource
  appserviceLBSecurityGrouptoInfrastructureStackappclusterappscalinggroupInstanceSecurityGroup7201D41432768655358362A84F:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId:
        Fn::GetAtt:
          - appserviceLBSecurityGroup9E323373
          - GroupId
      IpProtocol: tcp
      Description: Load balancer to target
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - appclusterappscalinggroupInstanceSecurityGroup6409D719
          - GroupId
      FromPort: 32768
      ToPort: 65535
    Metadata:
      aws:cdk:path: InfrastructureStack/app-service/LB/SecurityGroup/to InfrastructureStackappclusterappscalinggroupInstanceSecurityGroup7201D414:32768-65535
  appserviceLBPublicListener4DB4103D:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: appserviceLBPublicListenerECSGroup6F797388
          Type: forward
      LoadBalancerArn:
        Ref: appserviceLBC4DC2B0C
      Port: 80
      Protocol: HTTP
    Metadata:
      aws:cdk:path: InfrastructureStack/app-service/LB/PublicListener/Resource
  appserviceLBPublicListenerECSGroup6F797388:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      TargetType: instance
      VpcId:
        Ref: appclusterVpcF4697FAF
    Metadata:
      aws:cdk:path: InfrastructureStack/app-service/LB/PublicListener/ECSGroup/Resource
  appserviceTaskDefTaskRole886327A2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: InfrastructureStack/app-service/TaskDef/TaskRole/Resource
  appserviceTaskDef8684ADAA:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Cpu: 5
          Essential: true
          Image:
            Fn::Join:
              - ""
              - - Fn::Select:
                    - 4
                    - Fn::Split:
                        - ":"
                        - Fn::GetAtt:
                            - jogocobrinha82CF8E2D
                            - Arn
                - .dkr.ecr.
                - Fn::Select:
                    - 3
                    - Fn::Split:
                        - ":"
                        - Fn::GetAtt:
                            - jogocobrinha82CF8E2D
                            - Arn
                - "."
                - Ref: AWS::URLSuffix
                - /
                - Ref: jogocobrinha82CF8E2D
                - :latest
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: appserviceTaskDefwebLogGroup1C0C3ED9
              awslogs-stream-prefix: app-service
              awslogs-region:
                Ref: AWS::Region
          Memory: 512
          Name: web
          PortMappings:
            - ContainerPort: 8080
              HostPort: 0
              Protocol: tcp
      ExecutionRoleArn:
        Fn::GetAtt:
          - appserviceTaskDefExecutionRoleE00FF5F3
          - Arn
      Family: InfrastructureStackappserviceTaskDefC13C0A18
      NetworkMode: bridge
      RequiresCompatibilities:
        - EC2
      TaskRoleArn:
        Fn::GetAtt:
          - appserviceTaskDefTaskRole886327A2
          - Arn
    Metadata:
      aws:cdk:path: InfrastructureStack/app-service/TaskDef/Resource
  appserviceTaskDefwebLogGroup1C0C3ED9:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: InfrastructureStack/app-service/TaskDef/web/LogGroup/Resource
  appserviceTaskDefExecutionRoleE00FF5F3:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: InfrastructureStack/app-service/TaskDef/ExecutionRole/Resource
  appserviceTaskDefExecutionRoleDefaultPolicyE5281270:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - jogocobrinha82CF8E2D
                - Arn
          - Action: ecr:GetAuthorizationToken
            Effect: Allow
            Resource: "*"
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - appserviceTaskDefwebLogGroup1C0C3ED9
                - Arn
        Version: "2012-10-17"
      PolicyName: appserviceTaskDefExecutionRoleDefaultPolicyE5281270
      Roles:
        - Ref: appserviceTaskDefExecutionRoleE00FF5F3
    Metadata:
      aws:cdk:path: InfrastructureStack/app-service/TaskDef/ExecutionRole/DefaultPolicy/Resource
  appserviceServiceB682C8C0:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: appclusterD09F8E40
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 1
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: EC2
      LoadBalancers:
        - ContainerName: web
          ContainerPort: 8080
          TargetGroupArn:
            Ref: appserviceLBPublicListenerECSGroup6F797388
      SchedulingStrategy: REPLICA
      ServiceName: jogo-cobrinha
      TaskDefinition:
        Ref: appserviceTaskDef8684ADAA
    DependsOn:
      - appserviceLBPublicListenerECSGroup6F797388
      - appserviceLBPublicListener4DB4103D
    Metadata:
      aws:cdk:path: InfrastructureStack/app-service/Service/Service
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Modules: aws-cdk=2.113.0,@aws-cdk/assets=1.39.0,@aws-cdk/aws-applicationautoscaling=1.39.0,@aws-cdk/aws-autoscaling=1.39.0,@aws-cdk/aws-autoscaling-common=1.39.0,@aws-cdk/aws-autoscaling-hooktargets=1.39.0,@aws-cdk/aws-certificatemanager=1.39.0,@aws-cdk/aws-cloudwatch=1.39.0,@aws-cdk/aws-ec2=1.39.0,@aws-cdk/aws-ecr=1.39.0,@aws-cdk/aws-ecr-assets=1.39.0,@aws-cdk/aws-ecs=1.39.0,@aws-cdk/aws-ecs-patterns=1.39.0,@aws-cdk/aws-elasticloadbalancingv2=1.39.0,@aws-cdk/aws-events=1.39.0,@aws-cdk/aws-events-targets=1.39.0,@aws-cdk/aws-iam=1.39.0,@aws-cdk/aws-kms=1.39.0,@aws-cdk/aws-lambda=1.39.0,@aws-cdk/aws-logs=1.39.0,@aws-cdk/aws-route53=1.39.0,@aws-cdk/aws-route53-targets=1.39.0,@aws-cdk/aws-s3=1.39.0,@aws-cdk/aws-s3-assets=1.39.0,@aws-cdk/aws-servicediscovery=1.39.0,@aws-cdk/aws-sns=1.39.0,@aws-cdk/aws-sns-subscriptions=1.39.0,@aws-cdk/aws-sqs=1.39.0,@aws-cdk/aws-ssm=1.39.0,@aws-cdk/cdk-assets-schema=1.39.0,@aws-cdk/cloud-assembly-schema=1.39.0,@aws-cdk/core=1.39.0,@aws-cdk/custom-resources=1.39.0,@aws-cdk/cx-api=1.39.0,@aws-cdk/region-info=1.39.0,jsii-runtime=node.js/v18.12.1
    Condition: CDKMetadataAvailable
Parameters:
  SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
Outputs:
  appserviceLoadBalancerDNS0A615BF5:
    Value:
      Fn::GetAtt:
        - appserviceLBC4DC2B0C
        - DNSName
  appserviceServiceURL90EC0456:
    Value:
      Fn::Join:
        - ""
        - - http://
          - Fn::GetAtt:
              - appserviceLBC4DC2B0C
              - DNSName
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - il-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - me-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2

