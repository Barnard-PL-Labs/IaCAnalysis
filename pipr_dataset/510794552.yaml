Resources:
  VPCB9E5F0B4:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: ExampleLambdaToEcsStack/VPC
    Metadata:
      aws:cdk:path: ExampleLambdaToEcsStack/VPC/Resource
  VPCPublicSubnet1SubnetB4246D30:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 10.0.0.0/18
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: ExampleLambdaToEcsStack/VPC/PublicSubnet1
    Metadata:
      aws:cdk:path: ExampleLambdaToEcsStack/VPC/PublicSubnet1/Subnet
  VPCPublicSubnet1RouteTableFEE4B781:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      Tags:
        - Key: Name
          Value: ExampleLambdaToEcsStack/VPC/PublicSubnet1
    Metadata:
      aws:cdk:path: ExampleLambdaToEcsStack/VPC/PublicSubnet1/RouteTable
  VPCPublicSubnet1RouteTableAssociation0B0896DC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCPublicSubnet1RouteTableFEE4B781
      SubnetId:
        Ref: VPCPublicSubnet1SubnetB4246D30
    Metadata:
      aws:cdk:path: ExampleLambdaToEcsStack/VPC/PublicSubnet1/RouteTableAssociation
  VPCPublicSubnet1DefaultRoute91CEF279:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VPCPublicSubnet1RouteTableFEE4B781
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VPCIGWB7E252D3
    DependsOn:
      - VPCVPCGW99B986DC
    Metadata:
      aws:cdk:path: ExampleLambdaToEcsStack/VPC/PublicSubnet1/DefaultRoute
  VPCPublicSubnet1EIP6AD938E8:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: ExampleLambdaToEcsStack/VPC/PublicSubnet1
    Metadata:
      aws:cdk:path: ExampleLambdaToEcsStack/VPC/PublicSubnet1/EIP
  VPCPublicSubnet1NATGatewayE0556630:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId:
        Ref: VPCPublicSubnet1SubnetB4246D30
      AllocationId:
        Fn::GetAtt:
          - VPCPublicSubnet1EIP6AD938E8
          - AllocationId
      Tags:
        - Key: Name
          Value: ExampleLambdaToEcsStack/VPC/PublicSubnet1
    Metadata:
      aws:cdk:path: ExampleLambdaToEcsStack/VPC/PublicSubnet1/NATGateway
  VPCPublicSubnet2Subnet74179F39:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: 10.0.64.0/18
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: ExampleLambdaToEcsStack/VPC/PublicSubnet2
    Metadata:
      aws:cdk:path: ExampleLambdaToEcsStack/VPC/PublicSubnet2/Subnet
  VPCPublicSubnet2RouteTable6F1A15F1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      Tags:
        - Key: Name
          Value: ExampleLambdaToEcsStack/VPC/PublicSubnet2
    Metadata:
      aws:cdk:path: ExampleLambdaToEcsStack/VPC/PublicSubnet2/RouteTable
  VPCPublicSubnet2RouteTableAssociation5A808732:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCPublicSubnet2RouteTable6F1A15F1
      SubnetId:
        Ref: VPCPublicSubnet2Subnet74179F39
    Metadata:
      aws:cdk:path: ExampleLambdaToEcsStack/VPC/PublicSubnet2/RouteTableAssociation
  VPCPublicSubnet2DefaultRouteB7481BBA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VPCPublicSubnet2RouteTable6F1A15F1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VPCIGWB7E252D3
    DependsOn:
      - VPCVPCGW99B986DC
    Metadata:
      aws:cdk:path: ExampleLambdaToEcsStack/VPC/PublicSubnet2/DefaultRoute
  VPCPublicSubnet2EIP4947BC00:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: ExampleLambdaToEcsStack/VPC/PublicSubnet2
    Metadata:
      aws:cdk:path: ExampleLambdaToEcsStack/VPC/PublicSubnet2/EIP
  VPCPublicSubnet2NATGateway3C070193:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId:
        Ref: VPCPublicSubnet2Subnet74179F39
      AllocationId:
        Fn::GetAtt:
          - VPCPublicSubnet2EIP4947BC00
          - AllocationId
      Tags:
        - Key: Name
          Value: ExampleLambdaToEcsStack/VPC/PublicSubnet2
    Metadata:
      aws:cdk:path: ExampleLambdaToEcsStack/VPC/PublicSubnet2/NATGateway
  VPCPrivateSubnet1Subnet8BCA10E0:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 10.0.128.0/18
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: ExampleLambdaToEcsStack/VPC/PrivateSubnet1
    Metadata:
      aws:cdk:path: ExampleLambdaToEcsStack/VPC/PrivateSubnet1/Subnet
  VPCPrivateSubnet1RouteTableBE8A6027:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      Tags:
        - Key: Name
          Value: ExampleLambdaToEcsStack/VPC/PrivateSubnet1
    Metadata:
      aws:cdk:path: ExampleLambdaToEcsStack/VPC/PrivateSubnet1/RouteTable
  VPCPrivateSubnet1RouteTableAssociation347902D1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCPrivateSubnet1RouteTableBE8A6027
      SubnetId:
        Ref: VPCPrivateSubnet1Subnet8BCA10E0
    Metadata:
      aws:cdk:path: ExampleLambdaToEcsStack/VPC/PrivateSubnet1/RouteTableAssociation
  VPCPrivateSubnet1DefaultRouteAE1D6490:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VPCPrivateSubnet1RouteTableBE8A6027
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: VPCPublicSubnet1NATGatewayE0556630
    Metadata:
      aws:cdk:path: ExampleLambdaToEcsStack/VPC/PrivateSubnet1/DefaultRoute
  VPCPrivateSubnet2SubnetCFCDAA7A:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: 10.0.192.0/18
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: ExampleLambdaToEcsStack/VPC/PrivateSubnet2
    Metadata:
      aws:cdk:path: ExampleLambdaToEcsStack/VPC/PrivateSubnet2/Subnet
  VPCPrivateSubnet2RouteTable0A19E10E:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      Tags:
        - Key: Name
          Value: ExampleLambdaToEcsStack/VPC/PrivateSubnet2
    Metadata:
      aws:cdk:path: ExampleLambdaToEcsStack/VPC/PrivateSubnet2/RouteTable
  VPCPrivateSubnet2RouteTableAssociation0C73D413:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCPrivateSubnet2RouteTable0A19E10E
      SubnetId:
        Ref: VPCPrivateSubnet2SubnetCFCDAA7A
    Metadata:
      aws:cdk:path: ExampleLambdaToEcsStack/VPC/PrivateSubnet2/RouteTableAssociation
  VPCPrivateSubnet2DefaultRouteF4F5CFD2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VPCPrivateSubnet2RouteTable0A19E10E
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: VPCPublicSubnet2NATGateway3C070193
    Metadata:
      aws:cdk:path: ExampleLambdaToEcsStack/VPC/PrivateSubnet2/DefaultRoute
  VPCIGWB7E252D3:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: ExampleLambdaToEcsStack/VPC
    Metadata:
      aws:cdk:path: ExampleLambdaToEcsStack/VPC/IGW
  VPCVPCGW99B986DC:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      InternetGatewayId:
        Ref: VPCIGWB7E252D3
    Metadata:
      aws:cdk:path: ExampleLambdaToEcsStack/VPC/VPCGW
  ECRRepoC36DC9E6:
    Type: AWS::ECR::Repository
    Properties:
      LifecyclePolicy:
        LifecyclePolicyText: '{"rules":[{"rulePriority":1,"selection":{"tagStatus":"any","countType":"imageCountMoreThan","countNumber":5},"action":{"type":"expire"}}]}'
      RepositoryName: example-lambda-to-ecs-stack-processor-repository
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: ExampleLambdaToEcsStack/ECRRepo/Resource
  ECSCluster7D463CD4:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: example-lambda-to-ecs-stack-cluster
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
    Metadata:
      aws:cdk:path: ExampleLambdaToEcsStack/ECSCluster/Resource
  ECSTaskDefTaskRoleF66749D3:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: ExampleLambdaToEcsStack/ECSTaskDef/TaskRole/Resource
  ECSTaskDefTaskRoleDefaultPolicyD85E59EF:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: ecs:StartTelemetrySession
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: ECSTaskDefTaskRoleDefaultPolicyD85E59EF
      Roles:
        - Ref: ECSTaskDefTaskRoleF66749D3
    Metadata:
      aws:cdk:path: ExampleLambdaToEcsStack/ECSTaskDef/TaskRole/DefaultPolicy/Resource
  ECSTaskDef925013F7:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Environment:
            - Name: NORMAL_ENV_VAR
              Value: example
          Essential: true
          Image:
            Fn::Join:
              - ""
              - - Fn::Select:
                    - 4
                    - Fn::Split:
                        - ":"
                        - Fn::GetAtt:
                            - ECRRepoC36DC9E6
                            - Arn
                - .dkr.ecr.
                - Fn::Select:
                    - 3
                    - Fn::Split:
                        - ":"
                        - Fn::GetAtt:
                            - ECRRepoC36DC9E6
                            - Arn
                - "."
                - Ref: AWS::URLSuffix
                - /
                - Ref: ECRRepoC36DC9E6
                - :latest
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: ECSTaskDefECSContainerLogGroupCFC93334
              awslogs-stream-prefix: example-lambda-to-ecs-stack-container-logs
              awslogs-region:
                Ref: AWS::Region
          Name: example-lambda-to-ecs-stack-container
          Secrets: []
      Cpu: "1024"
      ExecutionRoleArn:
        Fn::GetAtt:
          - ECSTaskDefExecutionRole0FBFA07E
          - Arn
      Family: example-lambda-to-ecs-stack-task-definition
      Memory: "2048"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::GetAtt:
          - ECSTaskDefTaskRoleF66749D3
          - Arn
    Metadata:
      aws:cdk:path: ExampleLambdaToEcsStack/ECSTaskDef/Resource
  ECSTaskDefECSContainerLogGroupCFC93334:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: ExampleLambdaToEcsStack/ECSTaskDef/ECSContainer/LogGroup/Resource
  ECSTaskDefExecutionRole0FBFA07E:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: ExampleLambdaToEcsStack/ECSTaskDef/ExecutionRole/Resource
  ECSTaskDefExecutionRoleDefaultPolicy1D783311:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:BatchGetImage
              - ecr:GetDownloadUrlForLayer
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - ECRRepoC36DC9E6
                - Arn
          - Action: ecr:GetAuthorizationToken
            Effect: Allow
            Resource: "*"
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - ECSTaskDefECSContainerLogGroupCFC93334
                - Arn
        Version: "2012-10-17"
      PolicyName: ECSTaskDefExecutionRoleDefaultPolicy1D783311
      Roles:
        - Ref: ECSTaskDefExecutionRole0FBFA07E
    Metadata:
      aws:cdk:path: ExampleLambdaToEcsStack/ECSTaskDef/ExecutionRole/DefaultPolicy/Resource
  lambdrole063899D2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              AWS: "*"
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action: ecs:RunTask
                Effect: Allow
                Resource:
                  Ref: ECSTaskDef925013F7
              - Action: iam:PassRole
                Effect: Allow
                Resource: "*"
              - Action: ecs:DescribeTasks
                Effect: Allow
                Resource:
                  Fn::GetAtt:
                    - ECSCluster7D463CD4
                    - Arn
            Version: "2012-10-17"
          PolicyName: inline-lambda-trigger-policy
    Metadata:
      aws:cdk:path: ExampleLambdaToEcsStack/lambd-role/Resource
  TaskTriggerLambda8067425D:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 1ac58a12ff4382187bd70e69f9101f69fff6ddae8e4132af21ea87fabae2f102.zip
      Role:
        Fn::GetAtt:
          - lambdrole063899D2
          - Arn
      Environment:
        Variables:
          ECS_TASK_ARN:
            Ref: ECSTaskDef925013F7
          ECS_CLUSTER_ARN:
            Fn::GetAtt:
              - ECSCluster7D463CD4
              - Arn
          SUBNET_IDS:
            Fn::Join:
              - ""
              - - Ref: VPCPrivateSubnet1Subnet8BCA10E0
                - ","
                - Ref: VPCPrivateSubnet2SubnetCFCDAA7A
          ECS_CONTAINER_NAME: example-lambda-to-ecs-stack-container
      Handler: trigger-task.handler
      Runtime: nodejs14.x
    DependsOn:
      - lambdrole063899D2
    Metadata:
      aws:cdk:path: ExampleLambdaToEcsStack/TaskTriggerLambda/Resource
      aws:asset:path: asset.1ac58a12ff4382187bd70e69f9101f69fff6ddae8e4132af21ea87fabae2f102
      aws:asset:is-bundled: false
      aws:asset:property: Code
  TaskCleanupLambda3DD74BA8:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 1ac58a12ff4382187bd70e69f9101f69fff6ddae8e4132af21ea87fabae2f102.zip
      Role:
        Fn::GetAtt:
          - lambdrole063899D2
          - Arn
      Environment:
        Variables:
          ECS_CLUSTER_ARN:
            Fn::GetAtt:
              - ECSCluster7D463CD4
              - Arn
      Handler: tidy-up-ecs-tasks.handler
      Runtime: nodejs14.x
    DependsOn:
      - lambdrole063899D2
    Metadata:
      aws:cdk:path: ExampleLambdaToEcsStack/TaskCleanupLambda/Resource
      aws:asset:path: asset.1ac58a12ff4382187bd70e69f9101f69fff6ddae8e4132af21ea87fabae2f102
      aws:asset:is-bundled: false
      aws:asset:property: Code
  Alarmtopic47C5F6D0:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: example-lambda-to-ecs-stack-ecs-alarm-topic
    Metadata:
      aws:cdk:path: ExampleLambdaToEcsStack/Alarm topic/Resource
  Alarmtopicexampleemailaddresscouk77DC9C20:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn:
        Ref: Alarmtopic47C5F6D0
      Endpoint: example@email-address.co.uk
    Metadata:
      aws:cdk:path: ExampleLambdaToEcsStack/Alarm topic/example@email-address.co.uk/Resource
  CPUHighDA3624EF:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      AlarmActions:
        - Ref: Alarmtopic47C5F6D0
      Metrics:
        - Expression: utilized / reserved
          Id: expr_1
        - Id: utilized
          MetricStat:
            Metric:
              Dimensions:
                - Name: ClusterName
                  Value:
                    Ref: ECSCluster7D463CD4
              MetricName: CpuUtilized
              Namespace: ECS/ContainerInsights
            Period: 300
            Stat: Average
          ReturnData: false
        - Id: reserved
          MetricStat:
            Metric:
              Dimensions:
                - Name: ClusterName
                  Value:
                    Ref: ECSCluster7D463CD4
              MetricName: CpuReserved
              Namespace: ECS/ContainerInsights
            Period: 300
            Stat: Average
          ReturnData: false
      Threshold: 0.9
    Metadata:
      aws:cdk:path: ExampleLambdaToEcsStack/CPUHigh/Resource
  MemoryUtilHighAB34D9E2:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      AlarmActions:
        - Ref: Alarmtopic47C5F6D0
      Metrics:
        - Expression: utilized / reserved
          Id: expr_1
        - Id: utilized
          MetricStat:
            Metric:
              Dimensions:
                - Name: ClusterName
                  Value:
                    Ref: ECSCluster7D463CD4
              MetricName: MemoryUtilized
              Namespace: ECS/ContainerInsights
            Period: 300
            Stat: Average
          ReturnData: false
        - Id: reserved
          MetricStat:
            Metric:
              Dimensions:
                - Name: ClusterName
                  Value:
                    Ref: ECSCluster7D463CD4
              MetricName: MemoryReserved
              Namespace: ECS/ContainerInsights
            Period: 300
            Stat: Average
          ReturnData: false
      Threshold: 0.9
    Metadata:
      aws:cdk:path: ExampleLambdaToEcsStack/MemoryUtilHigh/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/12RwW7CMAyGn2X3kI1y2bWwDSFNU1UQV5SmBgxtXMUJaKr67ktauk47+fNvy7/jJDJZyJcndeeZLq+zCgvZbp3SVxGkQws6ke2+0WJ1NPtsJTJfVKi3vjDgojZRTt7BThUVTPqkpcykUTkk89sc4X2TxfCl3Fo5uKtvkVm8BZwGb4wDG3hsGDZ5ZKkLu55rMK4ToK1sc2iI0ZHtG6csllm2q8pzGBdrI+4UX9/giAbH7f4rZJxCA3bSOoGqDmY0vLaPGYXL9K4DdaKiU7D8pNPakm9iZeRQU3VRKtl+eKNH35E7wYuDYgbHMo0h5HLp9RXcUjEINmHsjhrsv2WAcC/WFptx1t+8E7oiX96V02fZppWydWzpoetEDkzeahC9V/j8E5rTcL1HIV6LTPl4uqES5IWfb/NXOU/k/OnCiDPrjcMaZD7EHyVchvxYAgAA
    Metadata:
      aws:cdk:path: ExampleLambdaToEcsStack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
Rules:
  CheckBootstrapVersion:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::Contains:
                - - "1"
                  - "2"
                  - "3"
                  - "4"
                  - "5"
                - Ref: BootstrapVersion
        AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.

