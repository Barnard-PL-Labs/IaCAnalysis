Resources:
  Vpc8378EB38:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: LoadTestStack/Vpc
    Metadata:
      aws:cdk:path: LoadTestStack/Vpc/Resource
  VpcPublicSubnet1Subnet5C2D37C4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: Vpc8378EB38
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 10.0.0.0/18
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: LoadTestStack/Vpc/PublicSubnet1
    Metadata:
      aws:cdk:path: LoadTestStack/Vpc/PublicSubnet1/Subnet
  VpcPublicSubnet1RouteTable6C95E38E:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc8378EB38
      Tags:
        - Key: Name
          Value: LoadTestStack/Vpc/PublicSubnet1
    Metadata:
      aws:cdk:path: LoadTestStack/Vpc/PublicSubnet1/RouteTable
  VpcPublicSubnet1RouteTableAssociation97140677:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcPublicSubnet1RouteTable6C95E38E
      SubnetId:
        Ref: VpcPublicSubnet1Subnet5C2D37C4
    Metadata:
      aws:cdk:path: LoadTestStack/Vpc/PublicSubnet1/RouteTableAssociation
  VpcPublicSubnet1DefaultRoute3DA9E72A:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VpcPublicSubnet1RouteTable6C95E38E
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VpcIGWD7BA715C
    DependsOn:
      - VpcVPCGWBF912B6E
    Metadata:
      aws:cdk:path: LoadTestStack/Vpc/PublicSubnet1/DefaultRoute
  VpcPublicSubnet1EIPD7E02669:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: LoadTestStack/Vpc/PublicSubnet1
    Metadata:
      aws:cdk:path: LoadTestStack/Vpc/PublicSubnet1/EIP
  VpcPublicSubnet1NATGateway4D7517AA:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId:
        Ref: VpcPublicSubnet1Subnet5C2D37C4
      AllocationId:
        Fn::GetAtt:
          - VpcPublicSubnet1EIPD7E02669
          - AllocationId
      Tags:
        - Key: Name
          Value: LoadTestStack/Vpc/PublicSubnet1
    DependsOn:
      - VpcPublicSubnet1DefaultRoute3DA9E72A
      - VpcPublicSubnet1RouteTableAssociation97140677
    Metadata:
      aws:cdk:path: LoadTestStack/Vpc/PublicSubnet1/NATGateway
  VpcPublicSubnet2Subnet691E08A3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: Vpc8378EB38
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: 10.0.64.0/18
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: LoadTestStack/Vpc/PublicSubnet2
    Metadata:
      aws:cdk:path: LoadTestStack/Vpc/PublicSubnet2/Subnet
  VpcPublicSubnet2RouteTable94F7E489:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc8378EB38
      Tags:
        - Key: Name
          Value: LoadTestStack/Vpc/PublicSubnet2
    Metadata:
      aws:cdk:path: LoadTestStack/Vpc/PublicSubnet2/RouteTable
  VpcPublicSubnet2RouteTableAssociationDD5762D8:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcPublicSubnet2RouteTable94F7E489
      SubnetId:
        Ref: VpcPublicSubnet2Subnet691E08A3
    Metadata:
      aws:cdk:path: LoadTestStack/Vpc/PublicSubnet2/RouteTableAssociation
  VpcPublicSubnet2DefaultRoute97F91067:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VpcPublicSubnet2RouteTable94F7E489
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VpcIGWD7BA715C
    DependsOn:
      - VpcVPCGWBF912B6E
    Metadata:
      aws:cdk:path: LoadTestStack/Vpc/PublicSubnet2/DefaultRoute
  VpcPrivateSubnet1Subnet536B997A:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: Vpc8378EB38
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 10.0.128.0/18
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: LoadTestStack/Vpc/PrivateSubnet1
    Metadata:
      aws:cdk:path: LoadTestStack/Vpc/PrivateSubnet1/Subnet
  VpcPrivateSubnet1RouteTableB2C5B500:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc8378EB38
      Tags:
        - Key: Name
          Value: LoadTestStack/Vpc/PrivateSubnet1
    Metadata:
      aws:cdk:path: LoadTestStack/Vpc/PrivateSubnet1/RouteTable
  VpcPrivateSubnet1RouteTableAssociation70C59FA6:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcPrivateSubnet1RouteTableB2C5B500
      SubnetId:
        Ref: VpcPrivateSubnet1Subnet536B997A
    Metadata:
      aws:cdk:path: LoadTestStack/Vpc/PrivateSubnet1/RouteTableAssociation
  VpcPrivateSubnet1DefaultRouteBE02A9ED:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VpcPrivateSubnet1RouteTableB2C5B500
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: VpcPublicSubnet1NATGateway4D7517AA
    Metadata:
      aws:cdk:path: LoadTestStack/Vpc/PrivateSubnet1/DefaultRoute
  VpcPrivateSubnet2Subnet3788AAA1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: Vpc8378EB38
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: 10.0.192.0/18
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: LoadTestStack/Vpc/PrivateSubnet2
    Metadata:
      aws:cdk:path: LoadTestStack/Vpc/PrivateSubnet2/Subnet
  VpcPrivateSubnet2RouteTableA678073B:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc8378EB38
      Tags:
        - Key: Name
          Value: LoadTestStack/Vpc/PrivateSubnet2
    Metadata:
      aws:cdk:path: LoadTestStack/Vpc/PrivateSubnet2/RouteTable
  VpcPrivateSubnet2RouteTableAssociationA89CAD56:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcPrivateSubnet2RouteTableA678073B
      SubnetId:
        Ref: VpcPrivateSubnet2Subnet3788AAA1
    Metadata:
      aws:cdk:path: LoadTestStack/Vpc/PrivateSubnet2/RouteTableAssociation
  VpcPrivateSubnet2DefaultRoute060D2087:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VpcPrivateSubnet2RouteTableA678073B
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: VpcPublicSubnet1NATGateway4D7517AA
    Metadata:
      aws:cdk:path: LoadTestStack/Vpc/PrivateSubnet2/DefaultRoute
  VpcIGWD7BA715C:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: LoadTestStack/Vpc
    Metadata:
      aws:cdk:path: LoadTestStack/Vpc/IGW
  VpcVPCGWBF912B6E:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: Vpc8378EB38
      InternetGatewayId:
        Ref: VpcIGWD7BA715C
    Metadata:
      aws:cdk:path: LoadTestStack/Vpc/VPCGW
  VpcFlowLogS3FlowLogCC5B61E6:
    Type: AWS::EC2::FlowLog
    Properties:
      ResourceId:
        Ref: Vpc8378EB38
      ResourceType: VPC
      TrafficType: ALL
      LogDestination:
        Fn::Join:
          - ""
          - - Fn::GetAtt:
                - LogBucketCC3B17E8
                - Arn
            - /vpcFlowLog
      LogDestinationType: s3
      Tags:
        - Key: Name
          Value: LoadTestStack/Vpc
    DependsOn:
      - LogBucketAutoDeleteObjectsCustomResource7762F42C
      - LogBucketPolicy900DBE48
      - LogBucketCC3B17E8
    Metadata:
      aws:cdk:path: LoadTestStack/Vpc/FlowLogS3/FlowLog
  LogBucketCC3B17E8:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: aws-cdk:auto-delete-objects
          Value: "true"
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: LoadTestStack/LogBucket/Resource
  LogBucketPolicy900DBE48:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: LogBucketCC3B17E8
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetBucket*
              - s3:List*
              - s3:DeleteObject*
            Effect: Allow
            Principal:
              AWS:
                Fn::GetAtt:
                  - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
                  - Arn
            Resource:
              - Fn::GetAtt:
                  - LogBucketCC3B17E8
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - LogBucketCC3B17E8
                        - Arn
                    - /*
          - Action:
              - s3:PutObject
              - s3:PutObjectLegalHold
              - s3:PutObjectRetention
              - s3:PutObjectTagging
              - s3:PutObjectVersionTagging
              - s3:Abort*
            Effect: Allow
            Principal:
              AWS:
                Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - :iam::797873946194:root
            Resource:
              Fn::Join:
                - ""
                - - Fn::GetAtt:
                      - LogBucketCC3B17E8
                      - Arn
                  - /locustAlbAccessLog/AWSLogs/
                  - Ref: AWS::AccountId
                  - /*
          - Action: s3:PutObject
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Resource:
              Fn::Join:
                - ""
                - - Fn::GetAtt:
                      - LogBucketCC3B17E8
                      - Arn
                  - /locustAlbAccessLog/AWSLogs/
                  - Ref: AWS::AccountId
                  - /*
          - Action: s3:GetBucketAcl
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Resource:
              Fn::GetAtt:
                - LogBucketCC3B17E8
                - Arn
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: LoadTestStack/LogBucket/Policy/Resource
  LogBucketAutoDeleteObjectsCustomResource7762F42C:
    Type: Custom::S3AutoDeleteObjects
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F
          - Arn
      BucketName:
        Ref: LogBucketCC3B17E8
    DependsOn:
      - LogBucketPolicy900DBE48
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: LoadTestStack/LogBucket/AutoDeleteObjectsCustomResource/Default
  CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: LoadTestStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Role
  CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-us-west-2
        S3Key: e57c1acaa363d7d2b81736776007a7091bc73dff4aeb8135627c4511a51e7dca.zip
      Timeout: 900
      MemorySize: 128
      Handler: __entrypoint__.handler
      Role:
        Fn::GetAtt:
          - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
          - Arn
      Runtime: nodejs14.x
      Description:
        Fn::Join:
          - ""
          - - "Lambda function for auto-deleting objects in "
            - Ref: LogBucketCC3B17E8
            - " S3 bucket."
    DependsOn:
      - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
    Metadata:
      aws:cdk:path: LoadTestStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Handler
      aws:asset:path: asset.e57c1acaa363d7d2b81736776007a7091bc73dff4aeb8135627c4511a51e7dca
      aws:asset:property: Code
  ClusterEB0386A7:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
    Metadata:
      aws:cdk:path: LoadTestStack/Cluster/Resource
  ClusterDefaultServiceDiscoveryNamespaceC336F9B4:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: locust
      Vpc:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: LoadTestStack/Cluster/DefaultServiceDiscoveryNamespace/Resource
  MasterTaskDefinitionTaskRole4D5064F8:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: LoadTestStack/Master/TaskDefinition/TaskRole/Resource
  MasterTaskDefinition1C9B90C0:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Command:
            - --master
          Essential: true
          Image:
            Fn::Sub: ${AWS::AccountId}.dkr.ecr.us-west-2.${AWS::URLSuffix}/cdk-hnb659fds-container-assets-${AWS::AccountId}-us-west-2:a74a7c24e409fc89d6317c2ff4aa4c7e3a1d86f887c037ac797018cc1cff9b3a
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: MasterTaskDefinitionlocustLogGroupC83D6DB3
              awslogs-stream-prefix: locust-master
              awslogs-region: us-west-2
          Name: locust
          PortMappings:
            - ContainerPort: 8089
              Protocol: tcp
      Cpu: "1024"
      ExecutionRoleArn:
        Fn::GetAtt:
          - MasterTaskDefinitionExecutionRoleB4264D23
          - Arn
      Family: LoadTestStackMasterTaskDefinition36A558DC
      Memory: "2048"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::GetAtt:
          - MasterTaskDefinitionTaskRole4D5064F8
          - Arn
    Metadata:
      aws:cdk:path: LoadTestStack/Master/TaskDefinition/Resource
  MasterTaskDefinitionlocustLogGroupC83D6DB3:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 180
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: LoadTestStack/Master/TaskDefinition/locust/LogGroup/Resource
  MasterTaskDefinitionExecutionRoleB4264D23:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: LoadTestStack/Master/TaskDefinition/ExecutionRole/Resource
  MasterTaskDefinitionExecutionRoleDefaultPolicyD32D6D8E:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":ecr:us-west-2:"
                  - Ref: AWS::AccountId
                  - :repository/
                  - Fn::Sub: cdk-hnb659fds-container-assets-${AWS::AccountId}-us-west-2
          - Action: ecr:GetAuthorizationToken
            Effect: Allow
            Resource: "*"
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - MasterTaskDefinitionlocustLogGroupC83D6DB3
                - Arn
        Version: "2012-10-17"
      PolicyName: MasterTaskDefinitionExecutionRoleDefaultPolicyD32D6D8E
      Roles:
        - Ref: MasterTaskDefinitionExecutionRoleB4264D23
    Metadata:
      aws:cdk:path: LoadTestStack/Master/TaskDefinition/ExecutionRole/DefaultPolicy/Resource
  MasterServiceLBA62FC209:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: "false"
        - Key: access_logs.s3.enabled
          Value: "true"
        - Key: access_logs.s3.bucket
          Value:
            Ref: LogBucketCC3B17E8
        - Key: access_logs.s3.prefix
          Value: locustAlbAccessLog
      Scheme: internet-facing
      SecurityGroups:
        - Fn::GetAtt:
            - MasterServiceLBSecurityGroupD08B195F
            - GroupId
      Subnets:
        - Ref: VpcPublicSubnet1Subnet5C2D37C4
        - Ref: VpcPublicSubnet2Subnet691E08A3
      Type: application
    DependsOn:
      - LogBucketAutoDeleteObjectsCustomResource7762F42C
      - LogBucketPolicy900DBE48
      - LogBucketCC3B17E8
      - VpcPublicSubnet1DefaultRoute3DA9E72A
      - VpcPublicSubnet1RouteTableAssociation97140677
      - VpcPublicSubnet2DefaultRoute97F91067
      - VpcPublicSubnet2RouteTableAssociationDD5762D8
    Metadata:
      aws:cdk:path: LoadTestStack/Master/Service/LB/Resource
  MasterServiceLBSecurityGroupD08B195F:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatically created Security Group for ELB LoadTestStackMasterServiceLB5152C222
      SecurityGroupIngress:
        - CidrIp: 127.0.0.1/32
          Description: from 127.0.0.1/32:80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Ref: Vpc8378EB38
    DependsOn:
      - LogBucketAutoDeleteObjectsCustomResource7762F42C
      - LogBucketPolicy900DBE48
      - LogBucketCC3B17E8
    Metadata:
      aws:cdk:path: LoadTestStack/Master/Service/LB/SecurityGroup/Resource
  MasterServiceLBSecurityGrouptoLoadTestStackMasterServiceSecurityGroup2FFF9C918089E7DDDEF6:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId:
        Fn::GetAtt:
          - MasterServiceLBSecurityGroupD08B195F
          - GroupId
      IpProtocol: tcp
      Description: Load balancer to target
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - MasterServiceSecurityGroup15959E4E
          - GroupId
      FromPort: 8089
      ToPort: 8089
    DependsOn:
      - LogBucketAutoDeleteObjectsCustomResource7762F42C
      - LogBucketPolicy900DBE48
      - LogBucketCC3B17E8
    Metadata:
      aws:cdk:path: LoadTestStack/Master/Service/LB/SecurityGroup/to LoadTestStackMasterServiceSecurityGroup2FFF9C91:8089
  MasterServiceLBPublicListener6927AEE3:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: MasterServiceLBPublicListenerECSGroup2ADF8BD2
          Type: forward
      LoadBalancerArn:
        Ref: MasterServiceLBA62FC209
      Port: 80
      Protocol: HTTP
    DependsOn:
      - LogBucketAutoDeleteObjectsCustomResource7762F42C
      - LogBucketPolicy900DBE48
      - LogBucketCC3B17E8
    Metadata:
      aws:cdk:path: LoadTestStack/Master/Service/LB/PublicListener/Resource
  MasterServiceLBPublicListenerECSGroup2ADF8BD2:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200,401
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: "false"
        - Key: deregistration_delay.timeout_seconds
          Value: "10"
      TargetType: ip
      VpcId:
        Ref: Vpc8378EB38
    DependsOn:
      - LogBucketAutoDeleteObjectsCustomResource7762F42C
      - LogBucketPolicy900DBE48
      - LogBucketCC3B17E8
    Metadata:
      aws:cdk:path: LoadTestStack/Master/Service/LB/PublicListener/ECSGroup/Resource
  MasterService71606C9C:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: ClusterEB0386A7
      DeploymentConfiguration:
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 20
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: locust
          ContainerPort: 8089
          TargetGroupArn:
            Ref: MasterServiceLBPublicListenerECSGroup2ADF8BD2
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::GetAtt:
                - MasterServiceSecurityGroup15959E4E
                - GroupId
          Subnets:
            - Ref: VpcPrivateSubnet1Subnet536B997A
            - Ref: VpcPrivateSubnet2Subnet3788AAA1
      ServiceRegistries:
        - RegistryArn:
            Fn::GetAtt:
              - MasterServiceCloudmapService131FE122
              - Arn
      TaskDefinition:
        Ref: MasterTaskDefinition1C9B90C0
    DependsOn:
      - MasterServiceLBPublicListenerECSGroup2ADF8BD2
      - MasterServiceLBPublicListener6927AEE3
    Metadata:
      aws:cdk:path: LoadTestStack/Master/Service/Service/Service
  MasterServiceCloudmapService131FE122:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        NamespaceId:
          Fn::GetAtt:
            - ClusterDefaultServiceDiscoveryNamespaceC336F9B4
            - Id
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: master
      NamespaceId:
        Fn::GetAtt:
          - ClusterDefaultServiceDiscoveryNamespaceC336F9B4
          - Id
    Metadata:
      aws:cdk:path: LoadTestStack/Master/Service/Service/CloudmapService/Resource
  MasterServiceSecurityGroup15959E4E:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: LoadTestStack/Master/Service/Service/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: LoadTestStack/Master/Service/Service/SecurityGroup/Resource
  MasterServiceSecurityGroupfromLoadTestStackMasterServiceLBSecurityGroup1D9A011B8089DEA58041:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort: 8089
      GroupId:
        Fn::GetAtt:
          - MasterServiceSecurityGroup15959E4E
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - MasterServiceLBSecurityGroupD08B195F
          - GroupId
      ToPort: 8089
    Metadata:
      aws:cdk:path: LoadTestStack/Master/Service/Service/SecurityGroup/from LoadTestStackMasterServiceLBSecurityGroup1D9A011B:8089
  MasterServiceSecurityGroupfromLoadTestStackWorkerServiceSecurityGroup464678C0555796DDDE6B:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: from LoadTestStackWorkerServiceSecurityGroup464678C0:5557
      FromPort: 5557
      GroupId:
        Fn::GetAtt:
          - MasterServiceSecurityGroup15959E4E
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - WorkerServiceSecurityGroup31B1E69F
          - GroupId
      ToPort: 5557
    Metadata:
      aws:cdk:path: LoadTestStack/Master/Service/Service/SecurityGroup/from LoadTestStackWorkerServiceSecurityGroup464678C0:5557
  WorkerTaskDefinitionTaskRoleDCDA51F5:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: LoadTestStack/Worker/TaskDefinition/TaskRole/Resource
  WorkerTaskDefinitionC7EEADA6:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Command:
            - --worker
            - --master-host
            - master.locust
          Essential: true
          Image:
            Fn::Sub: ${AWS::AccountId}.dkr.ecr.us-west-2.${AWS::URLSuffix}/cdk-hnb659fds-container-assets-${AWS::AccountId}-us-west-2:a74a7c24e409fc89d6317c2ff4aa4c7e3a1d86f887c037ac797018cc1cff9b3a
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: WorkerTaskDefinitionlocustLogGroup0EA81668
              awslogs-stream-prefix: locust-worker
              awslogs-region: us-west-2
          Name: locust
          Ulimits:
            - HardLimit: 10000
              Name: nofile
              SoftLimit: 10000
      Cpu: "1024"
      ExecutionRoleArn:
        Fn::GetAtt:
          - WorkerTaskDefinitionExecutionRole04BD42F4
          - Arn
      Family: LoadTestStackWorkerTaskDefinition8BF2730A
      Memory: "2048"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::GetAtt:
          - WorkerTaskDefinitionTaskRoleDCDA51F5
          - Arn
    Metadata:
      aws:cdk:path: LoadTestStack/Worker/TaskDefinition/Resource
  WorkerTaskDefinitionlocustLogGroup0EA81668:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 180
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: LoadTestStack/Worker/TaskDefinition/locust/LogGroup/Resource
  WorkerTaskDefinitionExecutionRole04BD42F4:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: LoadTestStack/Worker/TaskDefinition/ExecutionRole/Resource
  WorkerTaskDefinitionExecutionRoleDefaultPolicy32BEDE20:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":ecr:us-west-2:"
                  - Ref: AWS::AccountId
                  - :repository/
                  - Fn::Sub: cdk-hnb659fds-container-assets-${AWS::AccountId}-us-west-2
          - Action: ecr:GetAuthorizationToken
            Effect: Allow
            Resource: "*"
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - WorkerTaskDefinitionlocustLogGroup0EA81668
                - Arn
        Version: "2012-10-17"
      PolicyName: WorkerTaskDefinitionExecutionRoleDefaultPolicy32BEDE20
      Roles:
        - Ref: WorkerTaskDefinitionExecutionRole04BD42F4
    Metadata:
      aws:cdk:path: LoadTestStack/Worker/TaskDefinition/ExecutionRole/DefaultPolicy/Resource
  WorkerService3F60922A:
    Type: AWS::ECS::Service
    Properties:
      CapacityProviderStrategy:
        - CapacityProvider: FARGATE_SPOT
          Weight: 1
        - CapacityProvider: FARGATE
          Weight: 0
      Cluster:
        Ref: ClusterEB0386A7
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 0
      EnableECSManagedTags: false
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::GetAtt:
                - WorkerServiceSecurityGroup31B1E69F
                - GroupId
          Subnets:
            - Ref: VpcPrivateSubnet1Subnet536B997A
            - Ref: VpcPrivateSubnet2Subnet3788AAA1
      TaskDefinition:
        Ref: WorkerTaskDefinitionC7EEADA6
    Metadata:
      aws:cdk:path: LoadTestStack/Worker/Service/Service
  WorkerServiceSecurityGroup31B1E69F:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: LoadTestStack/Worker/Service/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: LoadTestStack/Worker/Service/SecurityGroup/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/31TTW/bMAz9Lb072pJetmM+2iJA0RlO0WtAy6ynxpYMUXJgGPnvo6y4NtpgJz4+UiL5KK3E/W/x8w7OtJDFaVGpXPQHB/KUMHXsUa5E/9bIZPuu39Jtkvq8UvLgc40ucBPKjHf4CnmFEz9xayIjFThl9GdyAA/7NJgXcE/g8AxdklrVMpwu3muHlvGYEDu5emvHvf6tUbvksTLnZ1OG+AgPKL1VrnuyxjdDW/8lHkqLRN/ovR74S0L3ot94eYp9XVE0qWFZuomO/iVBSaLfVp54hhAd4SPYEoI2dNrhu9JqVOYrY7QDpdHOuOvZA9pWyah2hNxhBIUiaVq0neivcu40vUCN1EA8cYu+daGCWvSZiUsd7DTpNKM9AhE6EjvDw9t9DWXYOKvDMZFhY0g5Y7sNECaVKVkTXs/nEkY8yHVswIWFk1g3DRcY3syzgWIDFWie7cv4WAE5JSvOyIcMpcuWH+3t0zbWm/nzPMW70decEc/ir1yZ3+HY9sy9XJIMyXgb5OMNm3pyWbfbodSaVhWhRJCKP13JrYf8P9413l0SbQoUH/SjXf4Sy5VY3n2QUgvrtVM1iizaf3BARD7BAwAA
    Metadata:
      aws:cdk:path: LoadTestStack/CDKMetadata/Default
Outputs:
  MasterServiceLoadBalancerDNSD23C49A7:
    Value:
      Fn::GetAtt:
        - MasterServiceLBA62FC209
        - DNSName
  MasterServiceServiceURL66A06FCF:
    Value:
      Fn::Join:
        - ""
        - - http://
          - Fn::GetAtt:
              - MasterServiceLBA62FC209
              - DNSName
  WorkerServiceName:
    Value:
      Fn::GetAtt:
        - WorkerService3F60922A
        - Name
  EcsClusterArn:
    Value:
      Fn::GetAtt:
        - ClusterEB0386A7
        - Arn
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
Rules:
  CheckBootstrapVersion:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::Contains:
                - - "1"
                  - "2"
                  - "3"
                  - "4"
                  - "5"
                - Ref: BootstrapVersion
        AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.

