Resources:
  Vpc8378EB38:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: AmazonCloudfrontCacheGraphqlStack/Vpc
    Metadata:
      aws:cdk:path: AmazonCloudfrontCacheGraphqlStack/Vpc/Resource
  VpcPublicSubnet1Subnet5C2D37C4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: Vpc8378EB38
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 10.0.0.0/18
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: AmazonCloudfrontCacheGraphqlStack/Vpc/PublicSubnet1
    Metadata:
      aws:cdk:path: AmazonCloudfrontCacheGraphqlStack/Vpc/PublicSubnet1/Subnet
  VpcPublicSubnet1RouteTable6C95E38E:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc8378EB38
      Tags:
        - Key: Name
          Value: AmazonCloudfrontCacheGraphqlStack/Vpc/PublicSubnet1
    Metadata:
      aws:cdk:path: AmazonCloudfrontCacheGraphqlStack/Vpc/PublicSubnet1/RouteTable
  VpcPublicSubnet1RouteTableAssociation97140677:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcPublicSubnet1RouteTable6C95E38E
      SubnetId:
        Ref: VpcPublicSubnet1Subnet5C2D37C4
    Metadata:
      aws:cdk:path: AmazonCloudfrontCacheGraphqlStack/Vpc/PublicSubnet1/RouteTableAssociation
  VpcPublicSubnet1DefaultRoute3DA9E72A:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VpcPublicSubnet1RouteTable6C95E38E
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VpcIGWD7BA715C
    DependsOn:
      - VpcVPCGWBF912B6E
    Metadata:
      aws:cdk:path: AmazonCloudfrontCacheGraphqlStack/Vpc/PublicSubnet1/DefaultRoute
  VpcPublicSubnet1EIPD7E02669:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: AmazonCloudfrontCacheGraphqlStack/Vpc/PublicSubnet1
    Metadata:
      aws:cdk:path: AmazonCloudfrontCacheGraphqlStack/Vpc/PublicSubnet1/EIP
  VpcPublicSubnet1NATGateway4D7517AA:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId:
        Ref: VpcPublicSubnet1Subnet5C2D37C4
      AllocationId:
        Fn::GetAtt:
          - VpcPublicSubnet1EIPD7E02669
          - AllocationId
      Tags:
        - Key: Name
          Value: AmazonCloudfrontCacheGraphqlStack/Vpc/PublicSubnet1
    Metadata:
      aws:cdk:path: AmazonCloudfrontCacheGraphqlStack/Vpc/PublicSubnet1/NATGateway
  VpcPublicSubnet2Subnet691E08A3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: Vpc8378EB38
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: 10.0.64.0/18
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: AmazonCloudfrontCacheGraphqlStack/Vpc/PublicSubnet2
    Metadata:
      aws:cdk:path: AmazonCloudfrontCacheGraphqlStack/Vpc/PublicSubnet2/Subnet
  VpcPublicSubnet2RouteTable94F7E489:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc8378EB38
      Tags:
        - Key: Name
          Value: AmazonCloudfrontCacheGraphqlStack/Vpc/PublicSubnet2
    Metadata:
      aws:cdk:path: AmazonCloudfrontCacheGraphqlStack/Vpc/PublicSubnet2/RouteTable
  VpcPublicSubnet2RouteTableAssociationDD5762D8:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcPublicSubnet2RouteTable94F7E489
      SubnetId:
        Ref: VpcPublicSubnet2Subnet691E08A3
    Metadata:
      aws:cdk:path: AmazonCloudfrontCacheGraphqlStack/Vpc/PublicSubnet2/RouteTableAssociation
  VpcPublicSubnet2DefaultRoute97F91067:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VpcPublicSubnet2RouteTable94F7E489
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VpcIGWD7BA715C
    DependsOn:
      - VpcVPCGWBF912B6E
    Metadata:
      aws:cdk:path: AmazonCloudfrontCacheGraphqlStack/Vpc/PublicSubnet2/DefaultRoute
  VpcPublicSubnet2EIP3C605A87:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: AmazonCloudfrontCacheGraphqlStack/Vpc/PublicSubnet2
    Metadata:
      aws:cdk:path: AmazonCloudfrontCacheGraphqlStack/Vpc/PublicSubnet2/EIP
  VpcPublicSubnet2NATGateway9182C01D:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId:
        Ref: VpcPublicSubnet2Subnet691E08A3
      AllocationId:
        Fn::GetAtt:
          - VpcPublicSubnet2EIP3C605A87
          - AllocationId
      Tags:
        - Key: Name
          Value: AmazonCloudfrontCacheGraphqlStack/Vpc/PublicSubnet2
    Metadata:
      aws:cdk:path: AmazonCloudfrontCacheGraphqlStack/Vpc/PublicSubnet2/NATGateway
  VpcPrivateSubnet1Subnet536B997A:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: Vpc8378EB38
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 10.0.128.0/18
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: AmazonCloudfrontCacheGraphqlStack/Vpc/PrivateSubnet1
    Metadata:
      aws:cdk:path: AmazonCloudfrontCacheGraphqlStack/Vpc/PrivateSubnet1/Subnet
  VpcPrivateSubnet1RouteTableB2C5B500:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc8378EB38
      Tags:
        - Key: Name
          Value: AmazonCloudfrontCacheGraphqlStack/Vpc/PrivateSubnet1
    Metadata:
      aws:cdk:path: AmazonCloudfrontCacheGraphqlStack/Vpc/PrivateSubnet1/RouteTable
  VpcPrivateSubnet1RouteTableAssociation70C59FA6:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcPrivateSubnet1RouteTableB2C5B500
      SubnetId:
        Ref: VpcPrivateSubnet1Subnet536B997A
    Metadata:
      aws:cdk:path: AmazonCloudfrontCacheGraphqlStack/Vpc/PrivateSubnet1/RouteTableAssociation
  VpcPrivateSubnet1DefaultRouteBE02A9ED:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VpcPrivateSubnet1RouteTableB2C5B500
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: VpcPublicSubnet1NATGateway4D7517AA
    Metadata:
      aws:cdk:path: AmazonCloudfrontCacheGraphqlStack/Vpc/PrivateSubnet1/DefaultRoute
  VpcPrivateSubnet2Subnet3788AAA1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: Vpc8378EB38
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: 10.0.192.0/18
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: AmazonCloudfrontCacheGraphqlStack/Vpc/PrivateSubnet2
    Metadata:
      aws:cdk:path: AmazonCloudfrontCacheGraphqlStack/Vpc/PrivateSubnet2/Subnet
  VpcPrivateSubnet2RouteTableA678073B:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc8378EB38
      Tags:
        - Key: Name
          Value: AmazonCloudfrontCacheGraphqlStack/Vpc/PrivateSubnet2
    Metadata:
      aws:cdk:path: AmazonCloudfrontCacheGraphqlStack/Vpc/PrivateSubnet2/RouteTable
  VpcPrivateSubnet2RouteTableAssociationA89CAD56:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcPrivateSubnet2RouteTableA678073B
      SubnetId:
        Ref: VpcPrivateSubnet2Subnet3788AAA1
    Metadata:
      aws:cdk:path: AmazonCloudfrontCacheGraphqlStack/Vpc/PrivateSubnet2/RouteTableAssociation
  VpcPrivateSubnet2DefaultRoute060D2087:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VpcPrivateSubnet2RouteTableA678073B
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: VpcPublicSubnet2NATGateway9182C01D
    Metadata:
      aws:cdk:path: AmazonCloudfrontCacheGraphqlStack/Vpc/PrivateSubnet2/DefaultRoute
  VpcIGWD7BA715C:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: AmazonCloudfrontCacheGraphqlStack/Vpc
    Metadata:
      aws:cdk:path: AmazonCloudfrontCacheGraphqlStack/Vpc/IGW
  VpcVPCGWBF912B6E:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: Vpc8378EB38
      InternetGatewayId:
        Ref: VpcIGWD7BA715C
    Metadata:
      aws:cdk:path: AmazonCloudfrontCacheGraphqlStack/Vpc/VPCGW
  ClusterEB0386A7:
    Type: AWS::ECS::Cluster
    Metadata:
      aws:cdk:path: AmazonCloudfrontCacheGraphqlStack/Cluster/Resource
  AlbFargateLB5C712E6C:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: "false"
      Scheme: internet-facing
      SecurityGroups:
        - Fn::GetAtt:
            - AlbFargateLBSecurityGroup38EF8FBE
            - GroupId
      Subnets:
        - Ref: VpcPublicSubnet1Subnet5C2D37C4
        - Ref: VpcPublicSubnet2Subnet691E08A3
      Type: application
    DependsOn:
      - VpcPublicSubnet1DefaultRoute3DA9E72A
      - VpcPublicSubnet2DefaultRoute97F91067
    Metadata:
      aws:cdk:path: AmazonCloudfrontCacheGraphqlStack/AlbFargate/LB/Resource
  AlbFargateLBSecurityGroup38EF8FBE:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatically created Security Group for ELB AmazonCloudfrontCacheGraphqlStackAlbFargateLB5F606696
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: AmazonCloudfrontCacheGraphqlStack/AlbFargate/LB/SecurityGroup/Resource
  AlbFargateLBSecurityGrouptoAmazonCloudfrontCacheGraphqlStackAlbFargateServiceSecurityGroup64F31E5780F61A6725:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId:
        Fn::GetAtt:
          - AlbFargateLBSecurityGroup38EF8FBE
          - GroupId
      IpProtocol: tcp
      Description: Load balancer to target
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - AlbFargateServiceSecurityGroupE0E4A4B4
          - GroupId
      FromPort: 80
      ToPort: 80
    Metadata:
      aws:cdk:path: AmazonCloudfrontCacheGraphqlStack/AlbFargate/LB/SecurityGroup/to AmazonCloudfrontCacheGraphqlStackAlbFargateServiceSecurityGroup64F31E57:80
  AlbFargateLBPublicListener693059C5:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: AlbFargateLBPublicListenerECSGroup2B49320F
          Type: forward
      LoadBalancerArn:
        Ref: AlbFargateLB5C712E6C
      Port: 80
      Protocol: HTTP
    Metadata:
      aws:cdk:path: AmazonCloudfrontCacheGraphqlStack/AlbFargate/LB/PublicListener/Resource
  AlbFargateLBPublicListenerECSGroup2B49320F:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /health
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: "false"
      TargetType: ip
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: AmazonCloudfrontCacheGraphqlStack/AlbFargate/LB/PublicListener/ECSGroup/Resource
  AlbFargateTaskDefTaskRoleF595D9C7:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: AmazonCloudfrontCacheGraphqlStack/AlbFargate/TaskDef/TaskRole/Resource
  AlbFargateTaskDef9EDB787A:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image:
            Fn::Sub: ${AWS::AccountId}.dkr.ecr.us-east-1.${AWS::URLSuffix}/cdk-hnb659fds-container-assets-${AWS::AccountId}-us-east-1:3030ffe445786c9918325bab0bd16e4e6f2054ff8f63575be605bdcc445af9f2
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: AlbFargateTaskDefwebLogGroupE95398AF
              awslogs-stream-prefix: AlbFargate
              awslogs-region: us-east-1
          Name: web
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
      Cpu: "256"
      ExecutionRoleArn:
        Fn::GetAtt:
          - AlbFargateTaskDefExecutionRoleA5A87F30
          - Arn
      Family: AmazonCloudfrontCacheGraphqlStackAlbFargateTaskDef99ECE0B9
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::GetAtt:
          - AlbFargateTaskDefTaskRoleF595D9C7
          - Arn
    Metadata:
      aws:cdk:path: AmazonCloudfrontCacheGraphqlStack/AlbFargate/TaskDef/Resource
  AlbFargateTaskDefwebLogGroupE95398AF:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: AmazonCloudfrontCacheGraphqlStack/AlbFargate/TaskDef/web/LogGroup/Resource
  AlbFargateTaskDefExecutionRoleA5A87F30:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: AmazonCloudfrontCacheGraphqlStack/AlbFargate/TaskDef/ExecutionRole/Resource
  AlbFargateTaskDefExecutionRoleDefaultPolicyE211074D:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":ecr:us-east-1:"
                  - Ref: AWS::AccountId
                  - :repository/
                  - Fn::Sub: cdk-hnb659fds-container-assets-${AWS::AccountId}-us-east-1
          - Action: ecr:GetAuthorizationToken
            Effect: Allow
            Resource: "*"
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - AlbFargateTaskDefwebLogGroupE95398AF
                - Arn
        Version: "2012-10-17"
      PolicyName: AlbFargateTaskDefExecutionRoleDefaultPolicyE211074D
      Roles:
        - Ref: AlbFargateTaskDefExecutionRoleA5A87F30
    Metadata:
      aws:cdk:path: AmazonCloudfrontCacheGraphqlStack/AlbFargate/TaskDef/ExecutionRole/DefaultPolicy/Resource
  AlbFargateService5CCDF78A:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: ClusterEB0386A7
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 1
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: web
          ContainerPort: 80
          TargetGroupArn:
            Ref: AlbFargateLBPublicListenerECSGroup2B49320F
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::GetAtt:
                - AlbFargateServiceSecurityGroupE0E4A4B4
                - GroupId
          Subnets:
            - Ref: VpcPrivateSubnet1Subnet536B997A
            - Ref: VpcPrivateSubnet2Subnet3788AAA1
      TaskDefinition:
        Ref: AlbFargateTaskDef9EDB787A
    DependsOn:
      - AlbFargateLBPublicListenerECSGroup2B49320F
      - AlbFargateLBPublicListener693059C5
    Metadata:
      aws:cdk:path: AmazonCloudfrontCacheGraphqlStack/AlbFargate/Service/Service
  AlbFargateServiceSecurityGroupE0E4A4B4:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: AmazonCloudfrontCacheGraphqlStack/AlbFargate/Service/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: AmazonCloudfrontCacheGraphqlStack/AlbFargate/Service/SecurityGroup/Resource
  AlbFargateServiceSecurityGroupfromAmazonCloudfrontCacheGraphqlStackAlbFargateLBSecurityGroupEC6D2747805FE6CE65:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort: 80
      GroupId:
        Fn::GetAtt:
          - AlbFargateServiceSecurityGroupE0E4A4B4
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - AlbFargateLBSecurityGroup38EF8FBE
          - GroupId
      ToPort: 80
    Metadata:
      aws:cdk:path: AmazonCloudfrontCacheGraphqlStack/AlbFargate/Service/SecurityGroup/from AmazonCloudfrontCacheGraphqlStackAlbFargateLBSecurityGroupEC6D2747:80
  CachePolicy26D8A535:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        DefaultTTL: 60
        MaxTTL: 31536000
        MinTTL: 60
        Name: AmazonCloudfrontCacheGraphqlStackCachePolicy5C9FD495-us-east-1
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
          EnableAcceptEncodingBrotli: false
          EnableAcceptEncodingGzip: false
          HeadersConfig:
            HeaderBehavior: whitelist
            Headers:
              - Payload0
              - Payload1
              - Payload2
              - Payload3
              - Payload4
          QueryStringsConfig:
            QueryStringBehavior: none
    Metadata:
      aws:cdk:path: AmazonCloudfrontCacheGraphqlStack/CachePolicy/Resource
  ConvertHttpMethodLambdaEdgeFnServiceRole681FECB2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: edgelambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: AmazonCloudfrontCacheGraphqlStack/ConvertHttpMethodLambdaEdge/Fn/ServiceRole/Resource
  ConvertHttpMethodLambdaEdgeFnAF12D7E7:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-us-east-1
        S3Key: dfb59f640a995d1f57d472e1b9cebdb7d52ca7ed94215d421acac4ed6e840ef9.zip
      Role:
        Fn::GetAtt:
          - ConvertHttpMethodLambdaEdgeFnServiceRole681FECB2
          - Arn
      Handler: convert-http-method.handler
      Runtime: python3.9
    DependsOn:
      - ConvertHttpMethodLambdaEdgeFnServiceRole681FECB2
    Metadata:
      aws:cdk:path: AmazonCloudfrontCacheGraphqlStack/ConvertHttpMethodLambdaEdge/Fn/Resource
      aws:asset:path: asset.dfb59f640a995d1f57d472e1b9cebdb7d52ca7ed94215d421acac4ed6e840ef9
      aws:asset:is-bundled: false
      aws:asset:property: Code
  ConvertHttpMethodLambdaEdgeFnCurrentVersion26C368D306c78b282d027c542e11187d300d6b19:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName:
        Ref: ConvertHttpMethodLambdaEdgeFnAF12D7E7
    Metadata:
      aws:cdk:path: AmazonCloudfrontCacheGraphqlStack/ConvertHttpMethodLambdaEdge/Fn/CurrentVersion/Resource
  OriginRequestPolicy3EFDB4FA:
    Type: AWS::CloudFront::OriginRequestPolicy
    Properties:
      OriginRequestPolicyConfig:
        CookiesConfig:
          CookieBehavior: none
        HeadersConfig:
          HeaderBehavior: whitelist
          Headers:
            - auth-key
        Name: AmazonCloudfrontCacheGraphqlStackOriginRequestPolicy55FFFC30
        QueryStringsConfig:
          QueryStringBehavior: none
    Metadata:
      aws:cdk:path: AmazonCloudfrontCacheGraphqlStack/OriginRequestPolicy/Resource
  EdgeDistribution7D23752A:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - PATCH
            - POST
            - DELETE
          CachePolicyId:
            Ref: CachePolicy26D8A535
          Compress: true
          LambdaFunctionAssociations:
            - EventType: origin-request
              IncludeBody: true
              LambdaFunctionARN:
                Ref: ConvertHttpMethodLambdaEdgeFnCurrentVersion26C368D306c78b282d027c542e11187d300d6b19
          OriginRequestPolicyId:
            Ref: OriginRequestPolicy3EFDB4FA
          TargetOriginId: AmazonCloudfrontCacheGraphqlStackEdgeDistributionOrigin13B400D39
          ViewerProtocolPolicy: allow-all
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Origins:
          - CustomOriginConfig:
              OriginProtocolPolicy: http-only
              OriginSSLProtocols:
                - TLSv1.2
            DomainName:
              Fn::GetAtt:
                - AlbFargateLB5C712E6C
                - DNSName
            Id: AmazonCloudfrontCacheGraphqlStackEdgeDistributionOrigin13B400D39
    Metadata:
      aws:cdk:path: AmazonCloudfrontCacheGraphqlStack/EdgeDistribution/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/31Ty27bMBD8ltxptnYuufqVwEDQGHLgq7Gi1ipjmVS4pFND0L93RUmWkgY9cTia5XJmqZmcPsifd/BBE5WdJoVOZbXzoE6CqUOFaiarfanE8mj226XYhrTQahdSg77hBpTY4PEV0gIHfuDmRFZp8Nqam7gB6822WX6BfwKPH3AVW6cvDIeDN8ajY9wL2pt0u7nnu/4+o/Fihyo47a9PzoYy3uG/xDp3SPQPvTGRrwUqktWyCMTdG1UPH8Hl0Lii0wqP2uje01fGGg/aoBtxXe0O3UWrNqcWxnaHEnxjleS8LDnlmNazhWwBBRiF2ZdyLIC8VgUr0qjQJr/wuL6vjiY+7cc6zd5Mp+nx6Psrd+YJ9EGOtrXQcJZVYtu5x3VruS4OqkWNO3cAIvQkV1ad0G3OkDePgkfM32SCpSXtrbsugFAUNufwn21+69jjWrDfkB0dp8vj4dnj0G28xT8lOt08DCjkOsvxMRgVh/DidK5Ngu8ByQ/F39ErjsLpNPQjHu9rUcA5zUBWt5NZccN7dNRxHawF3fchtM7pXi4Cp+Eb07VIkGxw7bt4Cb4MXkQd/458szzG20lqYWyG8o1+XPj3nc7k9O6NtJ64YDyblkm7/gW6jKHw3QMAAA==
    Metadata:
      aws:cdk:path: AmazonCloudfrontCacheGraphqlStack/CDKMetadata/Default
Outputs:
  AlbFargateLoadBalancerDNSD048F453:
    Value:
      Fn::GetAtt:
        - AlbFargateLB5C712E6C
        - DNSName
  AlbFargateServiceURL1EEA0B15:
    Value:
      Fn::Join:
        - ""
        - - http://
          - Fn::GetAtt:
              - AlbFargateLB5C712E6C
              - DNSName
  EdgeDistributionEndpoint:
    Value:
      Fn::Join:
        - ""
        - - https://
          - Fn::GetAtt:
              - EdgeDistribution7D23752A
              - DomainName
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
Rules:
  CheckBootstrapVersion:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::Contains:
                - - "1"
                  - "2"
                  - "3"
                  - "4"
                  - "5"
                - Ref: BootstrapVersion
        AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.

