Resources:
  EfsIntegrationDemo5E06BD80:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: AmazonEfsIntegrationsStack/EfsIntegrationDemo
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EfsIntegrationDemo/Resource
  EfsIntegrationDemoPublicSubnet1SubnetC7D18373:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/18
      VpcId:
        Ref: EfsIntegrationDemo5E06BD80
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: AmazonEfsIntegrationsStack/EfsIntegrationDemo/PublicSubnet1
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EfsIntegrationDemo/PublicSubnet1/Subnet
  EfsIntegrationDemoPublicSubnet1RouteTable21D48217:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: EfsIntegrationDemo5E06BD80
      Tags:
        - Key: Name
          Value: AmazonEfsIntegrationsStack/EfsIntegrationDemo/PublicSubnet1
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EfsIntegrationDemo/PublicSubnet1/RouteTable
  EfsIntegrationDemoPublicSubnet1RouteTableAssociation02E75C5B:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: EfsIntegrationDemoPublicSubnet1RouteTable21D48217
      SubnetId:
        Ref: EfsIntegrationDemoPublicSubnet1SubnetC7D18373
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EfsIntegrationDemo/PublicSubnet1/RouteTableAssociation
  EfsIntegrationDemoPublicSubnet1DefaultRoute6E4325BA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: EfsIntegrationDemoPublicSubnet1RouteTable21D48217
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: EfsIntegrationDemoIGW507E817A
    DependsOn:
      - EfsIntegrationDemoVPCGW578F82C8
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EfsIntegrationDemo/PublicSubnet1/DefaultRoute
  EfsIntegrationDemoPublicSubnet1EIP450F9022:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: AmazonEfsIntegrationsStack/EfsIntegrationDemo/PublicSubnet1
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EfsIntegrationDemo/PublicSubnet1/EIP
  EfsIntegrationDemoPublicSubnet1NATGateway853D1F14:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - EfsIntegrationDemoPublicSubnet1EIP450F9022
          - AllocationId
      SubnetId:
        Ref: EfsIntegrationDemoPublicSubnet1SubnetC7D18373
      Tags:
        - Key: Name
          Value: AmazonEfsIntegrationsStack/EfsIntegrationDemo/PublicSubnet1
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EfsIntegrationDemo/PublicSubnet1/NATGateway
  EfsIntegrationDemoPublicSubnet2Subnet1A5EB15E:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.64.0/18
      VpcId:
        Ref: EfsIntegrationDemo5E06BD80
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: AmazonEfsIntegrationsStack/EfsIntegrationDemo/PublicSubnet2
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EfsIntegrationDemo/PublicSubnet2/Subnet
  EfsIntegrationDemoPublicSubnet2RouteTable313FCF5B:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: EfsIntegrationDemo5E06BD80
      Tags:
        - Key: Name
          Value: AmazonEfsIntegrationsStack/EfsIntegrationDemo/PublicSubnet2
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EfsIntegrationDemo/PublicSubnet2/RouteTable
  EfsIntegrationDemoPublicSubnet2RouteTableAssociation6A0D6382:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: EfsIntegrationDemoPublicSubnet2RouteTable313FCF5B
      SubnetId:
        Ref: EfsIntegrationDemoPublicSubnet2Subnet1A5EB15E
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EfsIntegrationDemo/PublicSubnet2/RouteTableAssociation
  EfsIntegrationDemoPublicSubnet2DefaultRoute503C073B:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: EfsIntegrationDemoPublicSubnet2RouteTable313FCF5B
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: EfsIntegrationDemoIGW507E817A
    DependsOn:
      - EfsIntegrationDemoVPCGW578F82C8
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EfsIntegrationDemo/PublicSubnet2/DefaultRoute
  EfsIntegrationDemoPublicSubnet2EIPA2491289:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: AmazonEfsIntegrationsStack/EfsIntegrationDemo/PublicSubnet2
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EfsIntegrationDemo/PublicSubnet2/EIP
  EfsIntegrationDemoPublicSubnet2NATGateway149099C2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - EfsIntegrationDemoPublicSubnet2EIPA2491289
          - AllocationId
      SubnetId:
        Ref: EfsIntegrationDemoPublicSubnet2Subnet1A5EB15E
      Tags:
        - Key: Name
          Value: AmazonEfsIntegrationsStack/EfsIntegrationDemo/PublicSubnet2
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EfsIntegrationDemo/PublicSubnet2/NATGateway
  EfsIntegrationDemoPrivateSubnet1Subnet4B53E9A6:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.128.0/18
      VpcId:
        Ref: EfsIntegrationDemo5E06BD80
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: AmazonEfsIntegrationsStack/EfsIntegrationDemo/PrivateSubnet1
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EfsIntegrationDemo/PrivateSubnet1/Subnet
  EfsIntegrationDemoPrivateSubnet1RouteTable1437C86E:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: EfsIntegrationDemo5E06BD80
      Tags:
        - Key: Name
          Value: AmazonEfsIntegrationsStack/EfsIntegrationDemo/PrivateSubnet1
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EfsIntegrationDemo/PrivateSubnet1/RouteTable
  EfsIntegrationDemoPrivateSubnet1RouteTableAssociationAAE91139:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: EfsIntegrationDemoPrivateSubnet1RouteTable1437C86E
      SubnetId:
        Ref: EfsIntegrationDemoPrivateSubnet1Subnet4B53E9A6
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EfsIntegrationDemo/PrivateSubnet1/RouteTableAssociation
  EfsIntegrationDemoPrivateSubnet1DefaultRouteB364CC97:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: EfsIntegrationDemoPrivateSubnet1RouteTable1437C86E
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: EfsIntegrationDemoPublicSubnet1NATGateway853D1F14
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EfsIntegrationDemo/PrivateSubnet1/DefaultRoute
  EfsIntegrationDemoPrivateSubnet2SubnetE3DC34B0:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.192.0/18
      VpcId:
        Ref: EfsIntegrationDemo5E06BD80
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: AmazonEfsIntegrationsStack/EfsIntegrationDemo/PrivateSubnet2
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EfsIntegrationDemo/PrivateSubnet2/Subnet
  EfsIntegrationDemoPrivateSubnet2RouteTable9ED82ACB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: EfsIntegrationDemo5E06BD80
      Tags:
        - Key: Name
          Value: AmazonEfsIntegrationsStack/EfsIntegrationDemo/PrivateSubnet2
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EfsIntegrationDemo/PrivateSubnet2/RouteTable
  EfsIntegrationDemoPrivateSubnet2RouteTableAssociationF22BFFDB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: EfsIntegrationDemoPrivateSubnet2RouteTable9ED82ACB
      SubnetId:
        Ref: EfsIntegrationDemoPrivateSubnet2SubnetE3DC34B0
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EfsIntegrationDemo/PrivateSubnet2/RouteTableAssociation
  EfsIntegrationDemoPrivateSubnet2DefaultRouteD40D01DB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: EfsIntegrationDemoPrivateSubnet2RouteTable9ED82ACB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: EfsIntegrationDemoPublicSubnet2NATGateway149099C2
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EfsIntegrationDemo/PrivateSubnet2/DefaultRoute
  EfsIntegrationDemoIGW507E817A:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: AmazonEfsIntegrationsStack/EfsIntegrationDemo
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EfsIntegrationDemo/IGW
  EfsIntegrationDemoVPCGW578F82C8:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: EfsIntegrationDemo5E06BD80
      InternetGatewayId:
        Ref: EfsIntegrationDemoIGW507E817A
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EfsIntegrationDemo/VPCGW
  EfsSecurityGroupEC5F36AC:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: AmazonEfsIntegrationsStack/EfsSecurityGroup
      GroupName: efs-demo-fs
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: EfsIntegrationDemo5E06BD80
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EfsSecurityGroup/Resource
  EfsSecurityGroupfromAmazonEfsIntegrationsStackEcsClusterDefaultAutoScalingGroupInstanceSecurityGroupB2240C34204970C49527:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: from AmazonEfsIntegrationsStackEcsClusterDefaultAutoScalingGroupInstanceSecurityGroupB2240C34:2049
      FromPort: 2049
      GroupId:
        Fn::GetAtt:
          - EfsSecurityGroupEC5F36AC
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - EcsClusterDefaultAutoScalingGroupInstanceSecurityGroup912E1231
          - GroupId
      ToPort: 2049
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EfsSecurityGroup/from AmazonEfsIntegrationsStackEcsClusterDefaultAutoScalingGroupInstanceSecurityGroupB2240C34:2049
  EfsSecurityGroupfromAmazonEfsIntegrationsStackFargateServiceSecurityGroupF4A698D22049D603509C:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: from AmazonEfsIntegrationsStackFargateServiceSecurityGroupF4A698D2:2049
      FromPort: 2049
      GroupId:
        Fn::GetAtt:
          - EfsSecurityGroupEC5F36AC
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - FargateServiceSecurityGroup262B61DD
          - GroupId
      ToPort: 2049
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EfsSecurityGroup/from AmazonEfsIntegrationsStackFargateServiceSecurityGroupF4A698D2:2049
  EcsCluster97242B84:
    Type: AWS::ECS::Cluster
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EcsCluster/Resource
  EcsClusterDefaultAutoScalingGroupInstanceSecurityGroup912E1231:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: AmazonEfsIntegrationsStack/EcsCluster/DefaultAutoScalingGroup/InstanceSecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: AmazonEfsIntegrationsStack/EcsCluster/DefaultAutoScalingGroup
      VpcId:
        Ref: EfsIntegrationDemo5E06BD80
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EcsCluster/DefaultAutoScalingGroup/InstanceSecurityGroup/Resource
  EcsClusterDefaultAutoScalingGroupInstanceSecurityGroupfromAmazonEfsIntegrationsStackEc2ServiceLBSecurityGroup02F4E5008011875206:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort: 80
      GroupId:
        Fn::GetAtt:
          - EcsClusterDefaultAutoScalingGroupInstanceSecurityGroup912E1231
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - Ec2ServiceLBSecurityGroup45FED6DF
          - GroupId
      ToPort: 80
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EcsCluster/DefaultAutoScalingGroup/InstanceSecurityGroup/from AmazonEfsIntegrationsStackEc2ServiceLBSecurityGroup02F4E500:80
  EcsClusterDefaultAutoScalingGroupInstanceRole3C026863:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - ec2.
                    - Ref: AWS::URLSuffix
        Version: "2012-10-17"
      Tags:
        - Key: Name
          Value: AmazonEfsIntegrationsStack/EcsCluster/DefaultAutoScalingGroup
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EcsCluster/DefaultAutoScalingGroup/InstanceRole/Resource
  EcsClusterDefaultAutoScalingGroupInstanceRoleDefaultPolicy04DC6C80:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecs:CreateCluster
              - ecs:DeregisterContainerInstance
              - ecs:DiscoverPollEndpoint
              - ecs:Poll
              - ecs:RegisterContainerInstance
              - ecs:StartTelemetrySession
              - ecs:Submit*
              - ecr:GetAuthorizationToken
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: EcsClusterDefaultAutoScalingGroupInstanceRoleDefaultPolicy04DC6C80
      Roles:
        - Ref: EcsClusterDefaultAutoScalingGroupInstanceRole3C026863
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EcsCluster/DefaultAutoScalingGroup/InstanceRole/DefaultPolicy/Resource
  EcsClusterDefaultAutoScalingGroupInstanceProfile2CE606B3:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: EcsClusterDefaultAutoScalingGroupInstanceRole3C026863
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EcsCluster/DefaultAutoScalingGroup/InstanceProfile
  EcsClusterDefaultAutoScalingGroupLaunchConfigB7E376C1:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        Ref: SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter
      InstanceType: t2.large
      IamInstanceProfile:
        Ref: EcsClusterDefaultAutoScalingGroupInstanceProfile2CE606B3
      SecurityGroups:
        - Fn::GetAtt:
            - EcsClusterDefaultAutoScalingGroupInstanceSecurityGroup912E1231
            - GroupId
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - |-
                #!/bin/bash
                echo ECS_CLUSTER=
              - Ref: EcsCluster97242B84
              - |-2
                 >> /etc/ecs/ecs.config
                sudo iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP
                sudo service iptables save
                echo ECS_AWSVPC_BLOCK_IMDS=true >> /etc/ecs/ecs.config
    DependsOn:
      - EcsClusterDefaultAutoScalingGroupInstanceRoleDefaultPolicy04DC6C80
      - EcsClusterDefaultAutoScalingGroupInstanceRole3C026863
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EcsCluster/DefaultAutoScalingGroup/LaunchConfig
  EcsClusterDefaultAutoScalingGroupASGC1A785DB:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MaxSize: "2"
      MinSize: "2"
      LaunchConfigurationName:
        Ref: EcsClusterDefaultAutoScalingGroupLaunchConfigB7E376C1
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: AmazonEfsIntegrationsStack/EcsCluster/DefaultAutoScalingGroup
      VPCZoneIdentifier:
        - Ref: EfsIntegrationDemoPrivateSubnet1Subnet4B53E9A6
        - Ref: EfsIntegrationDemoPrivateSubnet2SubnetE3DC34B0
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: true
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EcsCluster/DefaultAutoScalingGroup/ASG
  EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole94543EDA:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Name
          Value: AmazonEfsIntegrationsStack/EcsCluster/DefaultAutoScalingGroup
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EcsCluster/DefaultAutoScalingGroup/DrainECSHook/Function/ServiceRole/Resource
  EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleDefaultPolicyA45BF396:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ec2:DescribeInstances
              - ec2:DescribeInstanceAttribute
              - ec2:DescribeInstanceStatus
              - ec2:DescribeHosts
            Effect: Allow
            Resource: "*"
          - Action: autoscaling:CompleteLifecycleAction
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":autoscaling:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :autoScalingGroup:*:autoScalingGroupName/
                  - Ref: EcsClusterDefaultAutoScalingGroupASGC1A785DB
          - Action:
              - ecs:DescribeContainerInstances
              - ecs:DescribeTasks
            Effect: Allow
            Resource: "*"
          - Action:
              - ecs:ListContainerInstances
              - ecs:SubmitContainerStateChange
              - ecs:SubmitTaskStateChange
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - EcsCluster97242B84
                - Arn
          - Action:
              - ecs:UpdateContainerInstancesState
              - ecs:ListTasks
            Condition:
              ArnEquals:
                ecs:cluster:
                  Fn::GetAtt:
                    - EcsCluster97242B84
                    - Arn
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleDefaultPolicyA45BF396
      Roles:
        - Ref: EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole94543EDA
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EcsCluster/DefaultAutoScalingGroup/DrainECSHook/Function/ServiceRole/DefaultPolicy/Resource
  EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionE17A5F5E:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3, json, os, time

          ecs = boto3.client('ecs')
          autoscaling = boto3.client('autoscaling')


          def lambda_handler(event, context):
            print(json.dumps(event))
            cluster = os.environ['CLUSTER']
            snsTopicArn = event['Records'][0]['Sns']['TopicArn']
            lifecycle_event = json.loads(event['Records'][0]['Sns']['Message'])
            instance_id = lifecycle_event.get('EC2InstanceId')
            if not instance_id:
              print('Got event without EC2InstanceId: %s', json.dumps(event))
              return

            instance_arn = container_instance_arn(cluster, instance_id)
            print('Instance %s has container instance ARN %s' % (lifecycle_event['EC2InstanceId'], instance_arn))

            if not instance_arn:
              return

            while has_tasks(cluster, instance_arn):
              time.sleep(10)

            try:
              print('Terminating instance %s' % instance_id)
              autoscaling.complete_lifecycle_action(
                  LifecycleActionResult='CONTINUE',
                  **pick(lifecycle_event, 'LifecycleHookName', 'LifecycleActionToken', 'AutoScalingGroupName'))
            except Exception as e:
              # Lifecycle action may have already completed.
              print(str(e))


          def container_instance_arn(cluster, instance_id):
            """Turn an instance ID into a container instance ARN."""
            arns = ecs.list_container_instances(cluster=cluster, filter='ec2InstanceId==' + instance_id)['containerInstanceArns']
            if not arns:
              return None
            return arns[0]


          def has_tasks(cluster, instance_arn):
            """Return True if the instance is running tasks for the given cluster."""
            instances = ecs.describe_container_instances(cluster=cluster, containerInstances=[instance_arn])['containerInstances']
            if not instances:
              return False
            instance = instances[0]

            if instance['status'] == 'ACTIVE':
              # Start draining, then try again later
              set_container_instance_to_draining(cluster, instance_arn)
              return True

            tasks = instance['runningTasksCount'] + instance['pendingTasksCount']
            print('Instance %s has %s tasks' % (instance_arn, tasks))

            return tasks > 0


          def set_container_instance_to_draining(cluster, instance_arn):
            ecs.update_container_instances_state(
                cluster=cluster,
                containerInstances=[instance_arn], status='DRAINING')


          def pick(dct, *keys):
            """Pick a subset of a dict."""
            return {k: v for k, v in dct.items() if k in keys}
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
          - EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole94543EDA
          - Arn
      Runtime: python3.6
      Environment:
        Variables:
          CLUSTER:
            Ref: EcsCluster97242B84
      Tags:
        - Key: Name
          Value: AmazonEfsIntegrationsStack/EcsCluster/DefaultAutoScalingGroup
      Timeout: 310
    DependsOn:
      - EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleDefaultPolicyA45BF396
      - EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole94543EDA
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EcsCluster/DefaultAutoScalingGroup/DrainECSHook/Function/Resource
  EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionAllowInvokeAmazonEfsIntegrationsStackEcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicBFFD76DBC0D0BC36:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionE17A5F5E
          - Arn
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicACD2D4A4
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EcsCluster/DefaultAutoScalingGroup/DrainECSHook/Function/AllowInvoke:AmazonEfsIntegrationsStackEcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicBFFD76DB
  EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionTopic8F34E394:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      TopicArn:
        Ref: EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicACD2D4A4
      Endpoint:
        Fn::GetAtt:
          - EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionE17A5F5E
          - Arn
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EcsCluster/DefaultAutoScalingGroup/DrainECSHook/Function/Topic/Resource
  EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleA38EC83B:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: autoscaling.amazonaws.com
        Version: "2012-10-17"
      Tags:
        - Key: Name
          Value: AmazonEfsIntegrationsStack/EcsCluster/DefaultAutoScalingGroup
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EcsCluster/DefaultAutoScalingGroup/LifecycleHookDrainHook/Role/Resource
  EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleDefaultPolicy75002F88:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: sns:Publish
            Effect: Allow
            Resource:
              Ref: EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicACD2D4A4
        Version: "2012-10-17"
      PolicyName: EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleDefaultPolicy75002F88
      Roles:
        - Ref: EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleA38EC83B
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EcsCluster/DefaultAutoScalingGroup/LifecycleHookDrainHook/Role/DefaultPolicy/Resource
  EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicACD2D4A4:
    Type: AWS::SNS::Topic
    Properties:
      Tags:
        - Key: Name
          Value: AmazonEfsIntegrationsStack/EcsCluster/DefaultAutoScalingGroup
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EcsCluster/DefaultAutoScalingGroup/LifecycleHookDrainHook/Topic/Resource
  EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookFFA63029:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName:
        Ref: EcsClusterDefaultAutoScalingGroupASGC1A785DB
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
      DefaultResult: CONTINUE
      HeartbeatTimeout: 300
      NotificationTargetARN:
        Ref: EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicACD2D4A4
      RoleARN:
        Fn::GetAtt:
          - EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleA38EC83B
          - Arn
    DependsOn:
      - EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleDefaultPolicy75002F88
      - EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleA38EC83B
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EcsCluster/DefaultAutoScalingGroup/LifecycleHookDrainHook/Resource
  EcsClusterEc2ServiceInitialTaskDefinitionTaskRole99D265EA:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EcsCluster/Ec2ServiceInitialTaskDefinition/TaskRole/Resource
  EcsClusterEc2ServiceInitialTaskDefinitionCA5FCAE7:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: coderaiser/cloudcmd:14.3.10-alpine
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: EcsClusterEc2ServiceInitialTaskDefinitioncloudcmdLogGroup12A2FB52
              awslogs-stream-prefix: ecs
              awslogs-region:
                Ref: AWS::Region
          Memory: 512
          Name: cloudcmd
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: tcp
      ExecutionRoleArn:
        Fn::GetAtt:
          - EcsClusterEc2ServiceInitialTaskDefinitionExecutionRole0D1AD38B
          - Arn
      Family: AmazonEfsIntegrationsStackEcsClusterEc2ServiceInitialTaskDefinition52893FC0
      NetworkMode: bridge
      RequiresCompatibilities:
        - EC2
      TaskRoleArn:
        Fn::GetAtt:
          - EcsClusterEc2ServiceInitialTaskDefinitionTaskRole99D265EA
          - Arn
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EcsCluster/Ec2ServiceInitialTaskDefinition/Resource
  EcsClusterEc2ServiceInitialTaskDefinitioncloudcmdLogGroup12A2FB52:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EcsCluster/Ec2ServiceInitialTaskDefinition/cloudcmd/LogGroup/Resource
  EcsClusterEc2ServiceInitialTaskDefinitionExecutionRole0D1AD38B:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EcsCluster/Ec2ServiceInitialTaskDefinition/ExecutionRole/Resource
  EcsClusterEc2ServiceInitialTaskDefinitionExecutionRoleDefaultPolicyE83EBCCD:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - EcsClusterEc2ServiceInitialTaskDefinitioncloudcmdLogGroup12A2FB52
                - Arn
        Version: "2012-10-17"
      PolicyName: EcsClusterEc2ServiceInitialTaskDefinitionExecutionRoleDefaultPolicyE83EBCCD
      Roles:
        - Ref: EcsClusterEc2ServiceInitialTaskDefinitionExecutionRole0D1AD38B
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/EcsCluster/Ec2ServiceInitialTaskDefinition/ExecutionRole/DefaultPolicy/Resource
  Ec2ServiceLB381329CE:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - Fn::GetAtt:
            - Ec2ServiceLBSecurityGroup45FED6DF
            - GroupId
      Subnets:
        - Ref: EfsIntegrationDemoPublicSubnet1SubnetC7D18373
        - Ref: EfsIntegrationDemoPublicSubnet2Subnet1A5EB15E
      Type: application
    DependsOn:
      - EfsIntegrationDemoPublicSubnet1DefaultRoute6E4325BA
      - EfsIntegrationDemoPublicSubnet2DefaultRoute503C073B
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/Ec2Service/LB/Resource
  Ec2ServiceLBSecurityGroup45FED6DF:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatically created Security Group for ELB AmazonEfsIntegrationsStackEc2ServiceLB38ACB68E
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Ref: EfsIntegrationDemo5E06BD80
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/Ec2Service/LB/SecurityGroup/Resource
  Ec2ServiceLBSecurityGrouptoAmazonEfsIntegrationsStackEcsClusterDefaultAutoScalingGroupInstanceSecurityGroupB2240C3480C83571BE:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId:
        Fn::GetAtt:
          - Ec2ServiceLBSecurityGroup45FED6DF
          - GroupId
      IpProtocol: tcp
      Description: Load balancer to target
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - EcsClusterDefaultAutoScalingGroupInstanceSecurityGroup912E1231
          - GroupId
      FromPort: 80
      ToPort: 80
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/Ec2Service/LB/SecurityGroup/to AmazonEfsIntegrationsStackEcsClusterDefaultAutoScalingGroupInstanceSecurityGroupB2240C34:80
  Ec2ServiceLBPublicListenerA941070C:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: Ec2ServiceLBPublicListenerECSGroup3DC8690E
          Type: forward
      LoadBalancerArn:
        Ref: Ec2ServiceLB381329CE
      Port: 80
      Protocol: HTTP
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/Ec2Service/LB/PublicListener/Resource
  Ec2ServiceLBPublicListenerECSGroup3DC8690E:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: "true"
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: "300"
      TargetType: instance
      VpcId:
        Ref: EfsIntegrationDemo5E06BD80
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/Ec2Service/LB/PublicListener/ECSGroup/Resource
  Ec2Service398F0E46:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: EcsCluster97242B84
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 2
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: EC2
      LoadBalancers:
        - ContainerName: cloudcmd
          ContainerPort: 80
          TargetGroupArn:
            Ref: Ec2ServiceLBPublicListenerECSGroup3DC8690E
      SchedulingStrategy: REPLICA
      TaskDefinition:
        Fn::GetAtt:
          - Ec2ServiceCustomEc2TaskDefinitionE1179CA6
          - taskDefinition.taskDefinitionArn
    DependsOn:
      - Ec2ServiceLBPublicListenerECSGroup3DC8690E
      - Ec2ServiceLBPublicListenerA941070C
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/Ec2Service/Service/Service
  Ec2ServiceCustomEc2TaskDefinitionE1179CA6:
    Type: Custom::AWS
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - AWS679f53fac002430cb0da5b7982bd22872D164C4C
          - Arn
      Create:
        action: registerTaskDefinition
        outputPath: taskDefinition.taskDefinitionArn
        parameters:
          containerDefinitions:
            - command:
                - --no-keys-panel
                - --one-file-panel
                - --port=80
                - --root=/files
              essential: TRUE:BOOLEAN
              image: coderaiser/cloudcmd:14.3.10-alpine
              logConfiguration:
                logDriver: awslogs
                options:
                  awslogs-group:
                    Ref: EcsClusterEc2ServiceInitialTaskDefinitioncloudcmdLogGroup12A2FB52
                  awslogs-stream-prefix: ecs
                  awslogs-region:
                    Ref: AWS::Region
              memory: 512
              mountPoints:
                - containerPath: /files
                  sourceVolume: files
              name: cloudcmd
              portMappings:
                - containerPort: 80
                  hostPort: 80
                  protocol: tcp
          cpu: "256"
          executionRoleArn:
            Fn::GetAtt:
              - EcsClusterEc2ServiceInitialTaskDefinitionExecutionRole0D1AD38B
              - Arn
          family: AmazonEfsIntegrationsStackEcsClusterEc2ServiceInitialTaskDefinition52893FC0
          memory: "1024"
          networkMode: bridge
          requiresCompatibilities:
            - EC2
          taskRoleArn:
            Fn::GetAtt:
              - EcsClusterEc2ServiceInitialTaskDefinitionTaskRole99D265EA
              - Arn
          volumes:
            - name: files
        physicalResourceId:
          responsePath: taskDefinition.taskDefinitionArn
        service: ECS
      Update:
        action: registerTaskDefinition
        outputPath: taskDefinition.taskDefinitionArn
        parameters:
          containerDefinitions:
            - command:
                - --no-keys-panel
                - --one-file-panel
                - --port=80
                - --root=/files
              essential: TRUE:BOOLEAN
              image: coderaiser/cloudcmd:14.3.10-alpine
              logConfiguration:
                logDriver: awslogs
                options:
                  awslogs-group:
                    Ref: EcsClusterEc2ServiceInitialTaskDefinitioncloudcmdLogGroup12A2FB52
                  awslogs-stream-prefix: ecs
                  awslogs-region:
                    Ref: AWS::Region
              memory: 512
              mountPoints:
                - containerPath: /files
                  sourceVolume: files
              name: cloudcmd
              portMappings:
                - containerPort: 80
                  hostPort: 80
                  protocol: tcp
          cpu: "256"
          executionRoleArn:
            Fn::GetAtt:
              - EcsClusterEc2ServiceInitialTaskDefinitionExecutionRole0D1AD38B
              - Arn
          family: AmazonEfsIntegrationsStackEcsClusterEc2ServiceInitialTaskDefinition52893FC0
          memory: "1024"
          networkMode: bridge
          requiresCompatibilities:
            - EC2
          taskRoleArn:
            Fn::GetAtt:
              - EcsClusterEc2ServiceInitialTaskDefinitionTaskRole99D265EA
              - Arn
          volumes:
            - name: files
        physicalResourceId:
          responsePath: taskDefinition.taskDefinitionArn
        service: ECS
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/Ec2Service/CustomEc2TaskDefinition/Resource/Default
  AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/AWS679f53fac002430cb0da5b7982bd2287/ServiceRole/Resource
  AWS679f53fac002430cb0da5b7982bd2287ServiceRoleDefaultPolicyD28E1A5E:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: ecs:RegisterTaskDefinition
            Effect: Allow
            Resource: "*"
          - Action: iam:PassRole
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - EcsClusterEc2ServiceInitialTaskDefinitionExecutionRole0D1AD38B
                - Arn
          - Action: iam:PassRole
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - EcsClusterEc2ServiceInitialTaskDefinitionTaskRole99D265EA
                - Arn
          - Action: iam:PassRole
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - FargateServiceTaskDefExecutionRole9194820E
                - Arn
          - Action: iam:PassRole
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - FargateServiceTaskDefTaskRole8CDCF85E
                - Arn
        Version: "2012-10-17"
      PolicyName: AWS679f53fac002430cb0da5b7982bd2287ServiceRoleDefaultPolicyD28E1A5E
      Roles:
        - Ref: AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/AWS679f53fac002430cb0da5b7982bd2287/ServiceRole/DefaultPolicy/Resource
  AWS679f53fac002430cb0da5b7982bd22872D164C4C:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: AssetParametersf35d0a3ea655835ce2bf399c19e80a38397cebc9cff491b04a9312c92d338669S3Bucket536257BA
        S3Key:
          Fn::Join:
            - ""
            - - Fn::Select:
                  - 0
                  - Fn::Split:
                      - "||"
                      - Ref: AssetParametersf35d0a3ea655835ce2bf399c19e80a38397cebc9cff491b04a9312c92d338669S3VersionKeyC1EF3D23
              - Fn::Select:
                  - 1
                  - Fn::Split:
                      - "||"
                      - Ref: AssetParametersf35d0a3ea655835ce2bf399c19e80a38397cebc9cff491b04a9312c92d338669S3VersionKeyC1EF3D23
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2
          - Arn
      Runtime: nodejs12.x
      Timeout: 120
    DependsOn:
      - AWS679f53fac002430cb0da5b7982bd2287ServiceRoleDefaultPolicyD28E1A5E
      - AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/AWS679f53fac002430cb0da5b7982bd2287/Resource
      aws:asset:path: asset.f35d0a3ea655835ce2bf399c19e80a38397cebc9cff491b04a9312c92d338669
      aws:asset:property: Code
  FargateServiceLBB353E155:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - Fn::GetAtt:
            - FargateServiceLBSecurityGroup5F444C78
            - GroupId
      Subnets:
        - Ref: EfsIntegrationDemoPublicSubnet1SubnetC7D18373
        - Ref: EfsIntegrationDemoPublicSubnet2Subnet1A5EB15E
      Type: application
    DependsOn:
      - EfsIntegrationDemoPublicSubnet1DefaultRoute6E4325BA
      - EfsIntegrationDemoPublicSubnet2DefaultRoute503C073B
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/FargateService/LB/Resource
  FargateServiceLBSecurityGroup5F444C78:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatically created Security Group for ELB AmazonEfsIntegrationsStackFargateServiceLB18495741
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Ref: EfsIntegrationDemo5E06BD80
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/FargateService/LB/SecurityGroup/Resource
  FargateServiceLBSecurityGrouptoAmazonEfsIntegrationsStackFargateServiceSecurityGroupF4A698D2800BB3E388:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId:
        Fn::GetAtt:
          - FargateServiceLBSecurityGroup5F444C78
          - GroupId
      IpProtocol: tcp
      Description: Load balancer to target
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - FargateServiceSecurityGroup262B61DD
          - GroupId
      FromPort: 80
      ToPort: 80
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/FargateService/LB/SecurityGroup/to AmazonEfsIntegrationsStackFargateServiceSecurityGroupF4A698D2:80
  FargateServiceLBPublicListener4B4929CA:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: FargateServiceLBPublicListenerECSGroupBE57E081
          Type: forward
      LoadBalancerArn:
        Ref: FargateServiceLBB353E155
      Port: 80
      Protocol: HTTP
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/FargateService/LB/PublicListener/Resource
  FargateServiceLBPublicListenerECSGroupBE57E081:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: "true"
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: "300"
      TargetType: ip
      VpcId:
        Ref: EfsIntegrationDemo5E06BD80
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/FargateService/LB/PublicListener/ECSGroup/Resource
  FargateServiceTaskDefTaskRole8CDCF85E:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/FargateService/TaskDef/TaskRole/Resource
  FargateServiceTaskDef940E3A80:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: coderaiser/cloudcmd:14.3.10-alpine
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: FargateServiceTaskDefcloudcmdLogGroup33E0EE91
              awslogs-stream-prefix: FargateService
              awslogs-region:
                Ref: AWS::Region
          Name: cloudcmd
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
      Cpu: "256"
      ExecutionRoleArn:
        Fn::GetAtt:
          - FargateServiceTaskDefExecutionRole9194820E
          - Arn
      Family: AmazonEfsIntegrationsStackFargateServiceTaskDefB2BCC0E3
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::GetAtt:
          - FargateServiceTaskDefTaskRole8CDCF85E
          - Arn
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/FargateService/TaskDef/Resource
  FargateServiceTaskDefcloudcmdLogGroup33E0EE91:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/FargateService/TaskDef/cloudcmd/LogGroup/Resource
  FargateServiceTaskDefExecutionRole9194820E:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/FargateService/TaskDef/ExecutionRole/Resource
  FargateServiceTaskDefExecutionRoleDefaultPolicy827E7CA2:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - FargateServiceTaskDefcloudcmdLogGroup33E0EE91
                - Arn
        Version: "2012-10-17"
      PolicyName: FargateServiceTaskDefExecutionRoleDefaultPolicy827E7CA2
      Roles:
        - Ref: FargateServiceTaskDefExecutionRole9194820E
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/FargateService/TaskDef/ExecutionRole/DefaultPolicy/Resource
  FargateServiceECC8084D:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: EcsCluster97242B84
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 2
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: cloudcmd
          ContainerPort: 80
          TargetGroupArn:
            Ref: FargateServiceLBPublicListenerECSGroupBE57E081
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::GetAtt:
                - FargateServiceSecurityGroup262B61DD
                - GroupId
          Subnets:
            - Ref: EfsIntegrationDemoPrivateSubnet1Subnet4B53E9A6
            - Ref: EfsIntegrationDemoPrivateSubnet2SubnetE3DC34B0
      PlatformVersion: 1.4.0
      TaskDefinition:
        Fn::GetAtt:
          - FargateServiceCustomFargateTaskDefinition8C80D746
          - taskDefinition.taskDefinitionArn
    DependsOn:
      - FargateServiceLBPublicListenerECSGroupBE57E081
      - FargateServiceLBPublicListener4B4929CA
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/FargateService/Service/Service
  FargateServiceSecurityGroup262B61DD:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: AmazonEfsIntegrationsStack/FargateService/Service/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: EfsIntegrationDemo5E06BD80
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/FargateService/Service/SecurityGroup/Resource
  FargateServiceSecurityGroupfromAmazonEfsIntegrationsStackFargateServiceLBSecurityGroupCA63B143802FF70329:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort: 80
      GroupId:
        Fn::GetAtt:
          - FargateServiceSecurityGroup262B61DD
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - FargateServiceLBSecurityGroup5F444C78
          - GroupId
      ToPort: 80
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/FargateService/Service/SecurityGroup/from AmazonEfsIntegrationsStackFargateServiceLBSecurityGroupCA63B143:80
  FargateServiceCustomFargateTaskDefinition8C80D746:
    Type: Custom::AWS
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - AWS679f53fac002430cb0da5b7982bd22872D164C4C
          - Arn
      Create:
        action: registerTaskDefinition
        outputPath: taskDefinition.taskDefinitionArn
        parameters:
          containerDefinitions:
            - command:
                - --no-keys-panel
                - --one-file-panel
                - --port=80
                - --root=/files
              essential: TRUE:BOOLEAN
              image: coderaiser/cloudcmd:14.3.10-alpine
              logConfiguration:
                logDriver: awslogs
                options:
                  awslogs-group:
                    Ref: FargateServiceTaskDefcloudcmdLogGroup33E0EE91
                  awslogs-stream-prefix: FargateService
                  awslogs-region:
                    Ref: AWS::Region
              memory: 512
              mountPoints:
                - containerPath: /files
                  sourceVolume: files
              name: cloudcmd
              portMappings:
                - containerPort: 80
                  hostPort: 80
                  protocol: tcp
          cpu: "256"
          executionRoleArn:
            Fn::GetAtt:
              - FargateServiceTaskDefExecutionRole9194820E
              - Arn
          family: AmazonEfsIntegrationsStackFargateServiceTaskDefB2BCC0E3
          memory: "1024"
          networkMode: awsvpc
          requiresCompatibilities:
            - FARGATE
          taskRoleArn:
            Fn::GetAtt:
              - FargateServiceTaskDefTaskRole8CDCF85E
              - Arn
          volumes:
            - name: files
        physicalResourceId:
          responsePath: taskDefinition.taskDefinitionArn
        service: ECS
      Update:
        action: registerTaskDefinition
        outputPath: taskDefinition.taskDefinitionArn
        parameters:
          containerDefinitions:
            - command:
                - --no-keys-panel
                - --one-file-panel
                - --port=80
                - --root=/files
              essential: TRUE:BOOLEAN
              image: coderaiser/cloudcmd:14.3.10-alpine
              logConfiguration:
                logDriver: awslogs
                options:
                  awslogs-group:
                    Ref: FargateServiceTaskDefcloudcmdLogGroup33E0EE91
                  awslogs-stream-prefix: FargateService
                  awslogs-region:
                    Ref: AWS::Region
              memory: 512
              mountPoints:
                - containerPath: /files
                  sourceVolume: files
              name: cloudcmd
              portMappings:
                - containerPort: 80
                  hostPort: 80
                  protocol: tcp
          cpu: "256"
          executionRoleArn:
            Fn::GetAtt:
              - FargateServiceTaskDefExecutionRole9194820E
              - Arn
          family: AmazonEfsIntegrationsStackFargateServiceTaskDefB2BCC0E3
          memory: "1024"
          networkMode: awsvpc
          requiresCompatibilities:
            - FARGATE
          taskRoleArn:
            Fn::GetAtt:
              - FargateServiceTaskDefTaskRole8CDCF85E
              - Arn
          volumes:
            - name: files
        physicalResourceId:
          responsePath: taskDefinition.taskDefinitionArn
        service: ECS
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: AmazonEfsIntegrationsStack/FargateService/CustomFargateTaskDefinition/Resource/Default
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Modules: aws-cdk=2.113.0,@aws-cdk/assets=1.41.0,@aws-cdk/aws-applicationautoscaling=1.41.0,@aws-cdk/aws-autoscaling=1.41.0,@aws-cdk/aws-autoscaling-common=1.41.0,@aws-cdk/aws-autoscaling-hooktargets=1.41.0,@aws-cdk/aws-certificatemanager=1.41.0,@aws-cdk/aws-cloudwatch=1.41.0,@aws-cdk/aws-ec2=1.41.0,@aws-cdk/aws-ecr=1.41.0,@aws-cdk/aws-ecr-assets=1.41.0,@aws-cdk/aws-ecs=1.41.0,@aws-cdk/aws-ecs-patterns=1.41.0,@aws-cdk/aws-efs=1.41.0,@aws-cdk/aws-elasticloadbalancingv2=1.41.0,@aws-cdk/aws-events=1.41.0,@aws-cdk/aws-events-targets=1.41.0,@aws-cdk/aws-iam=1.41.0,@aws-cdk/aws-kms=1.41.0,@aws-cdk/aws-lambda=1.41.0,@aws-cdk/aws-logs=1.41.0,@aws-cdk/aws-route53=1.41.0,@aws-cdk/aws-route53-targets=1.41.0,@aws-cdk/aws-s3=1.41.0,@aws-cdk/aws-s3-assets=1.41.0,@aws-cdk/aws-servicediscovery=1.41.0,@aws-cdk/aws-sns=1.41.0,@aws-cdk/aws-sns-subscriptions=1.41.0,@aws-cdk/aws-sqs=1.41.0,@aws-cdk/aws-ssm=1.41.0,@aws-cdk/cdk-assets-schema=1.41.0,@aws-cdk/cloud-assembly-schema=1.41.0,@aws-cdk/core=1.41.0,@aws-cdk/custom-resources=1.41.0,@aws-cdk/cx-api=1.41.0,@aws-cdk/region-info=1.41.0,jsii-runtime=node.js/v18.12.1
    Condition: CDKMetadataAvailable
Parameters:
  SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
  AssetParametersf35d0a3ea655835ce2bf399c19e80a38397cebc9cff491b04a9312c92d338669S3Bucket536257BA:
    Type: String
    Description: S3 bucket for asset "f35d0a3ea655835ce2bf399c19e80a38397cebc9cff491b04a9312c92d338669"
  AssetParametersf35d0a3ea655835ce2bf399c19e80a38397cebc9cff491b04a9312c92d338669S3VersionKeyC1EF3D23:
    Type: String
    Description: S3 key for asset version "f35d0a3ea655835ce2bf399c19e80a38397cebc9cff491b04a9312c92d338669"
  AssetParametersf35d0a3ea655835ce2bf399c19e80a38397cebc9cff491b04a9312c92d338669ArtifactHash2C09C7CA:
    Type: String
    Description: Artifact hash for asset "f35d0a3ea655835ce2bf399c19e80a38397cebc9cff491b04a9312c92d338669"
Outputs:
  Ec2ServiceLoadBalancerDNS6983C9B2:
    Value:
      Fn::GetAtt:
        - Ec2ServiceLB381329CE
        - DNSName
  Ec2ServiceServiceURL8FE8FAED:
    Value:
      Fn::Join:
        - ""
        - - http://
          - Fn::GetAtt:
              - Ec2ServiceLB381329CE
              - DNSName
  FargateServiceLoadBalancerDNS9433D5F6:
    Value:
      Fn::GetAtt:
        - FargateServiceLBB353E155
        - DNSName
  FargateServiceServiceURL47701F45:
    Value:
      Fn::Join:
        - ""
        - - http://
          - Fn::GetAtt:
              - FargateServiceLBB353E155
              - DNSName
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - il-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - me-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2

