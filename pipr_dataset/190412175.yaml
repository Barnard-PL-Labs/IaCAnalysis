Resources:
  nodejsvpcE087186C:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: Chat2Stack/nodejs-vpc
    Metadata:
      aws:cdk:path: Chat2Stack/nodejs-vpc/Resource
  nodejsvpcPublicSubnet1Subnet706AD051:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/18
      VpcId:
        Ref: nodejsvpcE087186C
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: Chat2Stack/nodejs-vpc/PublicSubnet1
    Metadata:
      aws:cdk:path: Chat2Stack/nodejs-vpc/PublicSubnet1/Subnet
  nodejsvpcPublicSubnet1RouteTable5D6E4B77:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: nodejsvpcE087186C
      Tags:
        - Key: Name
          Value: Chat2Stack/nodejs-vpc/PublicSubnet1
    Metadata:
      aws:cdk:path: Chat2Stack/nodejs-vpc/PublicSubnet1/RouteTable
  nodejsvpcPublicSubnet1RouteTableAssociation582F74AA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: nodejsvpcPublicSubnet1RouteTable5D6E4B77
      SubnetId:
        Ref: nodejsvpcPublicSubnet1Subnet706AD051
    Metadata:
      aws:cdk:path: Chat2Stack/nodejs-vpc/PublicSubnet1/RouteTableAssociation
  nodejsvpcPublicSubnet1DefaultRoute3DAB7447:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: nodejsvpcPublicSubnet1RouteTable5D6E4B77
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: nodejsvpcIGW46933674
    DependsOn:
      - nodejsvpcVPCGWCF41A056
    Metadata:
      aws:cdk:path: Chat2Stack/nodejs-vpc/PublicSubnet1/DefaultRoute
  nodejsvpcPublicSubnet1EIPBF0F42B8:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: Chat2Stack/nodejs-vpc/PublicSubnet1
    Metadata:
      aws:cdk:path: Chat2Stack/nodejs-vpc/PublicSubnet1/EIP
  nodejsvpcPublicSubnet1NATGateway4F66E05B:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - nodejsvpcPublicSubnet1EIPBF0F42B8
          - AllocationId
      SubnetId:
        Ref: nodejsvpcPublicSubnet1Subnet706AD051
      Tags:
        - Key: Name
          Value: Chat2Stack/nodejs-vpc/PublicSubnet1
    Metadata:
      aws:cdk:path: Chat2Stack/nodejs-vpc/PublicSubnet1/NATGateway
  nodejsvpcPublicSubnet2SubnetC99E7945:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.64.0/18
      VpcId:
        Ref: nodejsvpcE087186C
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: Chat2Stack/nodejs-vpc/PublicSubnet2
    Metadata:
      aws:cdk:path: Chat2Stack/nodejs-vpc/PublicSubnet2/Subnet
  nodejsvpcPublicSubnet2RouteTable90A11BD1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: nodejsvpcE087186C
      Tags:
        - Key: Name
          Value: Chat2Stack/nodejs-vpc/PublicSubnet2
    Metadata:
      aws:cdk:path: Chat2Stack/nodejs-vpc/PublicSubnet2/RouteTable
  nodejsvpcPublicSubnet2RouteTableAssociationBFA59E2B:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: nodejsvpcPublicSubnet2RouteTable90A11BD1
      SubnetId:
        Ref: nodejsvpcPublicSubnet2SubnetC99E7945
    Metadata:
      aws:cdk:path: Chat2Stack/nodejs-vpc/PublicSubnet2/RouteTableAssociation
  nodejsvpcPublicSubnet2DefaultRouteFAC64FC8:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: nodejsvpcPublicSubnet2RouteTable90A11BD1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: nodejsvpcIGW46933674
    DependsOn:
      - nodejsvpcVPCGWCF41A056
    Metadata:
      aws:cdk:path: Chat2Stack/nodejs-vpc/PublicSubnet2/DefaultRoute
  nodejsvpcPrivateSubnet1Subnet5214B414:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.128.0/18
      VpcId:
        Ref: nodejsvpcE087186C
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: Chat2Stack/nodejs-vpc/PrivateSubnet1
    Metadata:
      aws:cdk:path: Chat2Stack/nodejs-vpc/PrivateSubnet1/Subnet
  nodejsvpcPrivateSubnet1RouteTableC6724D27:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: nodejsvpcE087186C
      Tags:
        - Key: Name
          Value: Chat2Stack/nodejs-vpc/PrivateSubnet1
    Metadata:
      aws:cdk:path: Chat2Stack/nodejs-vpc/PrivateSubnet1/RouteTable
  nodejsvpcPrivateSubnet1RouteTableAssociationEE9314B4:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: nodejsvpcPrivateSubnet1RouteTableC6724D27
      SubnetId:
        Ref: nodejsvpcPrivateSubnet1Subnet5214B414
    Metadata:
      aws:cdk:path: Chat2Stack/nodejs-vpc/PrivateSubnet1/RouteTableAssociation
  nodejsvpcPrivateSubnet1DefaultRoute9A140DEE:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: nodejsvpcPrivateSubnet1RouteTableC6724D27
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: nodejsvpcPublicSubnet1NATGateway4F66E05B
    Metadata:
      aws:cdk:path: Chat2Stack/nodejs-vpc/PrivateSubnet1/DefaultRoute
  nodejsvpcPrivateSubnet2SubnetE8DD24E2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.192.0/18
      VpcId:
        Ref: nodejsvpcE087186C
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: Chat2Stack/nodejs-vpc/PrivateSubnet2
    Metadata:
      aws:cdk:path: Chat2Stack/nodejs-vpc/PrivateSubnet2/Subnet
  nodejsvpcPrivateSubnet2RouteTableA2D8166A:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: nodejsvpcE087186C
      Tags:
        - Key: Name
          Value: Chat2Stack/nodejs-vpc/PrivateSubnet2
    Metadata:
      aws:cdk:path: Chat2Stack/nodejs-vpc/PrivateSubnet2/RouteTable
  nodejsvpcPrivateSubnet2RouteTableAssociationE09A06E9:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: nodejsvpcPrivateSubnet2RouteTableA2D8166A
      SubnetId:
        Ref: nodejsvpcPrivateSubnet2SubnetE8DD24E2
    Metadata:
      aws:cdk:path: Chat2Stack/nodejs-vpc/PrivateSubnet2/RouteTableAssociation
  nodejsvpcPrivateSubnet2DefaultRoute3B73AEA4:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: nodejsvpcPrivateSubnet2RouteTableA2D8166A
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: nodejsvpcPublicSubnet1NATGateway4F66E05B
    Metadata:
      aws:cdk:path: Chat2Stack/nodejs-vpc/PrivateSubnet2/DefaultRoute
  nodejsvpcIGW46933674:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Chat2Stack/nodejs-vpc
    Metadata:
      aws:cdk:path: Chat2Stack/nodejs-vpc/IGW
  nodejsvpcVPCGWCF41A056:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: nodejsvpcE087186C
      InternetGatewayId:
        Ref: nodejsvpcIGW46933674
    Metadata:
      aws:cdk:path: Chat2Stack/nodejs-vpc/VPCGW
  ecscluster7830E7B5:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: ChatCluster
    Metadata:
      aws:cdk:path: Chat2Stack/ecs-cluster/Resource
  ecsclusterDefaultServiceDiscoveryNamespace4A6F10CB:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: chat.service
      Vpc:
        Ref: nodejsvpcE087186C
    Metadata:
      aws:cdk:path: Chat2Stack/ecs-cluster/DefaultServiceDiscoveryNamespace/Resource
  redisTaskTaskRoleB9A51049:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: Chat2Stack/redisTask/TaskRole/Resource
  redisTask111ED72C:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: redis
          Name: redis
          PortMappings:
            - ContainerPort: 6379
              Protocol: tcp
      Cpu: "256"
      Family: Chat2StackredisTask19243EFD
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::GetAtt:
          - redisTaskTaskRoleB9A51049
          - Arn
    Metadata:
      aws:cdk:path: Chat2Stack/redisTask/Resource
  redisService16DB323B:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: ecscluster7830E7B5
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 1
      EnableECSManagedTags: false
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::GetAtt:
                - redisSecurityGroupCBD242CB
                - GroupId
          Subnets:
            - Ref: nodejsvpcPrivateSubnet1Subnet5214B414
            - Ref: nodejsvpcPrivateSubnet2SubnetE8DD24E2
      ServiceRegistries:
        - RegistryArn:
            Fn::GetAtt:
              - redisCloudmapService76D9DC67
              - Arn
      TaskDefinition:
        Ref: redisTask111ED72C
    Metadata:
      aws:cdk:path: Chat2Stack/redis/Service
  redisCloudmapService76D9DC67:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        NamespaceId:
          Fn::GetAtt:
            - ecsclusterDefaultServiceDiscoveryNamespace4A6F10CB
            - Id
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: redis
      NamespaceId:
        Fn::GetAtt:
          - ecsclusterDefaultServiceDiscoveryNamespace4A6F10CB
          - Id
    Metadata:
      aws:cdk:path: Chat2Stack/redis/CloudmapService/Resource
  redisSecurityGroupCBD242CB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Chat2Stack/redis/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: nodejsvpcE087186C
    Metadata:
      aws:cdk:path: Chat2Stack/redis/SecurityGroup/Resource
  redisSecurityGroupfromChat2StackchatServiceSecurityGroupABABB8BA63799F0E9D61:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: from Chat2StackchatServiceSecurityGroupABABB8BA:6379
      FromPort: 6379
      GroupId:
        Fn::GetAtt:
          - redisSecurityGroupCBD242CB
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - chatServiceSecurityGroup54D6B5E9
          - GroupId
      ToPort: 6379
    Metadata:
      aws:cdk:path: Chat2Stack/redis/SecurityGroup/from Chat2StackchatServiceSecurityGroupABABB8BA:6379
  chatLB0898F89A:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: "false"
      Scheme: internet-facing
      SecurityGroups:
        - Fn::GetAtt:
            - chatLBSecurityGroup5DBD966C
            - GroupId
      Subnets:
        - Ref: nodejsvpcPublicSubnet1Subnet706AD051
        - Ref: nodejsvpcPublicSubnet2SubnetC99E7945
      Type: application
    DependsOn:
      - nodejsvpcPublicSubnet1DefaultRoute3DAB7447
      - nodejsvpcPublicSubnet2DefaultRouteFAC64FC8
    Metadata:
      aws:cdk:path: Chat2Stack/chat/LB/Resource
  chatLBSecurityGroup5DBD966C:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatically created Security Group for ELB Chat2StackchatLB84022997
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Ref: nodejsvpcE087186C
    Metadata:
      aws:cdk:path: Chat2Stack/chat/LB/SecurityGroup/Resource
  chatLBSecurityGrouptoChat2StackchatServiceSecurityGroupABABB8BA300064CFA9E3:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId:
        Fn::GetAtt:
          - chatLBSecurityGroup5DBD966C
          - GroupId
      IpProtocol: tcp
      Description: Load balancer to target
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - chatServiceSecurityGroup54D6B5E9
          - GroupId
      FromPort: 3000
      ToPort: 3000
    Metadata:
      aws:cdk:path: Chat2Stack/chat/LB/SecurityGroup/to Chat2StackchatServiceSecurityGroupABABB8BA:3000
  chatLBPublicListenerB5FA7037:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: chatLBPublicListenerECSGroupDDA2FB9D
          Type: forward
      LoadBalancerArn:
        Ref: chatLB0898F89A
      Port: 80
      Protocol: HTTP
    Metadata:
      aws:cdk:path: Chat2Stack/chat/LB/PublicListener/Resource
  chatLBPublicListenerECSGroupDDA2FB9D:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Ref: nodejsvpcE087186C
    Metadata:
      aws:cdk:path: Chat2Stack/chat/LB/PublicListener/ECSGroup/Resource
  chatTaskDefTaskRole42A4473B:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: Chat2Stack/chat/TaskDef/TaskRole/Resource
  chatTaskDef90F9D58B:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Environment:
            - Name: APP_PORT
              Value: "3000"
            - Name: REDIS_URL
              Value: redis://redis.chat.service:6379
          Essential: true
          Image:
            Fn::Join:
              - ""
              - - Ref: AWS::AccountId
                - .dkr.ecr.
                - Ref: AWS::Region
                - "."
                - Ref: AWS::URLSuffix
                - /aws-cdk/assets:ec21eb6fc5312601988e8d5891a2554ca50b3f486a828e2dc8572e7b7a965fe7
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: chatTaskDefwebLogGroup002ECFE3
              awslogs-stream-prefix: chat
              awslogs-region:
                Ref: AWS::Region
          Name: web
          PortMappings:
            - ContainerPort: 3000
              Protocol: tcp
      Cpu: "256"
      ExecutionRoleArn:
        Fn::GetAtt:
          - chatTaskDefExecutionRole5EE0785E
          - Arn
      Family: Chat2StackchatTaskDef8AC3C63D
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::GetAtt:
          - chatTaskDefTaskRole42A4473B
          - Arn
    Metadata:
      aws:cdk:path: Chat2Stack/chat/TaskDef/Resource
  chatTaskDefwebLogGroup002ECFE3:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 60
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: Chat2Stack/chat/TaskDef/web/LogGroup/Resource
  chatTaskDefExecutionRole5EE0785E:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: Chat2Stack/chat/TaskDef/ExecutionRole/Resource
  chatTaskDefExecutionRoleDefaultPolicyE94C17A1:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":ecr:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :repository/aws-cdk/assets
          - Action: ecr:GetAuthorizationToken
            Effect: Allow
            Resource: "*"
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - chatTaskDefwebLogGroup002ECFE3
                - Arn
        Version: "2012-10-17"
      PolicyName: chatTaskDefExecutionRoleDefaultPolicyE94C17A1
      Roles:
        - Ref: chatTaskDefExecutionRole5EE0785E
    Metadata:
      aws:cdk:path: Chat2Stack/chat/TaskDef/ExecutionRole/DefaultPolicy/Resource
  chatServiceFE278A52:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: ecscluster7830E7B5
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 1
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: web
          ContainerPort: 3000
          TargetGroupArn:
            Ref: chatLBPublicListenerECSGroupDDA2FB9D
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::GetAtt:
                - chatServiceSecurityGroup54D6B5E9
                - GroupId
          Subnets:
            - Ref: nodejsvpcPrivateSubnet1Subnet5214B414
            - Ref: nodejsvpcPrivateSubnet2SubnetE8DD24E2
      TaskDefinition:
        Ref: chatTaskDef90F9D58B
    DependsOn:
      - chatLBPublicListenerECSGroupDDA2FB9D
      - chatLBPublicListenerB5FA7037
    Metadata:
      aws:cdk:path: Chat2Stack/chat/Service/Service
  chatServiceSecurityGroup54D6B5E9:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Chat2Stack/chat/Service/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: nodejsvpcE087186C
    Metadata:
      aws:cdk:path: Chat2Stack/chat/Service/SecurityGroup/Resource
  chatServiceSecurityGroupfromChat2StackchatLBSecurityGroup8D78B8F03000936DC549:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort: 3000
      GroupId:
        Fn::GetAtt:
          - chatServiceSecurityGroup54D6B5E9
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - chatLBSecurityGroup5DBD966C
          - GroupId
      ToPort: 3000
    Metadata:
      aws:cdk:path: Chat2Stack/chat/Service/SecurityGroup/from Chat2StackchatLBSecurityGroup8D78B8F0:3000
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAAE31T227bMAz9lr0rKlJgwPa2NOmKAEVnOEXfGZn11NiSIVIuAsP/PsqXxuuCPeno8CLykFrr71/1+ssPeKeVKU43nfEBdXdgMCeVI/kYDKrtq/sVuYmstt4Rh2g4cUu7GArL1rtepVwdmlvdvTQm2V6yrcrisbLmEI8Oh9gLyn1kfIZjhRf+wm2IvLGQMn84J3C/z9LxBPwAjO9wVlmwrcBL4r1jDIJnh7GS6bZhafF3jY7VAU0Mls8PwcdmqOG/xN6VAYn+4e8HuldoSHfbKpK8PigzwZ8QSkhd0WmHr9bZuafPjHcM1mFYcFPsAUNrR70n2CsaQWHJ+BbDWXeTEDtHT1AjNTBGXKOvJbRQ6y734ziGM/MyukG/EQ09rhrgpC/pTdMIO4zo0UNxBxU4KehTzVgBsTWVeBwHD+vKVnbkevSg3F/3pZ8VQd3kM+OF/VlelrHP01tcU+VhBUTIpHfenDDsayjTlsnOiE3n2Hiy7MP5DghV5UuZ5qMvP7LNuJdFH/PIZymlmV45X6B+o5t2/U2vb+VbvZG1qxAd2xp1Pp5/AMBoTRFyAwAA
    Metadata:
      aws:cdk:path: Chat2Stack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Outputs:
  chatLoadBalancerDNS9184B21D:
    Value:
      Fn::GetAtt:
        - chatLB0898F89A
        - DNSName
  chatServiceURL2D7B8CAD:
    Value:
      Fn::Join:
        - ""
        - - http://
          - Fn::GetAtt:
              - chatLB0898F89A
              - DNSName
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2

