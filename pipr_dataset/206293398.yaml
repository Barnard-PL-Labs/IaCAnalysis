Resources:
  EcsVpcCEF3634B:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: EcsNvidiaRapidsDemoStack/EcsVpc
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/EcsVpc/Resource
  EcsVpcPublicSubnet1Subnet4FC26CFD:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/18
      VpcId:
        Ref: EcsVpcCEF3634B
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: EcsNvidiaRapidsDemoStack/EcsVpc/PublicSubnet1
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/EcsVpc/PublicSubnet1/Subnet
  EcsVpcPublicSubnet1RouteTable3F836709:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: EcsVpcCEF3634B
      Tags:
        - Key: Name
          Value: EcsNvidiaRapidsDemoStack/EcsVpc/PublicSubnet1
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/EcsVpc/PublicSubnet1/RouteTable
  EcsVpcPublicSubnet1RouteTableAssociation27B0B1F1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: EcsVpcPublicSubnet1RouteTable3F836709
      SubnetId:
        Ref: EcsVpcPublicSubnet1Subnet4FC26CFD
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/EcsVpc/PublicSubnet1/RouteTableAssociation
  EcsVpcPublicSubnet1DefaultRoute29B4D851:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: EcsVpcPublicSubnet1RouteTable3F836709
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: EcsVpcIGWF80402C4
    DependsOn:
      - EcsVpcVPCGWE2526015
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/EcsVpc/PublicSubnet1/DefaultRoute
  EcsVpcPublicSubnet1EIP97CC60E8:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/EcsVpc/PublicSubnet1/EIP
  EcsVpcPublicSubnet1NATGateway84F4640B:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - EcsVpcPublicSubnet1EIP97CC60E8
          - AllocationId
      SubnetId:
        Ref: EcsVpcPublicSubnet1Subnet4FC26CFD
      Tags:
        - Key: Name
          Value: EcsNvidiaRapidsDemoStack/EcsVpc/PublicSubnet1
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/EcsVpc/PublicSubnet1/NATGateway
  EcsVpcPublicSubnet2Subnet127B1F4A:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.64.0/18
      VpcId:
        Ref: EcsVpcCEF3634B
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: EcsNvidiaRapidsDemoStack/EcsVpc/PublicSubnet2
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/EcsVpc/PublicSubnet2/Subnet
  EcsVpcPublicSubnet2RouteTable259A8B2D:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: EcsVpcCEF3634B
      Tags:
        - Key: Name
          Value: EcsNvidiaRapidsDemoStack/EcsVpc/PublicSubnet2
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/EcsVpc/PublicSubnet2/RouteTable
  EcsVpcPublicSubnet2RouteTableAssociation6449DB9B:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: EcsVpcPublicSubnet2RouteTable259A8B2D
      SubnetId:
        Ref: EcsVpcPublicSubnet2Subnet127B1F4A
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/EcsVpc/PublicSubnet2/RouteTableAssociation
  EcsVpcPublicSubnet2DefaultRouteD785541D:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: EcsVpcPublicSubnet2RouteTable259A8B2D
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: EcsVpcIGWF80402C4
    DependsOn:
      - EcsVpcVPCGWE2526015
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/EcsVpc/PublicSubnet2/DefaultRoute
  EcsVpcPublicSubnet2EIP9B6C83AE:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/EcsVpc/PublicSubnet2/EIP
  EcsVpcPublicSubnet2NATGatewayDFAD96D0:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - EcsVpcPublicSubnet2EIP9B6C83AE
          - AllocationId
      SubnetId:
        Ref: EcsVpcPublicSubnet2Subnet127B1F4A
      Tags:
        - Key: Name
          Value: EcsNvidiaRapidsDemoStack/EcsVpc/PublicSubnet2
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/EcsVpc/PublicSubnet2/NATGateway
  EcsVpcPrivateSubnet1SubnetDE1C6717:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.128.0/18
      VpcId:
        Ref: EcsVpcCEF3634B
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: EcsNvidiaRapidsDemoStack/EcsVpc/PrivateSubnet1
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/EcsVpc/PrivateSubnet1/Subnet
  EcsVpcPrivateSubnet1RouteTable44D603B2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: EcsVpcCEF3634B
      Tags:
        - Key: Name
          Value: EcsNvidiaRapidsDemoStack/EcsVpc/PrivateSubnet1
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/EcsVpc/PrivateSubnet1/RouteTable
  EcsVpcPrivateSubnet1RouteTableAssociationA072EBC4:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: EcsVpcPrivateSubnet1RouteTable44D603B2
      SubnetId:
        Ref: EcsVpcPrivateSubnet1SubnetDE1C6717
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/EcsVpc/PrivateSubnet1/RouteTableAssociation
  EcsVpcPrivateSubnet1DefaultRoute523B7F1A:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: EcsVpcPrivateSubnet1RouteTable44D603B2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: EcsVpcPublicSubnet1NATGateway84F4640B
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/EcsVpc/PrivateSubnet1/DefaultRoute
  EcsVpcPrivateSubnet2Subnet4E5EDAB1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.192.0/18
      VpcId:
        Ref: EcsVpcCEF3634B
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: EcsNvidiaRapidsDemoStack/EcsVpc/PrivateSubnet2
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/EcsVpc/PrivateSubnet2/Subnet
  EcsVpcPrivateSubnet2RouteTable1CB3B77F:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: EcsVpcCEF3634B
      Tags:
        - Key: Name
          Value: EcsNvidiaRapidsDemoStack/EcsVpc/PrivateSubnet2
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/EcsVpc/PrivateSubnet2/RouteTable
  EcsVpcPrivateSubnet2RouteTableAssociation136FEFD9:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: EcsVpcPrivateSubnet2RouteTable1CB3B77F
      SubnetId:
        Ref: EcsVpcPrivateSubnet2Subnet4E5EDAB1
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/EcsVpc/PrivateSubnet2/RouteTableAssociation
  EcsVpcPrivateSubnet2DefaultRoute1D92C4ED:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: EcsVpcPrivateSubnet2RouteTable1CB3B77F
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: EcsVpcPublicSubnet2NATGatewayDFAD96D0
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/EcsVpc/PrivateSubnet2/DefaultRoute
  EcsVpcIGWF80402C4:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: EcsNvidiaRapidsDemoStack/EcsVpc
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/EcsVpc/IGW
  EcsVpcVPCGWE2526015:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: EcsVpcCEF3634B
      InternetGatewayId:
        Ref: EcsVpcIGWF80402C4
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/EcsVpc/VPCGW
  EcsFleetInstanceSecurityGroup161FB51F:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EcsNvidiaRapidsDemoStack/EcsFleet/InstanceSecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: EcsNvidiaRapidsDemoStack/EcsFleet
      VpcId:
        Ref: EcsVpcCEF3634B
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/EcsFleet/InstanceSecurityGroup/Resource
  EcsFleetInstanceSecurityGroupfromEcsNvidiaRapidsDemoStackLBSecurityGroupBFB15C888888792A20E1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort: 8888
      GroupId:
        Fn::GetAtt:
          - EcsFleetInstanceSecurityGroup161FB51F
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - LBSecurityGroup8A41EA2B
          - GroupId
      ToPort: 8888
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/EcsFleet/InstanceSecurityGroup/from EcsNvidiaRapidsDemoStackLBSecurityGroupBFB15C88:8888
  EcsFleetInstanceRole4C508321:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - ec2.
                    - Ref: AWS::URLSuffix
        Version: "2012-10-17"
      Tags:
        - Key: Name
          Value: EcsNvidiaRapidsDemoStack/EcsFleet
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/EcsFleet/InstanceRole/Resource
  EcsFleetInstanceRoleDefaultPolicy22224EF1:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecs:CreateCluster
              - ecs:DeregisterContainerInstance
              - ecs:DiscoverPollEndpoint
              - ecs:Poll
              - ecs:RegisterContainerInstance
              - ecs:StartTelemetrySession
              - ecs:Submit*
              - ecr:GetAuthorizationToken
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: EcsFleetInstanceRoleDefaultPolicy22224EF1
      Roles:
        - Ref: EcsFleetInstanceRole4C508321
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/EcsFleet/InstanceRole/DefaultPolicy/Resource
  EcsFleetInstanceProfile3FE43BA9:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: EcsFleetInstanceRole4C508321
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/EcsFleet/InstanceProfile
  EcsFleetLaunchConfig5BC6E4A7:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        Ref: SsmParameterValueawsserviceecsoptimizedamiamazonlinux2gpurecommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter
      InstanceType: p3.2xlarge
      IamInstanceProfile:
        Ref: EcsFleetInstanceProfile3FE43BA9
      SecurityGroups:
        - Fn::GetAtt:
            - EcsFleetInstanceSecurityGroup161FB51F
            - GroupId
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - |-
                #!/bin/bash
                echo ECS_CLUSTER=
              - Ref: RapidsCluster67B37DAC
              - |-2
                 >> /etc/ecs/ecs.config
                sudo iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP
                sudo service iptables save
                echo ECS_AWSVPC_BLOCK_IMDS=true >> /etc/ecs/ecs.config
    DependsOn:
      - EcsFleetInstanceRoleDefaultPolicy22224EF1
      - EcsFleetInstanceRole4C508321
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/EcsFleet/LaunchConfig
  EcsFleetASGF5E1F682:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MaxSize: "1"
      MinSize: "1"
      DesiredCapacity: "1"
      LaunchConfigurationName:
        Ref: EcsFleetLaunchConfig5BC6E4A7
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: EcsNvidiaRapidsDemoStack/EcsFleet
      TargetGroupARNs:
        - Ref: LBListenerTargetGroupF04FCF6D
      VPCZoneIdentifier:
        - Ref: EcsVpcPrivateSubnet1SubnetDE1C6717
        - Ref: EcsVpcPrivateSubnet2Subnet4E5EDAB1
    UpdatePolicy:
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: true
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/EcsFleet/ASG
  EcsFleetDrainECSHookFunctionServiceRoleE43171BB:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Name
          Value: EcsNvidiaRapidsDemoStack/EcsFleet
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/EcsFleet/DrainECSHook/Function/ServiceRole/Resource
  EcsFleetDrainECSHookFunctionServiceRoleDefaultPolicy219A44E4:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ec2:DescribeInstances
              - ec2:DescribeInstanceAttribute
              - ec2:DescribeInstanceStatus
              - ec2:DescribeHosts
            Effect: Allow
            Resource: "*"
          - Action: autoscaling:CompleteLifecycleAction
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":autoscaling:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :autoScalingGroup:*:autoScalingGroupName/
                  - Ref: EcsFleetASGF5E1F682
          - Action:
              - ecs:DescribeContainerInstances
              - ecs:DescribeTasks
            Effect: Allow
            Resource: "*"
          - Action:
              - ecs:ListContainerInstances
              - ecs:SubmitContainerStateChange
              - ecs:SubmitTaskStateChange
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - RapidsCluster67B37DAC
                - Arn
          - Action:
              - ecs:UpdateContainerInstancesState
              - ecs:ListTasks
            Condition:
              ArnEquals:
                ecs:cluster:
                  Fn::GetAtt:
                    - RapidsCluster67B37DAC
                    - Arn
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: EcsFleetDrainECSHookFunctionServiceRoleDefaultPolicy219A44E4
      Roles:
        - Ref: EcsFleetDrainECSHookFunctionServiceRoleE43171BB
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/EcsFleet/DrainECSHook/Function/ServiceRole/DefaultPolicy/Resource
  EcsFleetDrainECSHookFunction75792A24:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3, json, os, time

          ecs = boto3.client('ecs')
          autoscaling = boto3.client('autoscaling')


          def lambda_handler(event, context):
            print(json.dumps(event))
            cluster = os.environ['CLUSTER']
            snsTopicArn = event['Records'][0]['Sns']['TopicArn']
            lifecycle_event = json.loads(event['Records'][0]['Sns']['Message'])
            instance_id = lifecycle_event.get('EC2InstanceId')
            if not instance_id:
              print('Got event without EC2InstanceId: %s', json.dumps(event))
              return

            instance_arn = container_instance_arn(cluster, instance_id)
            print('Instance %s has container instance ARN %s' % (lifecycle_event['EC2InstanceId'], instance_arn))

            if not instance_arn:
              return

            while has_tasks(cluster, instance_arn):
              time.sleep(10)

            try:
              print('Terminating instance %s' % instance_id)
              autoscaling.complete_lifecycle_action(
                  LifecycleActionResult='CONTINUE',
                  **pick(lifecycle_event, 'LifecycleHookName', 'LifecycleActionToken', 'AutoScalingGroupName'))
            except Exception as e:
              # Lifecycle action may have already completed.
              print(str(e))


          def container_instance_arn(cluster, instance_id):
            """Turn an instance ID into a container instance ARN."""
            arns = ecs.list_container_instances(cluster=cluster, filter='ec2InstanceId==' + instance_id)['containerInstanceArns']
            if not arns:
              return None
            return arns[0]


          def has_tasks(cluster, instance_arn):
            """Return True if the instance is running tasks for the given cluster."""
            instances = ecs.describe_container_instances(cluster=cluster, containerInstances=[instance_arn])['containerInstances']
            if not instances:
              return False
            instance = instances[0]

            if instance['status'] == 'ACTIVE':
              # Start draining, then try again later
              set_container_instance_to_draining(cluster, instance_arn)
              return True

            tasks = instance['runningTasksCount'] + instance['pendingTasksCount']
            print('Instance %s has %s tasks' % (instance_arn, tasks))

            return tasks > 0


          def set_container_instance_to_draining(cluster, instance_arn):
            ecs.update_container_instances_state(
                cluster=cluster,
                containerInstances=[instance_arn], status='DRAINING')


          def pick(dct, *keys):
            """Pick a subset of a dict."""
            return {k: v for k, v in dct.items() if k in keys}
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
          - EcsFleetDrainECSHookFunctionServiceRoleE43171BB
          - Arn
      Runtime: python3.6
      Environment:
        Variables:
          CLUSTER:
            Ref: RapidsCluster67B37DAC
      Tags:
        - Key: Name
          Value: EcsNvidiaRapidsDemoStack/EcsFleet
      Timeout: 310
    DependsOn:
      - EcsFleetDrainECSHookFunctionServiceRoleDefaultPolicy219A44E4
      - EcsFleetDrainECSHookFunctionServiceRoleE43171BB
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/EcsFleet/DrainECSHook/Function/Resource
  EcsFleetDrainECSHookFunctionAllowInvokeEcsNvidiaRapidsDemoStackEcsFleetLifecycleHookDrainHookTopicECE927105497357E:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - EcsFleetDrainECSHookFunction75792A24
          - Arn
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: EcsFleetLifecycleHookDrainHookTopicE784FFAA
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/EcsFleet/DrainECSHook/Function/AllowInvoke:EcsNvidiaRapidsDemoStackEcsFleetLifecycleHookDrainHookTopicECE92710
  EcsFleetDrainECSHookFunctionTopic13D3D164:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      TopicArn:
        Ref: EcsFleetLifecycleHookDrainHookTopicE784FFAA
      Endpoint:
        Fn::GetAtt:
          - EcsFleetDrainECSHookFunction75792A24
          - Arn
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/EcsFleet/DrainECSHook/Function/Topic/Resource
  EcsFleetLifecycleHookDrainHookRole8215F41A:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: autoscaling.amazonaws.com
        Version: "2012-10-17"
      Tags:
        - Key: Name
          Value: EcsNvidiaRapidsDemoStack/EcsFleet
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/EcsFleet/LifecycleHookDrainHook/Role/Resource
  EcsFleetLifecycleHookDrainHookRoleDefaultPolicy2A309C29:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: sns:Publish
            Effect: Allow
            Resource:
              Ref: EcsFleetLifecycleHookDrainHookTopicE784FFAA
        Version: "2012-10-17"
      PolicyName: EcsFleetLifecycleHookDrainHookRoleDefaultPolicy2A309C29
      Roles:
        - Ref: EcsFleetLifecycleHookDrainHookRole8215F41A
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/EcsFleet/LifecycleHookDrainHook/Role/DefaultPolicy/Resource
  EcsFleetLifecycleHookDrainHookTopicE784FFAA:
    Type: AWS::SNS::Topic
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/EcsFleet/LifecycleHookDrainHook/Topic/Resource
  EcsFleetLifecycleHookDrainHook9045C3BA:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName:
        Ref: EcsFleetASGF5E1F682
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
      DefaultResult: CONTINUE
      HeartbeatTimeout: 300
      NotificationTargetARN:
        Ref: EcsFleetLifecycleHookDrainHookTopicE784FFAA
      RoleARN:
        Fn::GetAtt:
          - EcsFleetLifecycleHookDrainHookRole8215F41A
          - Arn
    DependsOn:
      - EcsFleetLifecycleHookDrainHookRoleDefaultPolicy2A309C29
      - EcsFleetLifecycleHookDrainHookRole8215F41A
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/EcsFleet/LifecycleHookDrainHook/Resource
  RapidsCluster67B37DAC:
    Type: AWS::ECS::Cluster
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/RapidsCluster/Resource
  RapidsTaskDefinitionTaskRole133A2001:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/RapidsTaskDefinition/TaskRole/Resource
  RapidsTaskDefinition50C451DF:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Command:
            - bash
            - utils/start-jupyter.sh
          Essential: true
          Image: rapidsai/rapidsai:cuda10.0-runtime-ubuntu16.04
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: RapidsTaskDefinitionRapidsContainerLogGroupD321BC22
              awslogs-stream-prefix: rapids
              awslogs-region:
                Ref: AWS::Region
          Memory: 10240
          Name: RapidsContainer
          PortMappings:
            - ContainerPort: 8888
              HostPort: 8888
              Protocol: tcp
            - ContainerPort: 8787
              HostPort: 8787
              Protocol: tcp
            - ContainerPort: 8786
              HostPort: 8786
              Protocol: tcp
          ResourceRequirements:
            - Type: GPU
              Value: "1"
      ExecutionRoleArn:
        Fn::GetAtt:
          - RapidsTaskDefinitionExecutionRole89BE448F
          - Arn
      Family: EcsNvidiaRapidsDemoStackRapidsTaskDefinition32A330B6
      NetworkMode: bridge
      RequiresCompatibilities:
        - EC2
      TaskRoleArn:
        Fn::GetAtt:
          - RapidsTaskDefinitionTaskRole133A2001
          - Arn
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/RapidsTaskDefinition/Resource
  RapidsTaskDefinitionRapidsContainerLogGroupD321BC22:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/RapidsTaskDefinition/RapidsContainer/LogGroup/Resource
  RapidsTaskDefinitionExecutionRole89BE448F:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/RapidsTaskDefinition/ExecutionRole/Resource
  RapidsTaskDefinitionExecutionRoleDefaultPolicy02374A11:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - RapidsTaskDefinitionRapidsContainerLogGroupD321BC22
                - Arn
        Version: "2012-10-17"
      PolicyName: RapidsTaskDefinitionExecutionRoleDefaultPolicy02374A11
      Roles:
        - Ref: RapidsTaskDefinitionExecutionRole89BE448F
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/RapidsTaskDefinition/ExecutionRole/DefaultPolicy/Resource
  LB8A12904C:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - Fn::GetAtt:
            - LBSecurityGroup8A41EA2B
            - GroupId
      Subnets:
        - Ref: EcsVpcPublicSubnet1Subnet4FC26CFD
        - Ref: EcsVpcPublicSubnet2Subnet127B1F4A
      Type: application
    DependsOn:
      - EcsVpcPublicSubnet1DefaultRoute29B4D851
      - EcsVpcPublicSubnet2DefaultRouteD785541D
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/LB/Resource
  LBSecurityGroup8A41EA2B:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatically created Security Group for ELB EcsNvidiaRapidsDemoStackLBA21EB61B
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow to any IP range
          FromPort: 0
          IpProtocol: tcp
          ToPort: 65535
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId:
        Ref: EcsVpcCEF3634B
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/LB/SecurityGroup/Resource
  LBSecurityGrouptoEcsNvidiaRapidsDemoStackEcsFleetInstanceSecurityGroup1B22B421888879B24E86:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId:
        Fn::GetAtt:
          - LBSecurityGroup8A41EA2B
          - GroupId
      IpProtocol: tcp
      Description: Load balancer to target
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - EcsFleetInstanceSecurityGroup161FB51F
          - GroupId
      FromPort: 8888
      ToPort: 8888
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/LB/SecurityGroup/to EcsNvidiaRapidsDemoStackEcsFleetInstanceSecurityGroup1B22B421:8888
  LBListener49E825B4:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: LBListenerTargetGroupF04FCF6D
          Type: forward
      LoadBalancerArn:
        Ref: LB8A12904C
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn:
            Ref: CertArnParamParameter
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/LB/Listener/Resource
  LBListenerTargetGroupF04FCF6D:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      Matcher:
        HttpCode: 200-399
      Port: 8888
      Protocol: HTTP
      TargetType: instance
      VpcId:
        Ref: EcsVpcCEF3634B
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/LB/Listener/TargetGroup/Resource
  AuthRule55DA7099:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - AuthenticateCognitoConfig:
            OnUnauthenticatedRequest: authenticate
            Scope: openid
            SessionCookieName: AWSELBAuthSessionCookie
            SessionTimeout: 604800
            UserPoolArn:
              Ref: CognitoUserpoolArnParamParameter
            UserPoolClientId:
              Ref: CognitoUserpoolClientIdParamParameter
            UserPoolDomain:
              Ref: CognitoUserpoolDomainParamParameter
          Order: 1
          Type: authenticate-cognito
        - Order: 2
          TargetGroupArn:
            Ref: LBListenerTargetGroupF04FCF6D
          Type: forward
      Conditions:
        - Field: path-pattern
          Values:
            - /
      ListenerArn:
        Ref: LBListener49E825B4
      Priority: 1
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/AuthRule/Resource
  RapidsRecordSetC6349C84:
    Type: AWS::Route53::RecordSet
    Properties:
      Name:
        Fn::Join:
          - ""
          - - Ref: SiteUrlParamParameter
            - "."
      Type: A
      AliasTarget:
        DNSName:
          Fn::GetAtt:
            - LB8A12904C
            - DNSName
        HostedZoneId:
          Fn::GetAtt:
            - LB8A12904C
            - CanonicalHostedZoneID
      HostedZoneId:
        Ref: HostedZoneIdParamParameter
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/RapidsRecordSet/Resource
  RapidsServiceED63EFCB:
    Type: AWS::ECS::Service
    Properties:
      TaskDefinition:
        Ref: RapidsTaskDefinition50C451DF
      Cluster:
        Ref: RapidsCluster67B37DAC
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 1
      EnableECSManagedTags: false
      LaunchType: EC2
      SchedulingStrategy: REPLICA
    Metadata:
      aws:cdk:path: EcsNvidiaRapidsDemoStack/RapidsService/Service
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Modules: aws-cdk=2.113.0,@aws-cdk/assets=1.7.0,@aws-cdk/aws-applicationautoscaling=1.7.0,@aws-cdk/aws-autoscaling=1.7.0,@aws-cdk/aws-autoscaling-common=1.7.0,@aws-cdk/aws-autoscaling-hooktargets=1.7.0,@aws-cdk/aws-cloudformation=1.7.0,@aws-cdk/aws-cloudwatch=1.7.0,@aws-cdk/aws-ec2=1.7.0,@aws-cdk/aws-ecr=1.7.0,@aws-cdk/aws-ecr-assets=1.7.0,@aws-cdk/aws-ecs=1.7.0,@aws-cdk/aws-elasticloadbalancingv2=1.7.0,@aws-cdk/aws-events=1.7.0,@aws-cdk/aws-iam=1.7.0,@aws-cdk/aws-kms=1.7.0,@aws-cdk/aws-lambda=1.7.0,@aws-cdk/aws-logs=1.7.0,@aws-cdk/aws-route53=1.7.0,@aws-cdk/aws-route53-targets=1.7.0,@aws-cdk/aws-s3=1.7.0,@aws-cdk/aws-s3-assets=1.7.0,@aws-cdk/aws-servicediscovery=1.7.0,@aws-cdk/aws-sns=1.7.0,@aws-cdk/aws-sns-subscriptions=1.7.0,@aws-cdk/aws-sqs=1.7.0,@aws-cdk/aws-ssm=1.7.0,@aws-cdk/core=1.7.0,@aws-cdk/cx-api=1.7.0,@aws-cdk/region-info=1.7.0,jsii-runtime=node.js/v18.12.1
    Condition: CDKMetadataAvailable
Parameters:
  SsmParameterValueawsserviceecsoptimizedamiamazonlinux2gpurecommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/gpu/recommended/image_id
  SiteUrlParamParameter:
    Type: AWS::SSM::Parameter::Value<String>
    Default: rapdisai-url
  HostedZoneIdParamParameter:
    Type: AWS::SSM::Parameter::Value<String>
    Default: rapdisai-hosted-zone
  CertArnParamParameter:
    Type: AWS::SSM::Parameter::Value<String>
    Default: rapidsai-cert-arn-param
  CognitoUserpoolArnParamParameter:
    Type: AWS::SSM::Parameter::Value<String>
    Default: rapidsai-cognito-userpool-arn
  CognitoUserpoolClientIdParamParameter:
    Type: AWS::SSM::Parameter::Value<String>
    Default: rapidsai-cognito-userpool-clientid
  CognitoUserpoolDomainParamParameter:
    Type: AWS::SSM::Parameter::Value<String>
    Default: rapidsai-cognito-userpool-domain
Outputs:
  RapidsURL:
    Value:
      Fn::Join:
        - ""
        - - https://
          - Ref: SiteUrlParamParameter
          - /
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - il-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - me-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2

