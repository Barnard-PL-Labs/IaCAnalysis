table name ${Token[TOKEN.184]}
Lambda <ref *1> Function {
  node: ConstructNode {
    host: [Circular *1],
    _actualNode: Node {
      host: [Circular *1],
      _locked: false,
      _aspects: [],
      _children: [Object],
      _context: {},
      _metadata: [],
      _dependencies: Set(0) {},
      invokedAspects: [],
      _validations: [],
      id: 'GetDynamoValue',
      scope: [CdkStack]
    }
  },
  stack: <ref *2> CdkStack {
    node: ConstructNode { host: [Circular *2], _actualNode: [Node] },
    _missingContext: [],
    _stackDependencies: {},
    templateOptions: {},
    _logicalIds: LogicalIDs { renames: {}, reverse: {} },
    account: '${Token[AWS.AccountId.9]}',
    region: '${Token[AWS.Region.13]}',
    environment: 'aws://unknown-account/unknown-region',
    terminationProtection: undefined,
    _stackName: 'CdkStack',
    tags: TagManager {
      tags: Map(0) {},
      priorities: Map(0) {},
      initialTagPriority: 50,
      resourceTypeName: 'aws:cdk:stack',
      tagFormatter: KeyValueFormatter {},
      tagPropertyName: 'tags',
      renderedTags: [LazyAny]
    },
    artifactId: 'CdkStack',
    templateFile: 'CdkStack.template.json',
    _versionReportingEnabled: true,
    synthesizer: LegacyStackSynthesizer {
      cycle: false,
      addedImageAssets: Set(0) {},
      stack: [Circular *2],
      _assetParameters: [Construct]
    },
    [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
  },
  env: {
    account: '${Token[AWS.AccountId.9]}',
    region: '${Token[AWS.Region.13]}'
  },
  _physicalName: undefined,
  _allowCrossEnvironment: false,
  physicalName: '${Token[TOKEN.186]}',
  _invocationGrants: {},
  permissionsNode: ConstructNode {
    host: [Circular *1],
    _actualNode: Node {
      host: [Circular *1],
      _locked: false,
      _aspects: [],
      _children: [Object],
      _context: {},
      _metadata: [],
      _dependencies: Set(0) {},
      invokedAspects: [],
      _validations: [],
      id: 'GetDynamoValue',
      scope: [CdkStack]
    }
  },
  canCreatePermissions: true,
  layers: [],
  environment: { TABLE_NAME: { value: '${Token[TOKEN.184]}' } },
  role: <ref *3> Role {
    node: ConstructNode { host: [Circular *3], _actualNode: [Node] },
    stack: <ref *2> CdkStack {
      node: [ConstructNode],
      _missingContext: [],
      _stackDependencies: {},
      templateOptions: {},
      _logicalIds: [LogicalIDs],
      account: '${Token[AWS.AccountId.9]}',
      region: '${Token[AWS.Region.13]}',
      environment: 'aws://unknown-account/unknown-region',
      terminationProtection: undefined,
      _stackName: 'CdkStack',
      tags: [TagManager],
      artifactId: 'CdkStack',
      templateFile: 'CdkStack.template.json',
      _versionReportingEnabled: true,
      synthesizer: [LegacyStackSynthesizer],
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    env: {
      account: '${Token[AWS.AccountId.9]}',
      region: '${Token[AWS.Region.13]}'
    },
    _physicalName: undefined,
    _allowCrossEnvironment: false,
    physicalName: '${Token[TOKEN.188]}',
    grantPrincipal: [Circular *3],
    principalAccount: '${Token[AWS.AccountId.9]}',
    assumeRoleAction: 'sts:AssumeRole',
    managedPolicies: [ [AwsManagedPolicy] ],
    attachedPolicies: AttachedPolicies { policies: [Array] },
    assumeRolePolicy: PolicyDocument {
      statements: [Array],
      creationStack: [Array],
      autoAssignSids: false
    },
    inlinePolicies: {},
    permissionsBoundary: undefined,
    roleId: '${Token[TOKEN.193]}',
    roleArn: '${Token[TOKEN.194]}',
    roleName: '${Token[TOKEN.196]}',
    policyFragment: PrincipalPolicyFragment { principalJson: [Object], conditions: {} },
    defaultPolicy: Policy {
      node: [ConstructNode],
      stack: [CdkStack],
      env: [Object],
      _physicalName: '${Token[TOKEN.236]}',
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.236]}',
      document: [PolicyDocument],
      roles: [Array],
      users: [],
      groups: [],
      referenceTaken: false,
      _policyName: '${Token[TOKEN.236]}',
      force: false,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
  },
  grantPrincipal: <ref *3> Role {
    node: ConstructNode { host: [Circular *3], _actualNode: [Node] },
    stack: <ref *2> CdkStack {
      node: [ConstructNode],
      _missingContext: [],
      _stackDependencies: {},
      templateOptions: {},
      _logicalIds: [LogicalIDs],
      account: '${Token[AWS.AccountId.9]}',
      region: '${Token[AWS.Region.13]}',
      environment: 'aws://unknown-account/unknown-region',
      terminationProtection: undefined,
      _stackName: 'CdkStack',
      tags: [TagManager],
      artifactId: 'CdkStack',
      templateFile: 'CdkStack.template.json',
      _versionReportingEnabled: true,
      synthesizer: [LegacyStackSynthesizer],
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    env: {
      account: '${Token[AWS.AccountId.9]}',
      region: '${Token[AWS.Region.13]}'
    },
    _physicalName: undefined,
    _allowCrossEnvironment: false,
    physicalName: '${Token[TOKEN.188]}',
    grantPrincipal: [Circular *3],
    principalAccount: '${Token[AWS.AccountId.9]}',
    assumeRoleAction: 'sts:AssumeRole',
    managedPolicies: [ [AwsManagedPolicy] ],
    attachedPolicies: AttachedPolicies { policies: [Array] },
    assumeRolePolicy: PolicyDocument {
      statements: [Array],
      creationStack: [Array],
      autoAssignSids: false
    },
    inlinePolicies: {},
    permissionsBoundary: undefined,
    roleId: '${Token[TOKEN.193]}',
    roleArn: '${Token[TOKEN.194]}',
    roleName: '${Token[TOKEN.196]}',
    policyFragment: PrincipalPolicyFragment { principalJson: [Object], conditions: {} },
    defaultPolicy: Policy {
      node: [ConstructNode],
      stack: [CdkStack],
      env: [Object],
      _physicalName: '${Token[TOKEN.236]}',
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.236]}',
      document: [PolicyDocument],
      roles: [Array],
      users: [],
      groups: [],
      referenceTaken: false,
      _policyName: '${Token[TOKEN.236]}',
      force: false,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
  },
  deadLetterQueue: undefined,
  functionName: '${Token[TOKEN.211]}',
  functionArn: '${Token[TOKEN.212]}',
  runtime: Runtime {
    name: 'nodejs12.x',
    supportsInlineCode: true,
    family: 0,
    bundlingDockerImage: DockerImage {
      image: 'public.ecr.aws/sam/build-nodejs12.x',
      _imageHash: undefined
    },
    bundlingImage: DockerImage {
      image: 'public.ecr.aws/sam/build-nodejs12.x',
      _imageHash: undefined
    },
    supportsCodeGuruProfiling: false
  },
  currentVersionOptions: undefined,
  [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [ [Circular *1] ] }
} <ref *1> Function {
  node: ConstructNode {
    host: [Circular *1],
    _actualNode: Node {
      host: [Circular *1],
      _locked: false,
      _aspects: [],
      _children: [Object],
      _context: {},
      _metadata: [],
      _dependencies: Set(0) {},
      invokedAspects: [],
      _validations: [],
      id: 'SetDynamoValue',
      scope: [CdkStack]
    }
  },
  stack: <ref *2> CdkStack {
    node: ConstructNode { host: [Circular *2], _actualNode: [Node] },
    _missingContext: [],
    _stackDependencies: {},
    templateOptions: {},
    _logicalIds: LogicalIDs { renames: {}, reverse: {} },
    account: '${Token[AWS.AccountId.9]}',
    region: '${Token[AWS.Region.13]}',
    environment: 'aws://unknown-account/unknown-region',
    terminationProtection: undefined,
    _stackName: 'CdkStack',
    tags: TagManager {
      tags: Map(0) {},
      priorities: Map(0) {},
      initialTagPriority: 50,
      resourceTypeName: 'aws:cdk:stack',
      tagFormatter: KeyValueFormatter {},
      tagPropertyName: 'tags',
      renderedTags: [LazyAny]
    },
    artifactId: 'CdkStack',
    templateFile: 'CdkStack.template.json',
    _versionReportingEnabled: true,
    synthesizer: LegacyStackSynthesizer {
      cycle: false,
      addedImageAssets: Set(0) {},
      stack: [Circular *2],
      _assetParameters: [Construct]
    },
    [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
  },
  env: {
    account: '${Token[AWS.AccountId.9]}',
    region: '${Token[AWS.Region.13]}'
  },
  _physicalName: undefined,
  _allowCrossEnvironment: false,
  physicalName: '${Token[TOKEN.213]}',
  _invocationGrants: {},
  permissionsNode: ConstructNode {
    host: [Circular *1],
    _actualNode: Node {
      host: [Circular *1],
      _locked: false,
      _aspects: [],
      _children: [Object],
      _context: {},
      _metadata: [],
      _dependencies: Set(0) {},
      invokedAspects: [],
      _validations: [],
      id: 'SetDynamoValue',
      scope: [CdkStack]
    }
  },
  canCreatePermissions: true,
  layers: [],
  environment: { TABLE_NAME: { value: '${Token[TOKEN.184]}' } },
  role: <ref *3> Role {
    node: ConstructNode { host: [Circular *3], _actualNode: [Node] },
    stack: <ref *2> CdkStack {
      node: [ConstructNode],
      _missingContext: [],
      _stackDependencies: {},
      templateOptions: {},
      _logicalIds: [LogicalIDs],
      account: '${Token[AWS.AccountId.9]}',
      region: '${Token[AWS.Region.13]}',
      environment: 'aws://unknown-account/unknown-region',
      terminationProtection: undefined,
      _stackName: 'CdkStack',
      tags: [TagManager],
      artifactId: 'CdkStack',
      templateFile: 'CdkStack.template.json',
      _versionReportingEnabled: true,
      synthesizer: [LegacyStackSynthesizer],
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    env: {
      account: '${Token[AWS.AccountId.9]}',
      region: '${Token[AWS.Region.13]}'
    },
    _physicalName: undefined,
    _allowCrossEnvironment: false,
    physicalName: '${Token[TOKEN.215]}',
    grantPrincipal: [Circular *3],
    principalAccount: '${Token[AWS.AccountId.9]}',
    assumeRoleAction: 'sts:AssumeRole',
    managedPolicies: [ [AwsManagedPolicy] ],
    attachedPolicies: AttachedPolicies { policies: [Array] },
    assumeRolePolicy: PolicyDocument {
      statements: [Array],
      creationStack: [Array],
      autoAssignSids: false
    },
    inlinePolicies: {},
    permissionsBoundary: undefined,
    roleId: '${Token[TOKEN.220]}',
    roleArn: '${Token[TOKEN.221]}',
    roleName: '${Token[TOKEN.223]}',
    policyFragment: PrincipalPolicyFragment { principalJson: [Object], conditions: {} },
    defaultPolicy: Policy {
      node: [ConstructNode],
      stack: [CdkStack],
      env: [Object],
      _physicalName: '${Token[TOKEN.242]}',
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.242]}',
      document: [PolicyDocument],
      roles: [Array],
      users: [],
      groups: [],
      referenceTaken: false,
      _policyName: '${Token[TOKEN.242]}',
      force: false,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
  },
  grantPrincipal: <ref *3> Role {
    node: ConstructNode { host: [Circular *3], _actualNode: [Node] },
    stack: <ref *2> CdkStack {
      node: [ConstructNode],
      _missingContext: [],
      _stackDependencies: {},
      templateOptions: {},
      _logicalIds: [LogicalIDs],
      account: '${Token[AWS.AccountId.9]}',
      region: '${Token[AWS.Region.13]}',
      environment: 'aws://unknown-account/unknown-region',
      terminationProtection: undefined,
      _stackName: 'CdkStack',
      tags: [TagManager],
      artifactId: 'CdkStack',
      templateFile: 'CdkStack.template.json',
      _versionReportingEnabled: true,
      synthesizer: [LegacyStackSynthesizer],
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    env: {
      account: '${Token[AWS.AccountId.9]}',
      region: '${Token[AWS.Region.13]}'
    },
    _physicalName: undefined,
    _allowCrossEnvironment: false,
    physicalName: '${Token[TOKEN.215]}',
    grantPrincipal: [Circular *3],
    principalAccount: '${Token[AWS.AccountId.9]}',
    assumeRoleAction: 'sts:AssumeRole',
    managedPolicies: [ [AwsManagedPolicy] ],
    attachedPolicies: AttachedPolicies { policies: [Array] },
    assumeRolePolicy: PolicyDocument {
      statements: [Array],
      creationStack: [Array],
      autoAssignSids: false
    },
    inlinePolicies: {},
    permissionsBoundary: undefined,
    roleId: '${Token[TOKEN.220]}',
    roleArn: '${Token[TOKEN.221]}',
    roleName: '${Token[TOKEN.223]}',
    policyFragment: PrincipalPolicyFragment { principalJson: [Object], conditions: {} },
    defaultPolicy: Policy {
      node: [ConstructNode],
      stack: [CdkStack],
      env: [Object],
      _physicalName: '${Token[TOKEN.242]}',
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.242]}',
      document: [PolicyDocument],
      roles: [Array],
      users: [],
      groups: [],
      referenceTaken: false,
      _policyName: '${Token[TOKEN.242]}',
      force: false,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
  },
  deadLetterQueue: undefined,
  functionName: '${Token[TOKEN.233]}',
  functionArn: '${Token[TOKEN.234]}',
  runtime: Runtime {
    name: 'nodejs12.x',
    supportsInlineCode: true,
    family: 0,
    bundlingDockerImage: DockerImage {
      image: 'public.ecr.aws/sam/build-nodejs12.x',
      _imageHash: undefined
    },
    bundlingImage: DockerImage {
      image: 'public.ecr.aws/sam/build-nodejs12.x',
      _imageHash: undefined
    },
    supportsCodeGuruProfiling: false
  },
  currentVersionOptions: undefined,
  [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [ [Circular *1] ] }
}
Resources:
  TableCD117FA1:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: CdkStack/Table/Resource
  GetDynamoValueServiceRole80543D69:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: CdkStack/GetDynamoValue/ServiceRole/Resource
  GetDynamoValueServiceRoleDefaultPolicy3254041E:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - dynamodb:BatchGetItem
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:Query
              - dynamodb:GetItem
              - dynamodb:Scan
              - dynamodb:ConditionCheckItem
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - TableCD117FA1
                  - Arn
              - Ref: AWS::NoValue
        Version: "2012-10-17"
      PolicyName: GetDynamoValueServiceRoleDefaultPolicy3254041E
      Roles:
        - Ref: GetDynamoValueServiceRole80543D69
    Metadata:
      aws:cdk:path: CdkStack/GetDynamoValue/ServiceRole/DefaultPolicy/Resource
  GetDynamoValue167F601C:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: AssetParameters419b4ca4a8bb7cfb656054bc449da55e55701be9104f7c4c53b0fd13fee3668aS3Bucket52AB9EAF
        S3Key:
          Fn::Join:
            - ""
            - - Fn::Select:
                  - 0
                  - Fn::Split:
                      - "||"
                      - Ref: AssetParameters419b4ca4a8bb7cfb656054bc449da55e55701be9104f7c4c53b0fd13fee3668aS3VersionKeyC2A456D3
              - Fn::Select:
                  - 1
                  - Fn::Split:
                      - "||"
                      - Ref: AssetParameters419b4ca4a8bb7cfb656054bc449da55e55701be9104f7c4c53b0fd13fee3668aS3VersionKeyC2A456D3
      Role:
        Fn::GetAtt:
          - GetDynamoValueServiceRole80543D69
          - Arn
      Environment:
        Variables:
          TABLE_NAME:
            Ref: TableCD117FA1
      Handler: lambdas/dynamo-table-get.handler
      Runtime: nodejs12.x
    DependsOn:
      - GetDynamoValueServiceRoleDefaultPolicy3254041E
      - GetDynamoValueServiceRole80543D69
    Metadata:
      aws:cdk:path: CdkStack/GetDynamoValue/Resource
      aws:asset:path: asset.419b4ca4a8bb7cfb656054bc449da55e55701be9104f7c4c53b0fd13fee3668a
      aws:asset:property: Code
  SetDynamoValueServiceRoleD3805599:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: CdkStack/SetDynamoValue/ServiceRole/Resource
  SetDynamoValueServiceRoleDefaultPolicy7862B09C:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - dynamodb:BatchGetItem
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:Query
              - dynamodb:GetItem
              - dynamodb:Scan
              - dynamodb:ConditionCheckItem
              - dynamodb:BatchWriteItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - TableCD117FA1
                  - Arn
              - Ref: AWS::NoValue
        Version: "2012-10-17"
      PolicyName: SetDynamoValueServiceRoleDefaultPolicy7862B09C
      Roles:
        - Ref: SetDynamoValueServiceRoleD3805599
    Metadata:
      aws:cdk:path: CdkStack/SetDynamoValue/ServiceRole/DefaultPolicy/Resource
  SetDynamoValueE1F9D28B:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: AssetParameters419b4ca4a8bb7cfb656054bc449da55e55701be9104f7c4c53b0fd13fee3668aS3Bucket52AB9EAF
        S3Key:
          Fn::Join:
            - ""
            - - Fn::Select:
                  - 0
                  - Fn::Split:
                      - "||"
                      - Ref: AssetParameters419b4ca4a8bb7cfb656054bc449da55e55701be9104f7c4c53b0fd13fee3668aS3VersionKeyC2A456D3
              - Fn::Select:
                  - 1
                  - Fn::Split:
                      - "||"
                      - Ref: AssetParameters419b4ca4a8bb7cfb656054bc449da55e55701be9104f7c4c53b0fd13fee3668aS3VersionKeyC2A456D3
      Role:
        Fn::GetAtt:
          - SetDynamoValueServiceRoleD3805599
          - Arn
      Environment:
        Variables:
          TABLE_NAME:
            Ref: TableCD117FA1
      Handler: lambdas/dynamo-table-set.handler
      Runtime: nodejs12.x
    DependsOn:
      - SetDynamoValueServiceRoleDefaultPolicy7862B09C
      - SetDynamoValueServiceRoleD3805599
    Metadata:
      aws:cdk:path: CdkStack/SetDynamoValue/Resource
      aws:asset:path: asset.419b4ca4a8bb7cfb656054bc449da55e55701be9104f7c4c53b0fd13fee3668a
      aws:asset:property: Code
  apiC8550315:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: example api gateway
      Name: api
    Metadata:
      aws:cdk:path: CdkStack/api/Resource
  apiCloudWatchRoleAC81D93E:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
    Metadata:
      aws:cdk:path: CdkStack/api/CloudWatchRole/Resource
  apiAccount57E28B43:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn:
        Fn::GetAtt:
          - apiCloudWatchRoleAC81D93E
          - Arn
    DependsOn:
      - apiC8550315
    Metadata:
      aws:cdk:path: CdkStack/api/Account
  apiDeployment149F12941bdec2006db75998647c1315d3a43b91:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:
        Ref: apiC8550315
      Description: Automatically created by the RestApi construct
    DependsOn:
      - apiOPTIONS5A1027A6
      - apitableidOPTIONS230F6E2C
      - apitableidPUTC361E6D2
      - apitableidD6D7CDC0
      - apitableGET0D48058D
      - apitableOPTIONSBA3C554B
      - apitableC9236D80
    Metadata:
      aws:cdk:path: CdkStack/api/Deployment/Resource
  apiDeploymentStagedev96712F43:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId:
        Ref: apiC8550315
      DeploymentId:
        Ref: apiDeployment149F12941bdec2006db75998647c1315d3a43b91
      StageName: dev
    Metadata:
      aws:cdk:path: CdkStack/api/DeploymentStage.dev/Resource
  apiOPTIONS5A1027A6:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Fn::GetAtt:
          - apiC8550315
          - RootResourceId
      RestApiId:
        Ref: apiC8550315
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST,PUT,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          StatusCode: "204"
    Metadata:
      aws:cdk:path: CdkStack/api/Default/OPTIONS/Resource
  apitableC9236D80:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
          - apiC8550315
          - RootResourceId
      PathPart: table
      RestApiId:
        Ref: apiC8550315
    Metadata:
      aws:cdk:path: CdkStack/api/Default/table/Resource
  apitableOPTIONSBA3C554B:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: apitableC9236D80
      RestApiId:
        Ref: apiC8550315
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST,PUT,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          StatusCode: "204"
    Metadata:
      aws:cdk:path: CdkStack/api/Default/table/OPTIONS/Resource
  apitableGETApiPermissionCdkStackapi621B3AACGETtableDBC855C6:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - GetDynamoValue167F601C
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: apiC8550315
            - /
            - Ref: apiDeploymentStagedev96712F43
            - /GET/table
    Metadata:
      aws:cdk:path: CdkStack/api/Default/table/GET/ApiPermission.CdkStackapi621B3AAC.GET..table
  apitableGETApiPermissionTestCdkStackapi621B3AACGETtable2F7F1B15:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - GetDynamoValue167F601C
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: apiC8550315
            - /test-invoke-stage/GET/table
    Metadata:
      aws:cdk:path: CdkStack/api/Default/table/GET/ApiPermission.Test.CdkStackapi621B3AAC.GET..table
  apitableGET0D48058D:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId:
        Ref: apitableC9236D80
      RestApiId:
        Ref: apiC8550315
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                  - GetDynamoValue167F601C
                  - Arn
              - /invocations
    Metadata:
      aws:cdk:path: CdkStack/api/Default/table/GET/Resource
  apitableidD6D7CDC0:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: apitableC9236D80
      PathPart: "{id}"
      RestApiId:
        Ref: apiC8550315
    Metadata:
      aws:cdk:path: CdkStack/api/Default/table/{id}/Resource
  apitableidOPTIONS230F6E2C:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: apitableidD6D7CDC0
      RestApiId:
        Ref: apiC8550315
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST,PUT,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          StatusCode: "204"
    Metadata:
      aws:cdk:path: CdkStack/api/Default/table/{id}/OPTIONS/Resource
  apitableidPUTApiPermissionCdkStackapi621B3AACPUTtableid033CEC0E:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - SetDynamoValueE1F9D28B
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: apiC8550315
            - /
            - Ref: apiDeploymentStagedev96712F43
            - /PUT/table/*
    Metadata:
      aws:cdk:path: CdkStack/api/Default/table/{id}/PUT/ApiPermission.CdkStackapi621B3AAC.PUT..table.{id}
  apitableidPUTApiPermissionTestCdkStackapi621B3AACPUTtableid806F6A0C:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - SetDynamoValueE1F9D28B
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: apiC8550315
            - /test-invoke-stage/PUT/table/*
    Metadata:
      aws:cdk:path: CdkStack/api/Default/table/{id}/PUT/ApiPermission.Test.CdkStackapi621B3AAC.PUT..table.{id}
  apitableidPUTC361E6D2:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: PUT
      ResourceId:
        Ref: apitableidD6D7CDC0
      RestApiId:
        Ref: apiC8550315
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                  - SetDynamoValueE1F9D28B
                  - Arn
              - /invocations
    Metadata:
      aws:cdk:path: CdkStack/api/Default/table/{id}/PUT/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/02QS26DMBCGz5K9cUqy6bIkVXdVEe0FBntKHbCNPHYjZHH3YhMqVvPN659HycvziT8dXuBOhZD9MQrrkMdPD6JnDZINTiCriNAvsU6Zjl2tIe+C8Oz6bWpwoNGjS85H8GPI4f/OhZd6qbyyZmZpSpSTAW1ly+MXtEMuyTCzAXQrgce3YERqSKk91+i0IspSCjSPjV37s63toMSU6zLNjM4FpM2J5wMWn1+C6NFfgJDBqDrweIdpEULy1ageq29YCWGD8ewVx8FOGk2+beell+QFVtiuzvLv6H+sTMkH7X+y8TzPzFiJ/EbH3/KZlydeHm6kVOGWwUojb1b7B/+1p/GpAQAA
    Metadata:
      aws:cdk:path: CdkStack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Parameters:
  AssetParameters419b4ca4a8bb7cfb656054bc449da55e55701be9104f7c4c53b0fd13fee3668aS3Bucket52AB9EAF:
    Type: String
    Description: S3 bucket for asset "419b4ca4a8bb7cfb656054bc449da55e55701be9104f7c4c53b0fd13fee3668a"
  AssetParameters419b4ca4a8bb7cfb656054bc449da55e55701be9104f7c4c53b0fd13fee3668aS3VersionKeyC2A456D3:
    Type: String
    Description: S3 key for asset version "419b4ca4a8bb7cfb656054bc449da55e55701be9104f7c4c53b0fd13fee3668a"
  AssetParameters419b4ca4a8bb7cfb656054bc449da55e55701be9104f7c4c53b0fd13fee3668aArtifactHashFACB03FE:
    Type: String
    Description: Artifact hash for asset "419b4ca4a8bb7cfb656054bc449da55e55701be9104f7c4c53b0fd13fee3668a"
Outputs:
  apiEndpoint9349E63C:
    Value:
      Fn::Join:
        - ""
        - - https://
          - Ref: apiC8550315
          - .execute-api.
          - Ref: AWS::Region
          - "."
          - Ref: AWS::URLSuffix
          - /
          - Ref: apiDeploymentStagedev96712F43
          - /
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2

