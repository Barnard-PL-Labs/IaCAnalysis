Resources:
  MainVpc919A5E7E:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: InfraStack/MainVpc
    Metadata:
      aws:cdk:path: InfraStack/MainVpc/Resource
  MainVpcPublicSubnet1Subnet269349B1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      VpcId:
        Ref: MainVpc919A5E7E
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: InfraStack/MainVpc/PublicSubnet1
    Metadata:
      aws:cdk:path: InfraStack/MainVpc/PublicSubnet1/Subnet
  MainVpcPublicSubnet1RouteTableB35CB547:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MainVpc919A5E7E
      Tags:
        - Key: Name
          Value: InfraStack/MainVpc/PublicSubnet1
    Metadata:
      aws:cdk:path: InfraStack/MainVpc/PublicSubnet1/RouteTable
  MainVpcPublicSubnet1RouteTableAssociation12179C27:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MainVpcPublicSubnet1RouteTableB35CB547
      SubnetId:
        Ref: MainVpcPublicSubnet1Subnet269349B1
    Metadata:
      aws:cdk:path: InfraStack/MainVpc/PublicSubnet1/RouteTableAssociation
  MainVpcPublicSubnet1DefaultRouteA089B896:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MainVpcPublicSubnet1RouteTableB35CB547
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: MainVpcIGW53625DB6
    DependsOn:
      - MainVpcVPCGWBA74F963
    Metadata:
      aws:cdk:path: InfraStack/MainVpc/PublicSubnet1/DefaultRoute
  MainVpcPublicSubnet1EIP33B08611:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: InfraStack/MainVpc/PublicSubnet1
    Metadata:
      aws:cdk:path: InfraStack/MainVpc/PublicSubnet1/EIP
  MainVpcPublicSubnet1NATGatewayEEC1F6AE:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId:
        Ref: MainVpcPublicSubnet1Subnet269349B1
      AllocationId:
        Fn::GetAtt:
          - MainVpcPublicSubnet1EIP33B08611
          - AllocationId
      Tags:
        - Key: Name
          Value: InfraStack/MainVpc/PublicSubnet1
    Metadata:
      aws:cdk:path: InfraStack/MainVpc/PublicSubnet1/NATGateway
  MainVpcPublicSubnet2Subnet287D062B:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      VpcId:
        Ref: MainVpc919A5E7E
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: InfraStack/MainVpc/PublicSubnet2
    Metadata:
      aws:cdk:path: InfraStack/MainVpc/PublicSubnet2/Subnet
  MainVpcPublicSubnet2RouteTableE69B5772:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MainVpc919A5E7E
      Tags:
        - Key: Name
          Value: InfraStack/MainVpc/PublicSubnet2
    Metadata:
      aws:cdk:path: InfraStack/MainVpc/PublicSubnet2/RouteTable
  MainVpcPublicSubnet2RouteTableAssociationDA7BB36E:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MainVpcPublicSubnet2RouteTableE69B5772
      SubnetId:
        Ref: MainVpcPublicSubnet2Subnet287D062B
    Metadata:
      aws:cdk:path: InfraStack/MainVpc/PublicSubnet2/RouteTableAssociation
  MainVpcPublicSubnet2DefaultRoute3AE7286A:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MainVpcPublicSubnet2RouteTableE69B5772
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: MainVpcIGW53625DB6
    DependsOn:
      - MainVpcVPCGWBA74F963
    Metadata:
      aws:cdk:path: InfraStack/MainVpc/PublicSubnet2/DefaultRoute
  MainVpcPublicSubnet2EIPC53D8830:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: InfraStack/MainVpc/PublicSubnet2
    Metadata:
      aws:cdk:path: InfraStack/MainVpc/PublicSubnet2/EIP
  MainVpcPublicSubnet2NATGatewayA7CED47A:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId:
        Ref: MainVpcPublicSubnet2Subnet287D062B
      AllocationId:
        Fn::GetAtt:
          - MainVpcPublicSubnet2EIPC53D8830
          - AllocationId
      Tags:
        - Key: Name
          Value: InfraStack/MainVpc/PublicSubnet2
    Metadata:
      aws:cdk:path: InfraStack/MainVpc/PublicSubnet2/NATGateway
  MainVpcPrivateSubnet1SubnetA8D0757B:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.2.0/24
      VpcId:
        Ref: MainVpc919A5E7E
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: InfraStack/MainVpc/PrivateSubnet1
    Metadata:
      aws:cdk:path: InfraStack/MainVpc/PrivateSubnet1/Subnet
  MainVpcPrivateSubnet1RouteTable9385ABF4:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MainVpc919A5E7E
      Tags:
        - Key: Name
          Value: InfraStack/MainVpc/PrivateSubnet1
    Metadata:
      aws:cdk:path: InfraStack/MainVpc/PrivateSubnet1/RouteTable
  MainVpcPrivateSubnet1RouteTableAssociation628BDBF6:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MainVpcPrivateSubnet1RouteTable9385ABF4
      SubnetId:
        Ref: MainVpcPrivateSubnet1SubnetA8D0757B
    Metadata:
      aws:cdk:path: InfraStack/MainVpc/PrivateSubnet1/RouteTableAssociation
  MainVpcPrivateSubnet1DefaultRoute7A3E1735:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MainVpcPrivateSubnet1RouteTable9385ABF4
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: MainVpcPublicSubnet1NATGatewayEEC1F6AE
    Metadata:
      aws:cdk:path: InfraStack/MainVpc/PrivateSubnet1/DefaultRoute
  MainVpcPrivateSubnet2SubnetFC4F66C4:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.3.0/24
      VpcId:
        Ref: MainVpc919A5E7E
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: InfraStack/MainVpc/PrivateSubnet2
    Metadata:
      aws:cdk:path: InfraStack/MainVpc/PrivateSubnet2/Subnet
  MainVpcPrivateSubnet2RouteTable8E0D12CB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MainVpc919A5E7E
      Tags:
        - Key: Name
          Value: InfraStack/MainVpc/PrivateSubnet2
    Metadata:
      aws:cdk:path: InfraStack/MainVpc/PrivateSubnet2/RouteTable
  MainVpcPrivateSubnet2RouteTableAssociationE83CB470:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MainVpcPrivateSubnet2RouteTable8E0D12CB
      SubnetId:
        Ref: MainVpcPrivateSubnet2SubnetFC4F66C4
    Metadata:
      aws:cdk:path: InfraStack/MainVpc/PrivateSubnet2/RouteTableAssociation
  MainVpcPrivateSubnet2DefaultRoute986F5D29:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MainVpcPrivateSubnet2RouteTable8E0D12CB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: MainVpcPublicSubnet2NATGatewayA7CED47A
    Metadata:
      aws:cdk:path: InfraStack/MainVpc/PrivateSubnet2/DefaultRoute
  MainVpcIGW53625DB6:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: InfraStack/MainVpc
    Metadata:
      aws:cdk:path: InfraStack/MainVpc/IGW
  MainVpcVPCGWBA74F963:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: MainVpc919A5E7E
      InternetGatewayId:
        Ref: MainVpcIGW53625DB6
    Metadata:
      aws:cdk:path: InfraStack/MainVpc/VPCGW
  MainVpcFlowLogsIAMRoleFCF16B99:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
        Version: "2012-10-17"
      Tags:
        - Key: Name
          Value: InfraStack/MainVpc
    Metadata:
      aws:cdk:path: InfraStack/MainVpc/FlowLogs/IAMRole/Resource
  MainVpcFlowLogsIAMRoleDefaultPolicy27D55198:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - VPCFlowLogE5B599B1
                - Arn
          - Action: iam:PassRole
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - MainVpcFlowLogsIAMRoleFCF16B99
                - Arn
        Version: "2012-10-17"
      PolicyName: MainVpcFlowLogsIAMRoleDefaultPolicy27D55198
      Roles:
        - Ref: MainVpcFlowLogsIAMRoleFCF16B99
    Metadata:
      aws:cdk:path: InfraStack/MainVpc/FlowLogs/IAMRole/DefaultPolicy/Resource
  MainVpcFlowLogsFlowLog74034E5C:
    Type: AWS::EC2::FlowLog
    Properties:
      ResourceId:
        Ref: MainVpc919A5E7E
      ResourceType: VPC
      TrafficType: ALL
      DeliverLogsPermissionArn:
        Fn::GetAtt:
          - MainVpcFlowLogsIAMRoleFCF16B99
          - Arn
      LogDestinationType: cloud-watch-logs
      LogGroupName:
        Ref: VPCFlowLogE5B599B1
      Tags:
        - Key: Name
          Value: InfraStack/MainVpc
    Metadata:
      aws:cdk:path: InfraStack/MainVpc/FlowLogs/FlowLog
  VPCFlowLogE5B599B1:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: InfraStack/VPCFlowLog/Resource
  DBSecurityGroupE3B245A3:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: InfraStack/DBSecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: MainVpc919A5E7E
    Metadata:
      aws:cdk:path: InfraStack/DBSecurityGroup/Resource
  DBSecurityGroupfromInfraStackECSSecurityGroupC830B1065432050A6DDA:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: from InfraStackECSSecurityGroupC830B106:5432
      FromPort: 5432
      GroupId:
        Fn::GetAtt:
          - DBSecurityGroupE3B245A3
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - ECSSecurityGroupA14DBE7D
          - GroupId
      ToPort: 5432
    Metadata:
      aws:cdk:path: InfraStack/DBSecurityGroup/from InfraStackECSSecurityGroupC830B106:5432
  ECSSecurityGroupA14DBE7D:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: InfraStack/ECSSecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: MainVpc919A5E7E
    Metadata:
      aws:cdk:path: InfraStack/ECSSecurityGroup/Resource
  DatabaseDBUser86AEEE7F:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Database user for Kong
      GenerateSecretString:
        ExcludeNumbers: true
        ExcludePunctuation: true
        ExcludeUppercase: true
        PasswordLength: 20
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: InfraStack/Database/DBUser/Resource
  DatabaseDBPass40D4F53A:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Database password for Kong
      GenerateSecretString:
        ExcludeCharacters: / @ "  '
        PasswordLength: 20
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: InfraStack/Database/DBPass/Resource
  DatabaseDBInstanceSubnetGroup63BB5558:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for DBInstance database
      SubnetIds:
        - Ref: MainVpcPrivateSubnet1SubnetA8D0757B
        - Ref: MainVpcPrivateSubnet2SubnetFC4F66C4
    Metadata:
      aws:cdk:path: InfraStack/Database/DBInstance/SubnetGroup/Default
  DatabaseDBInstance65231746:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t4g.medium
      AllocatedStorage: "20"
      AutoMinorVersionUpgrade: true
      CopyTagsToSnapshot: true
      DBName: kong
      DBSubnetGroupName:
        Ref: DatabaseDBInstanceSubnetGroup63BB5558
      EnableIAMDatabaseAuthentication: true
      Engine: postgres
      EngineVersion: "13.3"
      MasterUsername:
        Fn::Join:
          - ""
          - - "{{resolve:secretsmanager:"
            - Ref: DatabaseDBUser86AEEE7F
            - :SecretString:::}}
      MasterUserPassword:
        Fn::Join:
          - ""
          - - "{{resolve:secretsmanager:"
            - Ref: DatabaseDBPass40D4F53A
            - :SecretString:::}}
      MultiAZ: true
      PubliclyAccessible: false
      StorageType: gp2
      VPCSecurityGroups:
        - Fn::GetAtt:
            - DBSecurityGroupE3B245A3
            - GroupId
    UpdateReplacePolicy: Snapshot
    DeletionPolicy: Snapshot
    Metadata:
      aws:cdk:path: InfraStack/Database/DBInstance/Resource
  ContainerClusterC7EDAA3A:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: kong-cluster
    Metadata:
      aws:cdk:path: InfraStack/Container/Cluster/Resource
  ContainerCluster9179DC3F:
    Type: AWS::ECS::ClusterCapacityProviderAssociations
    Properties:
      CapacityProviders:
        - Ref: ContainerAsgCapacityProvider49276D60
      Cluster:
        Ref: ContainerClusterC7EDAA3A
      DefaultCapacityProviderStrategy: []
    Metadata:
      aws:cdk:path: InfraStack/Container/Cluster/Cluster
  ContainerASGInstanceRoleEDBF5AAE:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - ec2.
                    - Ref: AWS::URLSuffix
        Version: "2012-10-17"
      Tags:
        - Key: Name
          Value: InfraStack/Container/ASG
    Metadata:
      aws:cdk:path: InfraStack/Container/ASG/InstanceRole/Resource
  ContainerASGInstanceRoleDefaultPolicy23A36B19:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecs:DeregisterContainerInstance
              - ecs:RegisterContainerInstance
              - ecs:Submit*
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - ContainerClusterC7EDAA3A
                - Arn
          - Action:
              - ecs:Poll
              - ecs:StartTelemetrySession
            Condition:
              ArnEquals:
                ecs:cluster:
                  Fn::GetAtt:
                    - ContainerClusterC7EDAA3A
                    - Arn
            Effect: Allow
            Resource: "*"
          - Action:
              - ecs:DiscoverPollEndpoint
              - ecr:GetAuthorizationToken
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: ContainerASGInstanceRoleDefaultPolicy23A36B19
      Roles:
        - Ref: ContainerASGInstanceRoleEDBF5AAE
    Metadata:
      aws:cdk:path: InfraStack/Container/ASG/InstanceRole/DefaultPolicy/Resource
  ContainerASGInstanceProfileBD3CAFB0:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: ContainerASGInstanceRoleEDBF5AAE
    Metadata:
      aws:cdk:path: InfraStack/Container/ASG/InstanceProfile
  ContainerASGLaunchConfig961FC72C:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        Ref: SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter
      InstanceType: t2.micro
      IamInstanceProfile:
        Ref: ContainerASGInstanceProfileBD3CAFB0
      SecurityGroups:
        - Fn::GetAtt:
            - ECSSecurityGroupA14DBE7D
            - GroupId
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - |-
                #!/bin/bash
                echo ECS_CLUSTER=
              - Ref: ContainerClusterC7EDAA3A
              - |-2
                 >> /etc/ecs/ecs.config
                sudo iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP
                sudo service iptables save
                echo ECS_AWSVPC_BLOCK_IMDS=true >> /etc/ecs/ecs.config
    DependsOn:
      - ContainerASGInstanceRoleDefaultPolicy23A36B19
      - ContainerASGInstanceRoleEDBF5AAE
    Metadata:
      aws:cdk:path: InfraStack/Container/ASG/LaunchConfig
  ContainerASG73E1A73F:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MaxSize: "1"
      MinSize: "1"
      LaunchConfigurationName:
        Ref: ContainerASGLaunchConfig961FC72C
      NewInstancesProtectedFromScaleIn: true
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: InfraStack/Container/ASG
      VPCZoneIdentifier:
        - Ref: MainVpcPrivateSubnet1SubnetA8D0757B
        - Ref: MainVpcPrivateSubnet2SubnetFC4F66C4
    UpdatePolicy:
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: true
    Metadata:
      aws:cdk:path: InfraStack/Container/ASG/ASG
  ContainerAsgCapacityProvider49276D60:
    Type: AWS::ECS::CapacityProvider
    Properties:
      AutoScalingGroupProvider:
        AutoScalingGroupArn:
          Ref: ContainerASG73E1A73F
        ManagedScaling:
          Status: ENABLED
          TargetCapacity: 100
        ManagedTerminationProtection: ENABLED
    Metadata:
      aws:cdk:path: InfraStack/Container/AsgCapacityProvider/AsgCapacityProvider
  ContainerTaskDefTaskRole52A89FE3:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: InfraStack/Container/TaskDef/TaskRole/Resource
  ContainerTaskDefA7E30A37:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Command:
            - kong
            - migrations
            - bootstrap
          Environment:
            - Name: KONG_DATABASE
              Value: postgres
            - Name: KONG_PG_HOST
              Value:
                Fn::GetAtt:
                  - DatabaseDBInstance65231746
                  - Endpoint.Address
            - Name: KONG_PG_DATABASE
              Value: kong
            - Name: KONG_PG_USER
              Value:
                Fn::Join:
                  - ""
                  - - "{{resolve:secretsmanager:"
                    - Ref: DatabaseDBUser86AEEE7F
                    - :SecretString:::}}
            - Name: KONG_PG_PASSWORD
              Value:
                Fn::Join:
                  - ""
                  - - "{{resolve:secretsmanager:"
                    - Ref: DatabaseDBPass40D4F53A
                    - :SecretString:::}}
            - Name: KONG_PG_PORT
              Value:
                Fn::GetAtt:
                  - DatabaseDBInstance65231746
                  - Endpoint.Port
          Essential: true
          Image: public.ecr.aws/bitnami/kong
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: ContainerTaskDefDefaultContainerLogGroupB9AD721C
              awslogs-stream-prefix: kong
              awslogs-region:
                Ref: AWS::Region
          Memory: 512
          Name: DefaultContainer
      ExecutionRoleArn:
        Fn::GetAtt:
          - ContainerTaskDefExecutionRole094BD839
          - Arn
      Family: InfraStackContainerTaskDefA27024E2
      NetworkMode: bridge
      RequiresCompatibilities:
        - EC2
      TaskRoleArn:
        Fn::GetAtt:
          - ContainerTaskDefTaskRole52A89FE3
          - Arn
    Metadata:
      aws:cdk:path: InfraStack/Container/TaskDef/Resource
  ContainerTaskDefDefaultContainerLogGroupB9AD721C:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: InfraStack/Container/TaskDef/DefaultContainer/LogGroup/Resource
  ContainerTaskDefExecutionRole094BD839:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: InfraStack/Container/TaskDef/ExecutionRole/Resource
  ContainerTaskDefExecutionRoleDefaultPolicyC096A62E:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - ContainerTaskDefDefaultContainerLogGroupB9AD721C
                - Arn
        Version: "2012-10-17"
      PolicyName: ContainerTaskDefExecutionRoleDefaultPolicyC096A62E
      Roles:
        - Ref: ContainerTaskDefExecutionRole094BD839
    Metadata:
      aws:cdk:path: InfraStack/Container/TaskDef/ExecutionRole/DefaultPolicy/Resource
  ContainerEC2KongService6A2CB7EC:
    Type: AWS::ECS::Service
    Properties:
      CapacityProviderStrategy:
        - CapacityProvider:
            Ref: ContainerAsgCapacityProvider49276D60
          Weight: 1
      Cluster:
        Ref: ContainerClusterC7EDAA3A
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 1
      EnableECSManagedTags: false
      SchedulingStrategy: REPLICA
      TaskDefinition:
        Ref: ContainerTaskDefA7E30A37
    Metadata:
      aws:cdk:path: InfraStack/Container/EC2KongService/Service
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/31SQW7jMAx8S++K2uSyvWaTbhFg0Rpx0WtBy4zLxpYCkUpQGPr7ynYcBymwJw6H1GhIaaHnv/TDHZx4Zsr9rKZCt7mA2atEfbRoFrp9Pxi12tn3bKWyUNRk8lBYlI6b0NYFwTcoapz4iVsyO0Mg5OyluQNPm6wLLyDPIHiCb5V5OiY4CW+soE94bBicnLOlJK+fDVpRf2p3+uuqrj7CHE3wJN/P3oVDb+u/xMZWHpmjImh0u3XDKH3MXBq7v3tCG8sC1mDm3Y5qjKp2Fes2XXyRH3FUjMajcAMWKvRpx31+tpBQVL5Mh9cgUADjqK2GPVwE179/EGNrVGiSwqoOnBbW1X7CFRzApHGT5SOV6K+ehdWSq9t6f/SWezKLN+D9GndkaXzRW8ZZAbLor7h0Lkd/JDP8kAFGBUEcG6jJVrpdpiQfkmmJEKz5TIo7qoK//KHb1hjVFtkFP+i/BjmEfsEZeGjwvIjrliRZ9taisq5E/cX3x/mjni/0/O6LiWY+WKEG9XaI/wD0yqhlLAMAAA==
    Metadata:
      aws:cdk:path: InfraStack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Outputs:
  DatabasedbUserSecretName86557B53:
    Description: Database User Secret Name
    Value:
      Fn::Join:
        - "-"
        - - Fn::Select:
              - 0
              - Fn::Split:
                  - "-"
                  - Fn::Select:
                      - 6
                      - Fn::Split:
                          - ":"
                          - Ref: DatabaseDBUser86AEEE7F
          - Fn::Select:
              - 1
              - Fn::Split:
                  - "-"
                  - Fn::Select:
                      - 6
                      - Fn::Split:
                          - ":"
                          - Ref: DatabaseDBUser86AEEE7F
  DatabasedbPassSecretName6FE681F7:
    Description: Database Password Secret Name
    Value:
      Fn::Join:
        - "-"
        - - Fn::Select:
              - 0
              - Fn::Split:
                  - "-"
                  - Fn::Select:
                      - 6
                      - Fn::Split:
                          - ":"
                          - Ref: DatabaseDBPass40D4F53A
          - Fn::Select:
              - 1
              - Fn::Split:
                  - "-"
                  - Fn::Select:
                      - 6
                      - Fn::Split:
                          - ":"
                          - Ref: DatabaseDBPass40D4F53A
  DatabaseDBInstanceEndpoint65EB52A4:
    Description: Database endpoint
    Value:
      Fn::GetAtt:
        - DatabaseDBInstance65231746
        - Endpoint.Address
  DatabaseDBInstancePort8D416AED:
    Description: Database port
    Value:
      Fn::GetAtt:
        - DatabaseDBInstance65231746
        - Endpoint.Port
Parameters:
  SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2
Rules:
  CheckBootstrapVersion:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::Contains:
                - - "1"
                  - "2"
                  - "3"
                  - "4"
                  - "5"
                - Ref: BootstrapVersion
        AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.

