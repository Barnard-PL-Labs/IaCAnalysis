Resources:
  GreetingVpcE379962A:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: greeting-stack/GreetingVpc
    Metadata:
      aws:cdk:path: greeting-stack/GreetingVpc/Resource
  GreetingVpcPublicSubnet1SubnetC2F66756:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/18
      VpcId:
        Ref: GreetingVpcE379962A
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: greeting-stack/GreetingVpc/PublicSubnet1
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
    Metadata:
      aws:cdk:path: greeting-stack/GreetingVpc/PublicSubnet1/Subnet
  GreetingVpcPublicSubnet1RouteTableDF985C84:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: GreetingVpcE379962A
      Tags:
        - Key: Name
          Value: greeting-stack/GreetingVpc/PublicSubnet1
    Metadata:
      aws:cdk:path: greeting-stack/GreetingVpc/PublicSubnet1/RouteTable
  GreetingVpcPublicSubnet1RouteTableAssociationFA3BEDB9:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: GreetingVpcPublicSubnet1RouteTableDF985C84
      SubnetId:
        Ref: GreetingVpcPublicSubnet1SubnetC2F66756
    Metadata:
      aws:cdk:path: greeting-stack/GreetingVpc/PublicSubnet1/RouteTableAssociation
  GreetingVpcPublicSubnet1DefaultRoute13F0C03E:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: GreetingVpcPublicSubnet1RouteTableDF985C84
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: GreetingVpcIGW2B1C3108
    DependsOn:
      - GreetingVpcVPCGWFA0FEB29
    Metadata:
      aws:cdk:path: greeting-stack/GreetingVpc/PublicSubnet1/DefaultRoute
  GreetingVpcPublicSubnet1EIP470AE761:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    Metadata:
      aws:cdk:path: greeting-stack/GreetingVpc/PublicSubnet1/EIP
  GreetingVpcPublicSubnet1NATGatewayB10F778B:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - GreetingVpcPublicSubnet1EIP470AE761
          - AllocationId
      SubnetId:
        Ref: GreetingVpcPublicSubnet1SubnetC2F66756
      Tags:
        - Key: Name
          Value: greeting-stack/GreetingVpc/PublicSubnet1
    Metadata:
      aws:cdk:path: greeting-stack/GreetingVpc/PublicSubnet1/NATGateway
  GreetingVpcPublicSubnet2SubnetE4B2866F:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.64.0/18
      VpcId:
        Ref: GreetingVpcE379962A
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: greeting-stack/GreetingVpc/PublicSubnet2
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
    Metadata:
      aws:cdk:path: greeting-stack/GreetingVpc/PublicSubnet2/Subnet
  GreetingVpcPublicSubnet2RouteTableC678B858:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: GreetingVpcE379962A
      Tags:
        - Key: Name
          Value: greeting-stack/GreetingVpc/PublicSubnet2
    Metadata:
      aws:cdk:path: greeting-stack/GreetingVpc/PublicSubnet2/RouteTable
  GreetingVpcPublicSubnet2RouteTableAssociation833029E9:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: GreetingVpcPublicSubnet2RouteTableC678B858
      SubnetId:
        Ref: GreetingVpcPublicSubnet2SubnetE4B2866F
    Metadata:
      aws:cdk:path: greeting-stack/GreetingVpc/PublicSubnet2/RouteTableAssociation
  GreetingVpcPublicSubnet2DefaultRoute8CF6B809:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: GreetingVpcPublicSubnet2RouteTableC678B858
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: GreetingVpcIGW2B1C3108
    DependsOn:
      - GreetingVpcVPCGWFA0FEB29
    Metadata:
      aws:cdk:path: greeting-stack/GreetingVpc/PublicSubnet2/DefaultRoute
  GreetingVpcPublicSubnet2EIP25A063F1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    Metadata:
      aws:cdk:path: greeting-stack/GreetingVpc/PublicSubnet2/EIP
  GreetingVpcPublicSubnet2NATGateway3CAEF29B:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - GreetingVpcPublicSubnet2EIP25A063F1
          - AllocationId
      SubnetId:
        Ref: GreetingVpcPublicSubnet2SubnetE4B2866F
      Tags:
        - Key: Name
          Value: greeting-stack/GreetingVpc/PublicSubnet2
    Metadata:
      aws:cdk:path: greeting-stack/GreetingVpc/PublicSubnet2/NATGateway
  GreetingVpcPrivateSubnet1Subnet9F6BD596:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.128.0/18
      VpcId:
        Ref: GreetingVpcE379962A
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: greeting-stack/GreetingVpc/PrivateSubnet1
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
    Metadata:
      aws:cdk:path: greeting-stack/GreetingVpc/PrivateSubnet1/Subnet
  GreetingVpcPrivateSubnet1RouteTable6C024CFF:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: GreetingVpcE379962A
      Tags:
        - Key: Name
          Value: greeting-stack/GreetingVpc/PrivateSubnet1
    Metadata:
      aws:cdk:path: greeting-stack/GreetingVpc/PrivateSubnet1/RouteTable
  GreetingVpcPrivateSubnet1RouteTableAssociationF07686A1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: GreetingVpcPrivateSubnet1RouteTable6C024CFF
      SubnetId:
        Ref: GreetingVpcPrivateSubnet1Subnet9F6BD596
    Metadata:
      aws:cdk:path: greeting-stack/GreetingVpc/PrivateSubnet1/RouteTableAssociation
  GreetingVpcPrivateSubnet1DefaultRoute39E4A7BC:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: GreetingVpcPrivateSubnet1RouteTable6C024CFF
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: GreetingVpcPublicSubnet1NATGatewayB10F778B
    Metadata:
      aws:cdk:path: greeting-stack/GreetingVpc/PrivateSubnet1/DefaultRoute
  GreetingVpcPrivateSubnet2Subnet38EDDB21:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.192.0/18
      VpcId:
        Ref: GreetingVpcE379962A
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: greeting-stack/GreetingVpc/PrivateSubnet2
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
    Metadata:
      aws:cdk:path: greeting-stack/GreetingVpc/PrivateSubnet2/Subnet
  GreetingVpcPrivateSubnet2RouteTableE148428B:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: GreetingVpcE379962A
      Tags:
        - Key: Name
          Value: greeting-stack/GreetingVpc/PrivateSubnet2
    Metadata:
      aws:cdk:path: greeting-stack/GreetingVpc/PrivateSubnet2/RouteTable
  GreetingVpcPrivateSubnet2RouteTableAssociation477753B5:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: GreetingVpcPrivateSubnet2RouteTableE148428B
      SubnetId:
        Ref: GreetingVpcPrivateSubnet2Subnet38EDDB21
    Metadata:
      aws:cdk:path: greeting-stack/GreetingVpc/PrivateSubnet2/RouteTableAssociation
  GreetingVpcPrivateSubnet2DefaultRoute900BFF95:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: GreetingVpcPrivateSubnet2RouteTableE148428B
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: GreetingVpcPublicSubnet2NATGateway3CAEF29B
    Metadata:
      aws:cdk:path: greeting-stack/GreetingVpc/PrivateSubnet2/DefaultRoute
  GreetingVpcIGW2B1C3108:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: greeting-stack/GreetingVpc
    Metadata:
      aws:cdk:path: greeting-stack/GreetingVpc/IGW
  GreetingVpcVPCGWFA0FEB29:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: GreetingVpcE379962A
      InternetGatewayId:
        Ref: GreetingVpcIGW2B1C3108
    Metadata:
      aws:cdk:path: greeting-stack/GreetingVpc/VPCGW
  ClusterEB0386A7:
    Type: AWS::ECS::Cluster
    Metadata:
      aws:cdk:path: greeting-stack/Cluster/Resource
  ClustergreetercapacityInstanceSecurityGroupAF5C3390:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: greeting-stack/Cluster/greeter-capacity/InstanceSecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress: []
      Tags:
        - Key: Name
          Value: greeting-stack/Cluster/greeter-capacity
      VpcId:
        Ref: GreetingVpcE379962A
    Metadata:
      aws:cdk:path: greeting-stack/Cluster/greeter-capacity/InstanceSecurityGroup/Resource
  ClustergreetercapacityInstanceSecurityGroupfromgreetingstackinternalSecurityGroupFDAD8FED327686553540A5ADF9:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort: 32768
      GroupId:
        Fn::GetAtt:
          - ClustergreetercapacityInstanceSecurityGroupAF5C3390
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - internalSecurityGroupF1BDDA61
          - GroupId
      ToPort: 65535
    Metadata:
      aws:cdk:path: greeting-stack/Cluster/greeter-capacity/InstanceSecurityGroup/from greetingstackinternalSecurityGroupFDAD8FED:32768-65535
  ClustergreetercapacityInstanceSecurityGroupfromgreetingstackexternalSecurityGroupB226732132768655351EBFDD71:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort: 32768
      GroupId:
        Fn::GetAtt:
          - ClustergreetercapacityInstanceSecurityGroupAF5C3390
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - externalSecurityGroupCBA1C4B8
          - GroupId
      ToPort: 65535
    Metadata:
      aws:cdk:path: greeting-stack/Cluster/greeter-capacity/InstanceSecurityGroup/from greetingstackexternalSecurityGroupB2267321:32768-65535
  ClustergreetercapacityInstanceRole19409099:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - ec2.
                    - Ref: AWS::URLSuffix
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: greeting-stack/Cluster/greeter-capacity/InstanceRole/Resource
  ClustergreetercapacityInstanceRoleDefaultPolicyBDB58BD2:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecs:CreateCluster
              - ecs:DeregisterContainerInstance
              - ecs:DiscoverPollEndpoint
              - ecs:Poll
              - ecs:RegisterContainerInstance
              - ecs:StartTelemetrySession
              - ecs:Submit*
              - ecr:GetAuthorizationToken
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: ClustergreetercapacityInstanceRoleDefaultPolicyBDB58BD2
      Roles:
        - Ref: ClustergreetercapacityInstanceRole19409099
    Metadata:
      aws:cdk:path: greeting-stack/Cluster/greeter-capacity/InstanceRole/DefaultPolicy/Resource
  ClustergreetercapacityInstanceProfile251BCDE4:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: ClustergreetercapacityInstanceRole19409099
    Metadata:
      aws:cdk:path: greeting-stack/Cluster/greeter-capacity/InstanceProfile
  ClustergreetercapacityLaunchConfig704F2DF5:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        Ref: SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter
      InstanceType: t3.xlarge
      IamInstanceProfile:
        Ref: ClustergreetercapacityInstanceProfile251BCDE4
      SecurityGroups:
        - Fn::GetAtt:
            - ClustergreetercapacityInstanceSecurityGroupAF5C3390
            - GroupId
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - |-
                #!/bin/bash
                echo ECS_CLUSTER=
              - Ref: ClusterEB0386A7
              - |-2
                 >> /etc/ecs/ecs.config
                sudo iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP
                sudo service iptables save
                echo ECS_AWSVPC_BLOCK_IMDS=true >> /etc/ecs/ecs.config
    DependsOn:
      - ClustergreetercapacityInstanceRoleDefaultPolicyBDB58BD2
      - ClustergreetercapacityInstanceRole19409099
    Metadata:
      aws:cdk:path: greeting-stack/Cluster/greeter-capacity/LaunchConfig
  ClustergreetercapacityASG6EF3107F:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MaxSize: "3"
      MinSize: "3"
      DesiredCapacity: "3"
      LaunchConfigurationName:
        Ref: ClustergreetercapacityLaunchConfig704F2DF5
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: greeting-stack/Cluster/greeter-capacity
      VPCZoneIdentifier:
        - Ref: GreetingVpcPrivateSubnet1Subnet9F6BD596
        - Ref: GreetingVpcPrivateSubnet2Subnet38EDDB21
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: true
    Metadata:
      aws:cdk:path: greeting-stack/Cluster/greeter-capacity/ASG
  ClustergreetercapacityDrainECSHookFunctionServiceRole14DC87BA:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - lambda.
                    - Ref: AWS::URLSuffix
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: greeting-stack/Cluster/greeter-capacity/DrainECSHook/Function/ServiceRole/Resource
  ClustergreetercapacityDrainECSHookFunctionServiceRoleDefaultPolicy9A426E92:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ec2:DescribeInstances
              - ec2:DescribeInstanceAttribute
              - ec2:DescribeInstanceStatus
              - ec2:DescribeHosts
            Effect: Allow
            Resource: "*"
          - Action: autoscaling:CompleteLifecycleAction
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":autoscaling:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :autoScalingGroup:*:autoScalingGroupName/
                  - Ref: ClustergreetercapacityASG6EF3107F
          - Action:
              - ecs:DescribeContainerInstances
              - ecs:DescribeTasks
            Effect: Allow
            Resource: "*"
          - Action:
              - ecs:ListContainerInstances
              - ecs:SubmitContainerStateChange
              - ecs:SubmitTaskStateChange
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - ClusterEB0386A7
                - Arn
          - Action:
              - ecs:UpdateContainerInstancesState
              - ecs:ListTasks
            Condition:
              ArnEquals:
                ecs:cluster:
                  Fn::GetAtt:
                    - ClusterEB0386A7
                    - Arn
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: ClustergreetercapacityDrainECSHookFunctionServiceRoleDefaultPolicy9A426E92
      Roles:
        - Ref: ClustergreetercapacityDrainECSHookFunctionServiceRole14DC87BA
    Metadata:
      aws:cdk:path: greeting-stack/Cluster/greeter-capacity/DrainECSHook/Function/ServiceRole/DefaultPolicy/Resource
  ClustergreetercapacityDrainECSHookFunctionC9412316:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3, json, os, time

          ecs = boto3.client('ecs')
          autoscaling = boto3.client('autoscaling')


          def lambda_handler(event, context):
            print(json.dumps(event))
            cluster = os.environ['CLUSTER']
            snsTopicArn = event['Records'][0]['Sns']['TopicArn']
            lifecycle_event = json.loads(event['Records'][0]['Sns']['Message'])
            instance_id = lifecycle_event.get('EC2InstanceId')
            if not instance_id:
              print('Got event without EC2InstanceId: %s', json.dumps(event))
              return

            instance_arn = container_instance_arn(cluster, instance_id)
            print('Instance %s has container instance ARN %s' % (lifecycle_event['EC2InstanceId'], instance_arn))

            if not instance_arn:
              return

            while has_tasks(cluster, instance_arn):
              time.sleep(10)

            try:
              print('Terminating instance %s' % instance_id)
              autoscaling.complete_lifecycle_action(
                  LifecycleActionResult='CONTINUE',
                  **pick(lifecycle_event, 'LifecycleHookName', 'LifecycleActionToken', 'AutoScalingGroupName'))
            except Exception as e:
              # Lifecycle action may have already completed.
              print(str(e))


          def container_instance_arn(cluster, instance_id):
            """Turn an instance ID into a container instance ARN."""
            arns = ecs.list_container_instances(cluster=cluster, filter='ec2InstanceId==' + instance_id)['containerInstanceArns']
            if not arns:
              return None
            return arns[0]


          def has_tasks(cluster, instance_arn):
            """Return True if the instance is running tasks for the given cluster."""
            instances = ecs.describe_container_instances(cluster=cluster, containerInstances=[instance_arn])['containerInstances']
            if not instances:
              return False
            instance = instances[0]

            if instance['status'] == 'ACTIVE':
              # Start draining, then try again later
              set_container_instance_to_draining(cluster, instance_arn)
              return True

            tasks = instance['runningTasksCount'] + instance['pendingTasksCount']
            print('Instance %s has %s tasks' % (instance_arn, tasks))

            return tasks > 0


          def set_container_instance_to_draining(cluster, instance_arn):
            ecs.update_container_instances_state(
                cluster=cluster,
                containerInstances=[instance_arn], status='DRAINING')


          def pick(dct, *keys):
            """Pick a subset of a dict."""
            return {k: v for k, v in dct.items() if k in keys}
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
          - ClustergreetercapacityDrainECSHookFunctionServiceRole14DC87BA
          - Arn
      Runtime: python3.6
      Environment:
        Variables:
          CLUSTER:
            Ref: ClusterEB0386A7
      Tags:
        - Key: Name
          Value: greeting-stack/Cluster/greeter-capacity
      Timeout: 310
    DependsOn:
      - ClustergreetercapacityDrainECSHookFunctionServiceRoleDefaultPolicy9A426E92
      - ClustergreetercapacityDrainECSHookFunctionServiceRole14DC87BA
    Metadata:
      aws:cdk:path: greeting-stack/Cluster/greeter-capacity/DrainECSHook/Function/Resource
  ClustergreetercapacityDrainECSHookFunctionAllowInvokegreetingstackClustergreetercapacityLifecycleHookDrainHookTopicC97F69E5C82A60B5:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ClustergreetercapacityDrainECSHookFunctionC9412316
          - Arn
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: ClustergreetercapacityLifecycleHookDrainHookTopicB1CCB7C3
    Metadata:
      aws:cdk:path: greeting-stack/Cluster/greeter-capacity/DrainECSHook/Function/AllowInvoke:greetingstackClustergreetercapacityLifecycleHookDrainHookTopicC97F69E5
  ClustergreetercapacityDrainECSHookFunctionTopicD26DC16E:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      TopicArn:
        Ref: ClustergreetercapacityLifecycleHookDrainHookTopicB1CCB7C3
      Endpoint:
        Fn::GetAtt:
          - ClustergreetercapacityDrainECSHookFunctionC9412316
          - Arn
    Metadata:
      aws:cdk:path: greeting-stack/Cluster/greeter-capacity/DrainECSHook/Function/Topic/Resource
  ClustergreetercapacityLifecycleHookDrainHookRoleCA0C0149:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - autoscaling.
                    - Ref: AWS::URLSuffix
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: greeting-stack/Cluster/greeter-capacity/LifecycleHookDrainHook/Role/Resource
  ClustergreetercapacityLifecycleHookDrainHookRoleDefaultPolicy684F8ACD:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: sns:Publish
            Effect: Allow
            Resource:
              Ref: ClustergreetercapacityLifecycleHookDrainHookTopicB1CCB7C3
        Version: "2012-10-17"
      PolicyName: ClustergreetercapacityLifecycleHookDrainHookRoleDefaultPolicy684F8ACD
      Roles:
        - Ref: ClustergreetercapacityLifecycleHookDrainHookRoleCA0C0149
    Metadata:
      aws:cdk:path: greeting-stack/Cluster/greeter-capacity/LifecycleHookDrainHook/Role/DefaultPolicy/Resource
  ClustergreetercapacityLifecycleHookDrainHookTopicB1CCB7C3:
    Type: AWS::SNS::Topic
    Metadata:
      aws:cdk:path: greeting-stack/Cluster/greeter-capacity/LifecycleHookDrainHook/Topic/Resource
  ClustergreetercapacityLifecycleHookDrainHook577B3571:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName:
        Ref: ClustergreetercapacityASG6EF3107F
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
      DefaultResult: CONTINUE
      HeartbeatTimeout: 300
      NotificationTargetARN:
        Ref: ClustergreetercapacityLifecycleHookDrainHookTopicB1CCB7C3
      RoleARN:
        Fn::GetAtt:
          - ClustergreetercapacityLifecycleHookDrainHookRoleCA0C0149
          - Arn
    DependsOn:
      - ClustergreetercapacityLifecycleHookDrainHookRoleDefaultPolicy684F8ACD
      - ClustergreetercapacityLifecycleHookDrainHookRoleCA0C0149
    Metadata:
      aws:cdk:path: greeting-stack/Cluster/greeter-capacity/LifecycleHookDrainHook/Resource
  nametaskdefinitionTaskRole50FE844E:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - ecs-tasks.
                    - Ref: AWS::URLSuffix
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: greeting-stack/name-task-definition/TaskRole/Resource
  nametaskdefinition690762BB:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: nathanpeck/name
          Links: []
          Memory: 128
          MountPoints: []
          Name: name
          PortMappings:
            - ContainerPort: 3000
              HostPort: 0
              Protocol: tcp
          Ulimits: []
          VolumesFrom: []
      Family: greetingstacknametaskdefinitionD108BA55
      NetworkMode: bridge
      RequiresCompatibilities:
        - EC2
      TaskRoleArn:
        Fn::GetAtt:
          - nametaskdefinitionTaskRole50FE844E
          - Arn
      Volumes: []
    Metadata:
      aws:cdk:path: greeting-stack/name-task-definition/Resource
  nameserviceService8015C8D6:
    Type: AWS::ECS::Service
    Properties:
      TaskDefinition:
        Ref: nametaskdefinition690762BB
      Cluster:
        Ref: ClusterEB0386A7
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 2
      HealthCheckGracePeriodSeconds: 60
      LaunchType: EC2
      LoadBalancers:
        - ContainerName: name
          ContainerPort: 3000
          TargetGroupArn:
            Ref: internalPublicListenernameGroupEC50A54F
      SchedulingStrategy: REPLICA
      ServiceRegistries: []
    DependsOn:
      - internalPublicListenernameRule01D9C721
    Metadata:
      aws:cdk:path: greeting-stack/name-service/Service
  greetingtaskdefinitionTaskRole9179DA4A:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - ecs-tasks.
                    - Ref: AWS::URLSuffix
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: greeting-stack/greeting-task-definition/TaskRole/Resource
  greetingtaskdefinition31690093:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: nathanpeck/greeting
          Links: []
          Memory: 128
          MountPoints: []
          Name: greeting
          PortMappings:
            - ContainerPort: 3000
              HostPort: 0
              Protocol: tcp
          Ulimits: []
          VolumesFrom: []
      Family: greetingstackgreetingtaskdefinition86E9FE60
      NetworkMode: bridge
      RequiresCompatibilities:
        - EC2
      TaskRoleArn:
        Fn::GetAtt:
          - greetingtaskdefinitionTaskRole9179DA4A
          - Arn
      Volumes: []
    Metadata:
      aws:cdk:path: greeting-stack/greeting-task-definition/Resource
  greetingserviceService8DA58640:
    Type: AWS::ECS::Service
    Properties:
      TaskDefinition:
        Ref: greetingtaskdefinition31690093
      Cluster:
        Ref: ClusterEB0386A7
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 2
      HealthCheckGracePeriodSeconds: 60
      LaunchType: EC2
      LoadBalancers:
        - ContainerName: greeting
          ContainerPort: 3000
          TargetGroupArn:
            Ref: internalPublicListenergreetingGroup6F008E9E
      SchedulingStrategy: REPLICA
      ServiceRegistries: []
    DependsOn:
      - internalPublicListenergreetingRule9BD368CE
    Metadata:
      aws:cdk:path: greeting-stack/greeting-service/Service
  internal505AC855:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes: []
      Scheme: internal
      SecurityGroups:
        - Fn::GetAtt:
            - internalSecurityGroupF1BDDA61
            - GroupId
      Subnets:
        - Ref: GreetingVpcPrivateSubnet1Subnet9F6BD596
        - Ref: GreetingVpcPrivateSubnet2Subnet38EDDB21
      Type: application
    Metadata:
      aws:cdk:path: greeting-stack/internal/Resource
  internalSecurityGroupF1BDDA61:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatically created Security Group for ELB greetingstackinternal4BE03C95
      SecurityGroupEgress: []
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Ref: GreetingVpcE379962A
    Metadata:
      aws:cdk:path: greeting-stack/internal/SecurityGroup/Resource
  internalSecurityGrouptogreetingstackClustergreetercapacityInstanceSecurityGroupF73C419C32768655354EA32285:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId:
        Fn::GetAtt:
          - internalSecurityGroupF1BDDA61
          - GroupId
      IpProtocol: tcp
      Description: Load balancer to target
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - ClustergreetercapacityInstanceSecurityGroupAF5C3390
          - GroupId
      FromPort: 32768
      ToPort: 65535
    Metadata:
      aws:cdk:path: greeting-stack/internal/SecurityGroup/to greetingstackClustergreetercapacityInstanceSecurityGroupF73C419C:32768-65535
  internalPublicListener5A4C5F4F:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: defaultC974F9E3
          Type: forward
      LoadBalancerArn:
        Ref: internal505AC855
      Port: 80
      Protocol: HTTP
      Certificates: []
    Metadata:
      aws:cdk:path: greeting-stack/internal/PublicListener/Resource
  internalPublicListenernameGroupEC50A54F:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes: []
      Targets: []
      TargetType: instance
      VpcId:
        Ref: GreetingVpcE379962A
    Metadata:
      aws:cdk:path: greeting-stack/internal/PublicListener/nameGroup/Resource
  internalPublicListenernameRule01D9C721:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn:
            Ref: internalPublicListenernameGroupEC50A54F
          Type: forward
      Conditions:
        - Field: path-pattern
          Values:
            - /name*
      ListenerArn:
        Ref: internalPublicListener5A4C5F4F
      Priority: 1
    Metadata:
      aws:cdk:path: greeting-stack/internal/PublicListener/nameRule/Resource
  internalPublicListenergreetingGroup6F008E9E:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes: []
      Targets: []
      TargetType: instance
      VpcId:
        Ref: GreetingVpcE379962A
    Metadata:
      aws:cdk:path: greeting-stack/internal/PublicListener/greetingGroup/Resource
  internalPublicListenergreetingRule9BD368CE:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn:
            Ref: internalPublicListenergreetingGroup6F008E9E
          Type: forward
      Conditions:
        - Field: path-pattern
          Values:
            - /greeting*
      ListenerArn:
        Ref: internalPublicListener5A4C5F4F
      Priority: 2
    Metadata:
      aws:cdk:path: greeting-stack/internal/PublicListener/greetingRule/Resource
  defaultC974F9E3:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes: []
      Targets: []
      VpcId:
        Ref: GreetingVpcE379962A
    Metadata:
      aws:cdk:path: greeting-stack/default/Resource
  greetertaskdefinitionTaskRole2A098ACC:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - ecs-tasks.
                    - Ref: AWS::URLSuffix
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: greeting-stack/greeter-task-definition/TaskRole/Resource
  greetertaskdefinitionE956EEA2:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Environment:
            - Name: GREETING_URL
              Value:
                Fn::Join:
                  - ""
                  - - http://
                    - Fn::GetAtt:
                        - internal505AC855
                        - DNSName
                    - /greeting
            - Name: NAME_URL
              Value:
                Fn::Join:
                  - ""
                  - - http://
                    - Fn::GetAtt:
                        - internal505AC855
                        - DNSName
                    - /name
          Essential: true
          Image: nathanpeck/greeter
          Links: []
          Memory: 128
          MountPoints: []
          Name: greeter
          PortMappings:
            - ContainerPort: 3000
              HostPort: 0
              Protocol: tcp
          Ulimits: []
          VolumesFrom: []
      Family: greetingstackgreetertaskdefinition7E559B06
      NetworkMode: bridge
      RequiresCompatibilities:
        - EC2
      TaskRoleArn:
        Fn::GetAtt:
          - greetertaskdefinitionTaskRole2A098ACC
          - Arn
      Volumes: []
    Metadata:
      aws:cdk:path: greeting-stack/greeter-task-definition/Resource
  greeterserviceService8EDD3244:
    Type: AWS::ECS::Service
    Properties:
      TaskDefinition:
        Ref: greetertaskdefinitionE956EEA2
      Cluster:
        Ref: ClusterEB0386A7
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 2
      HealthCheckGracePeriodSeconds: 60
      LaunchType: EC2
      LoadBalancers:
        - ContainerName: greeter
          ContainerPort: 3000
          TargetGroupArn:
            Ref: externalPublicListenergreeterGroup138AB5AD
      SchedulingStrategy: REPLICA
      ServiceRegistries: []
    DependsOn:
      - externalPublicListenergreeterGroup138AB5AD
      - externalPublicListener4F32291C
    Metadata:
      aws:cdk:path: greeting-stack/greeter-service/Service
  external068F12D1:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes: []
      Scheme: internet-facing
      SecurityGroups:
        - Fn::GetAtt:
            - externalSecurityGroupCBA1C4B8
            - GroupId
      Subnets:
        - Ref: GreetingVpcPublicSubnet1SubnetC2F66756
        - Ref: GreetingVpcPublicSubnet2SubnetE4B2866F
      Type: application
    DependsOn:
      - GreetingVpcPublicSubnet1DefaultRoute13F0C03E
      - GreetingVpcPublicSubnet2DefaultRoute8CF6B809
    Metadata:
      aws:cdk:path: greeting-stack/external/Resource
  externalSecurityGroupCBA1C4B8:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatically created Security Group for ELB greetingstackexternalB9A60462
      SecurityGroupEgress: []
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Ref: GreetingVpcE379962A
    Metadata:
      aws:cdk:path: greeting-stack/external/SecurityGroup/Resource
  externalSecurityGrouptogreetingstackClustergreetercapacityInstanceSecurityGroupF73C419C32768655358E94B7AD:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId:
        Fn::GetAtt:
          - externalSecurityGroupCBA1C4B8
          - GroupId
      IpProtocol: tcp
      Description: Load balancer to target
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - ClustergreetercapacityInstanceSecurityGroupAF5C3390
          - GroupId
      FromPort: 32768
      ToPort: 65535
    Metadata:
      aws:cdk:path: greeting-stack/external/SecurityGroup/to greetingstackClustergreetercapacityInstanceSecurityGroupF73C419C:32768-65535
  externalPublicListener4F32291C:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: externalPublicListenergreeterGroup138AB5AD
          Type: forward
      LoadBalancerArn:
        Ref: external068F12D1
      Port: 80
      Protocol: HTTP
      Certificates: []
    Metadata:
      aws:cdk:path: greeting-stack/external/PublicListener/Resource
  externalPublicListenergreeterGroup138AB5AD:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes: []
      Targets: []
      TargetType: instance
      VpcId:
        Ref: GreetingVpcE379962A
    Metadata:
      aws:cdk:path: greeting-stack/external/PublicListener/greeterGroup/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Modules: aws-cdk=2.113.0,@aws-cdk/assets=0.37.0,@aws-cdk/aws-applicationautoscaling=0.37.0,@aws-cdk/aws-autoscaling=0.37.0,@aws-cdk/aws-autoscaling-common=0.37.0,@aws-cdk/aws-autoscaling-hooktargets=0.37.0,@aws-cdk/aws-cloudformation=0.37.0,@aws-cdk/aws-cloudwatch=0.37.0,@aws-cdk/aws-ec2=0.37.0,@aws-cdk/aws-ecr=0.37.0,@aws-cdk/aws-ecr-assets=0.37.0,@aws-cdk/aws-ecs=0.37.0,@aws-cdk/aws-elasticloadbalancingv2=0.37.0,@aws-cdk/aws-events=0.37.0,@aws-cdk/aws-iam=0.37.0,@aws-cdk/aws-kms=0.37.0,@aws-cdk/aws-lambda=0.37.0,@aws-cdk/aws-logs=0.37.0,@aws-cdk/aws-s3=0.37.0,@aws-cdk/aws-s3-assets=0.37.0,@aws-cdk/aws-servicediscovery=0.37.0,@aws-cdk/aws-sns=0.37.0,@aws-cdk/aws-sns-subscriptions=0.37.0,@aws-cdk/aws-sqs=0.37.0,@aws-cdk/aws-ssm=0.37.0,@aws-cdk/core=0.37.0,@aws-cdk/cx-api=0.37.0,@aws-cdk/region-info=0.37.0,jsii-runtime=node.js/v18.12.1
    Condition: CDKMetadataAvailable
Parameters:
  SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
Outputs:
  InternalDNS:
    Value:
      Fn::GetAtt:
        - internal505AC855
        - DNSName
    Export:
      Name: greeter-app-internal
  ExternalDNS:
    Value:
      Fn::GetAtt:
        - external068F12D1
        - DNSName
    Export:
      Name: greeter-app-external
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - il-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - me-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2

