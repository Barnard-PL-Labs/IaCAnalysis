Resources:
  MyFargateVPCB3360043:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: FargateStackStack/MyFargateVPC
    Metadata:
      aws:cdk:path: FargateStackStack/MyFargateVPC/Resource
  MyFargateVPCPublicSubnet1Subnet84454114:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/18
      VpcId:
        Ref: MyFargateVPCB3360043
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: FargateStackStack/MyFargateVPC/PublicSubnet1
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
    Metadata:
      aws:cdk:path: FargateStackStack/MyFargateVPC/PublicSubnet1/Subnet
  MyFargateVPCPublicSubnet1RouteTable3B625FCB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyFargateVPCB3360043
      Tags:
        - Key: Name
          Value: FargateStackStack/MyFargateVPC/PublicSubnet1
    Metadata:
      aws:cdk:path: FargateStackStack/MyFargateVPC/PublicSubnet1/RouteTable
  MyFargateVPCPublicSubnet1RouteTableAssociationF2AF3CFA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyFargateVPCPublicSubnet1RouteTable3B625FCB
      SubnetId:
        Ref: MyFargateVPCPublicSubnet1Subnet84454114
    Metadata:
      aws:cdk:path: FargateStackStack/MyFargateVPC/PublicSubnet1/RouteTableAssociation
  MyFargateVPCPublicSubnet1DefaultRouteC36542BE:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MyFargateVPCPublicSubnet1RouteTable3B625FCB
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: MyFargateVPCIGW0047A756
    DependsOn:
      - MyFargateVPCVPCGW438150AD
    Metadata:
      aws:cdk:path: FargateStackStack/MyFargateVPC/PublicSubnet1/DefaultRoute
  MyFargateVPCPublicSubnet1EIP81BF948F:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    Metadata:
      aws:cdk:path: FargateStackStack/MyFargateVPC/PublicSubnet1/EIP
  MyFargateVPCPublicSubnet1NATGateway66D9FB2E:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - MyFargateVPCPublicSubnet1EIP81BF948F
          - AllocationId
      SubnetId:
        Ref: MyFargateVPCPublicSubnet1Subnet84454114
      Tags:
        - Key: Name
          Value: FargateStackStack/MyFargateVPC/PublicSubnet1
    Metadata:
      aws:cdk:path: FargateStackStack/MyFargateVPC/PublicSubnet1/NATGateway
  MyFargateVPCPublicSubnet2Subnet9907CE43:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.64.0/18
      VpcId:
        Ref: MyFargateVPCB3360043
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: FargateStackStack/MyFargateVPC/PublicSubnet2
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
    Metadata:
      aws:cdk:path: FargateStackStack/MyFargateVPC/PublicSubnet2/Subnet
  MyFargateVPCPublicSubnet2RouteTable344573DC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyFargateVPCB3360043
      Tags:
        - Key: Name
          Value: FargateStackStack/MyFargateVPC/PublicSubnet2
    Metadata:
      aws:cdk:path: FargateStackStack/MyFargateVPC/PublicSubnet2/RouteTable
  MyFargateVPCPublicSubnet2RouteTableAssociationCE61C724:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyFargateVPCPublicSubnet2RouteTable344573DC
      SubnetId:
        Ref: MyFargateVPCPublicSubnet2Subnet9907CE43
    Metadata:
      aws:cdk:path: FargateStackStack/MyFargateVPC/PublicSubnet2/RouteTableAssociation
  MyFargateVPCPublicSubnet2DefaultRoute71941CB9:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MyFargateVPCPublicSubnet2RouteTable344573DC
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: MyFargateVPCIGW0047A756
    DependsOn:
      - MyFargateVPCVPCGW438150AD
    Metadata:
      aws:cdk:path: FargateStackStack/MyFargateVPC/PublicSubnet2/DefaultRoute
  MyFargateVPCPublicSubnet2EIP41F0A948:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    Metadata:
      aws:cdk:path: FargateStackStack/MyFargateVPC/PublicSubnet2/EIP
  MyFargateVPCPublicSubnet2NATGateway3687C5CB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - MyFargateVPCPublicSubnet2EIP41F0A948
          - AllocationId
      SubnetId:
        Ref: MyFargateVPCPublicSubnet2Subnet9907CE43
      Tags:
        - Key: Name
          Value: FargateStackStack/MyFargateVPC/PublicSubnet2
    Metadata:
      aws:cdk:path: FargateStackStack/MyFargateVPC/PublicSubnet2/NATGateway
  MyFargateVPCPrivateSubnet1Subnet6878B8DB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.128.0/18
      VpcId:
        Ref: MyFargateVPCB3360043
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: FargateStackStack/MyFargateVPC/PrivateSubnet1
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
    Metadata:
      aws:cdk:path: FargateStackStack/MyFargateVPC/PrivateSubnet1/Subnet
  MyFargateVPCPrivateSubnet1RouteTable69A78594:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyFargateVPCB3360043
      Tags:
        - Key: Name
          Value: FargateStackStack/MyFargateVPC/PrivateSubnet1
    Metadata:
      aws:cdk:path: FargateStackStack/MyFargateVPC/PrivateSubnet1/RouteTable
  MyFargateVPCPrivateSubnet1RouteTableAssociation26E67F43:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyFargateVPCPrivateSubnet1RouteTable69A78594
      SubnetId:
        Ref: MyFargateVPCPrivateSubnet1Subnet6878B8DB
    Metadata:
      aws:cdk:path: FargateStackStack/MyFargateVPC/PrivateSubnet1/RouteTableAssociation
  MyFargateVPCPrivateSubnet1DefaultRouteE46A2416:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MyFargateVPCPrivateSubnet1RouteTable69A78594
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: MyFargateVPCPublicSubnet1NATGateway66D9FB2E
    Metadata:
      aws:cdk:path: FargateStackStack/MyFargateVPC/PrivateSubnet1/DefaultRoute
  MyFargateVPCPrivateSubnet2Subnet4BF8ED9A:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.192.0/18
      VpcId:
        Ref: MyFargateVPCB3360043
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: FargateStackStack/MyFargateVPC/PrivateSubnet2
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
    Metadata:
      aws:cdk:path: FargateStackStack/MyFargateVPC/PrivateSubnet2/Subnet
  MyFargateVPCPrivateSubnet2RouteTableA3892194:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyFargateVPCB3360043
      Tags:
        - Key: Name
          Value: FargateStackStack/MyFargateVPC/PrivateSubnet2
    Metadata:
      aws:cdk:path: FargateStackStack/MyFargateVPC/PrivateSubnet2/RouteTable
  MyFargateVPCPrivateSubnet2RouteTableAssociationA0AEFE57:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyFargateVPCPrivateSubnet2RouteTableA3892194
      SubnetId:
        Ref: MyFargateVPCPrivateSubnet2Subnet4BF8ED9A
    Metadata:
      aws:cdk:path: FargateStackStack/MyFargateVPC/PrivateSubnet2/RouteTableAssociation
  MyFargateVPCPrivateSubnet2DefaultRouteC181EE01:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MyFargateVPCPrivateSubnet2RouteTableA3892194
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: MyFargateVPCPublicSubnet2NATGateway3687C5CB
    Metadata:
      aws:cdk:path: FargateStackStack/MyFargateVPC/PrivateSubnet2/DefaultRoute
  MyFargateVPCIGW0047A756:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: FargateStackStack/MyFargateVPC
    Metadata:
      aws:cdk:path: FargateStackStack/MyFargateVPC/IGW
  MyFargateVPCVPCGW438150AD:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: MyFargateVPCB3360043
      InternetGatewayId:
        Ref: MyFargateVPCIGW0047A756
    Metadata:
      aws:cdk:path: FargateStackStack/MyFargateVPC/VPCGW
  MyFargateClusterA330FC79:
    Type: AWS::ECS::Cluster
    Metadata:
      aws:cdk:path: FargateStackStack/MyFargateCluster/Resource
  MyFargateServiceLBDE830E97:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes: []
      Scheme: internet-facing
      SecurityGroups:
        - Fn::GetAtt:
            - MyFargateServiceLBSecurityGroup6FBF16F1
            - GroupId
      Subnets:
        - Ref: MyFargateVPCPublicSubnet1Subnet84454114
        - Ref: MyFargateVPCPublicSubnet2Subnet9907CE43
      Type: application
    DependsOn:
      - MyFargateVPCPublicSubnet1DefaultRouteC36542BE
      - MyFargateVPCPublicSubnet2DefaultRoute71941CB9
    Metadata:
      aws:cdk:path: FargateStackStack/MyFargateService/LB/Resource
  MyFargateServiceLBSecurityGroup6FBF16F1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatically created Security Group for ELB FargateStackStackMyFargateServiceLBFFB4BB15
      SecurityGroupEgress: []
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Ref: MyFargateVPCB3360043
    Metadata:
      aws:cdk:path: FargateStackStack/MyFargateService/LB/SecurityGroup/Resource
  MyFargateServiceLBSecurityGrouptoFargateStackStackMyFargateServiceSecurityGroup033BC0A380318EA938:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId:
        Fn::GetAtt:
          - MyFargateServiceLBSecurityGroup6FBF16F1
          - GroupId
      IpProtocol: tcp
      Description: Load balancer to target
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - MyFargateServiceSecurityGroup7016792A
          - GroupId
      FromPort: 80
      ToPort: 80
    Metadata:
      aws:cdk:path: FargateStackStack/MyFargateService/LB/SecurityGroup/to FargateStackStackMyFargateServiceSecurityGroup033BC0A3:80
  MyFargateServiceLBPublicListener61A1042F:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: MyFargateServiceLBPublicListenerECSGroup4A3EDF05
          Type: forward
      LoadBalancerArn:
        Ref: MyFargateServiceLBDE830E97
      Port: 80
      Protocol: HTTP
      Certificates: []
    Metadata:
      aws:cdk:path: FargateStackStack/MyFargateService/LB/PublicListener/Resource
  MyFargateServiceLBPublicListenerECSGroup4A3EDF05:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes: []
      Targets: []
      TargetType: ip
      VpcId:
        Ref: MyFargateVPCB3360043
    Metadata:
      aws:cdk:path: FargateStackStack/MyFargateService/LB/PublicListener/ECSGroup/Resource
  MyFargateServiceTaskDefTaskRole62C7D397:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - ecs-tasks.
                    - Ref: AWS::URLSuffix
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: FargateStackStack/MyFargateService/TaskDef/TaskRole/Resource
  MyFargateServiceTaskDef5DA17B39:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: nginxdemos/hello
          Links: []
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: MyFargateServiceTaskDefwebLogGroup4A6C44E8
              awslogs-stream-prefix: MyFargateService
              awslogs-region:
                Ref: AWS::Region
          MountPoints: []
          Name: web
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
          Ulimits: []
          VolumesFrom: []
      Cpu: "512"
      ExecutionRoleArn:
        Fn::GetAtt:
          - MyFargateServiceTaskDefExecutionRoleD6305504
          - Arn
      Family: FargateStackStackMyFargateServiceTaskDef7A57E667
      Memory: "2048"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::GetAtt:
          - MyFargateServiceTaskDefTaskRole62C7D397
          - Arn
      Volumes: []
    Metadata:
      aws:cdk:path: FargateStackStack/MyFargateService/TaskDef/Resource
  MyFargateServiceTaskDefwebLogGroup4A6C44E8:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: FargateStackStack/MyFargateService/TaskDef/web/LogGroup/Resource
  MyFargateServiceTaskDefExecutionRoleD6305504:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - ecs-tasks.
                    - Ref: AWS::URLSuffix
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: FargateStackStack/MyFargateService/TaskDef/ExecutionRole/Resource
  MyFargateServiceTaskDefExecutionRoleDefaultPolicyEC22B20F:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - MyFargateServiceTaskDefwebLogGroup4A6C44E8
                - Arn
        Version: "2012-10-17"
      PolicyName: MyFargateServiceTaskDefExecutionRoleDefaultPolicyEC22B20F
      Roles:
        - Ref: MyFargateServiceTaskDefExecutionRoleD6305504
    Metadata:
      aws:cdk:path: FargateStackStack/MyFargateService/TaskDef/ExecutionRole/DefaultPolicy/Resource
  MyFargateServiceF490C034:
    Type: AWS::ECS::Service
    Properties:
      TaskDefinition:
        Ref: MyFargateServiceTaskDef5DA17B39
      Cluster:
        Ref: MyFargateClusterA330FC79
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 6
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: web
          ContainerPort: 80
          TargetGroupArn:
            Ref: MyFargateServiceLBPublicListenerECSGroup4A3EDF05
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::GetAtt:
                - MyFargateServiceSecurityGroup7016792A
                - GroupId
          Subnets:
            - Ref: MyFargateVPCPrivateSubnet1Subnet6878B8DB
            - Ref: MyFargateVPCPrivateSubnet2Subnet4BF8ED9A
      ServiceRegistries: []
    DependsOn:
      - MyFargateServiceLBPublicListenerECSGroup4A3EDF05
      - MyFargateServiceLBPublicListener61A1042F
    Metadata:
      aws:cdk:path: FargateStackStack/MyFargateService/Service/Service
  MyFargateServiceSecurityGroup7016792A:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: FargateStackStack/MyFargateService/Service/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress: []
      VpcId:
        Ref: MyFargateVPCB3360043
    Metadata:
      aws:cdk:path: FargateStackStack/MyFargateService/Service/SecurityGroup/Resource
  MyFargateServiceSecurityGroupfromFargateStackStackMyFargateServiceLBSecurityGroup210BFC2B8001446F32:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort: 80
      GroupId:
        Fn::GetAtt:
          - MyFargateServiceSecurityGroup7016792A
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - MyFargateServiceLBSecurityGroup6FBF16F1
          - GroupId
      ToPort: 80
    Metadata:
      aws:cdk:path: FargateStackStack/MyFargateService/Service/SecurityGroup/from FargateStackStackMyFargateServiceLBSecurityGroup210BFC2B:80
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Modules: aws-cdk=2.113.0,@aws-cdk/assets=1.0.0,@aws-cdk/aws-applicationautoscaling=1.0.0,@aws-cdk/aws-autoscaling=1.0.0,@aws-cdk/aws-autoscaling-common=1.0.0,@aws-cdk/aws-autoscaling-hooktargets=1.0.0,@aws-cdk/aws-cloudformation=1.0.0,@aws-cdk/aws-cloudwatch=1.0.0,@aws-cdk/aws-ec2=1.0.0,@aws-cdk/aws-ecr=1.0.0,@aws-cdk/aws-ecr-assets=1.0.0,@aws-cdk/aws-ecs=1.0.0,@aws-cdk/aws-ecs-patterns=1.0.0,@aws-cdk/aws-elasticloadbalancingv2=1.0.0,@aws-cdk/aws-events=1.0.0,@aws-cdk/aws-events-targets=1.0.0,@aws-cdk/aws-iam=1.0.0,@aws-cdk/aws-kms=1.0.0,@aws-cdk/aws-lambda=1.0.0,@aws-cdk/aws-logs=1.0.0,@aws-cdk/aws-route53=1.0.0,@aws-cdk/aws-route53-targets=1.0.0,@aws-cdk/aws-s3=1.0.0,@aws-cdk/aws-s3-assets=1.0.0,@aws-cdk/aws-servicediscovery=1.0.0,@aws-cdk/aws-sns=1.0.0,@aws-cdk/aws-sns-subscriptions=1.0.0,@aws-cdk/aws-sqs=1.0.0,@aws-cdk/aws-ssm=1.0.0,@aws-cdk/core=1.0.0,@aws-cdk/custom-resources=1.0.0,@aws-cdk/cx-api=1.0.0,@aws-cdk/region-info=1.0.0,jsii-runtime=node.js/v18.12.1
    Condition: CDKMetadataAvailable
Outputs:
  MyFargateServiceLoadBalancerDNS704F6391:
    Value:
      Fn::GetAtt:
        - MyFargateServiceLBDE830E97
        - DNSName
  LoadBalancerDNS:
    Value:
      Fn::GetAtt:
        - MyFargateServiceLBDE830E97
        - DNSName
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - il-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - me-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2

