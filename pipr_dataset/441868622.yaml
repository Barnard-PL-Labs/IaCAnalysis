Resources:
  VPCB9E5F0B4:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: SsproxycdkStack/VPC
    Metadata:
      aws:cdk:path: SsproxycdkStack/VPC/Resource
  VPCingressSubnet1SubnetBB7FDF67:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      VpcId:
        Ref: VPCB9E5F0B4
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: ingress
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: SsproxycdkStack/VPC/ingressSubnet1
    Metadata:
      aws:cdk:path: SsproxycdkStack/VPC/ingressSubnet1/Subnet
  VPCingressSubnet1RouteTableEEF02A64:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      Tags:
        - Key: Name
          Value: SsproxycdkStack/VPC/ingressSubnet1
    Metadata:
      aws:cdk:path: SsproxycdkStack/VPC/ingressSubnet1/RouteTable
  VPCingressSubnet1RouteTableAssociation7700457B:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCingressSubnet1RouteTableEEF02A64
      SubnetId:
        Ref: VPCingressSubnet1SubnetBB7FDF67
    Metadata:
      aws:cdk:path: SsproxycdkStack/VPC/ingressSubnet1/RouteTableAssociation
  VPCingressSubnet1DefaultRouteC1C9D77C:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VPCingressSubnet1RouteTableEEF02A64
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VPCIGWB7E252D3
    DependsOn:
      - VPCVPCGW99B986DC
    Metadata:
      aws:cdk:path: SsproxycdkStack/VPC/ingressSubnet1/DefaultRoute
  VPCingressSubnet1EIP46E19D36:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: SsproxycdkStack/VPC/ingressSubnet1
    Metadata:
      aws:cdk:path: SsproxycdkStack/VPC/ingressSubnet1/EIP
  VPCingressSubnet1NATGateway06A5D97E:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId:
        Ref: VPCingressSubnet1SubnetBB7FDF67
      AllocationId:
        Fn::GetAtt:
          - VPCingressSubnet1EIP46E19D36
          - AllocationId
      Tags:
        - Key: Name
          Value: SsproxycdkStack/VPC/ingressSubnet1
    Metadata:
      aws:cdk:path: SsproxycdkStack/VPC/ingressSubnet1/NATGateway
  VPCingressSubnet2SubnetE30F0091:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      VpcId:
        Ref: VPCB9E5F0B4
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: ingress
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: SsproxycdkStack/VPC/ingressSubnet2
    Metadata:
      aws:cdk:path: SsproxycdkStack/VPC/ingressSubnet2/Subnet
  VPCingressSubnet2RouteTable8565F2D0:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      Tags:
        - Key: Name
          Value: SsproxycdkStack/VPC/ingressSubnet2
    Metadata:
      aws:cdk:path: SsproxycdkStack/VPC/ingressSubnet2/RouteTable
  VPCingressSubnet2RouteTableAssociation35C35494:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCingressSubnet2RouteTable8565F2D0
      SubnetId:
        Ref: VPCingressSubnet2SubnetE30F0091
    Metadata:
      aws:cdk:path: SsproxycdkStack/VPC/ingressSubnet2/RouteTableAssociation
  VPCingressSubnet2DefaultRoute8E2F45A7:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VPCingressSubnet2RouteTable8565F2D0
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VPCIGWB7E252D3
    DependsOn:
      - VPCVPCGW99B986DC
    Metadata:
      aws:cdk:path: SsproxycdkStack/VPC/ingressSubnet2/DefaultRoute
  VPCingressSubnet2EIP34D6A15B:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: SsproxycdkStack/VPC/ingressSubnet2
    Metadata:
      aws:cdk:path: SsproxycdkStack/VPC/ingressSubnet2/EIP
  VPCingressSubnet2NATGateway19A049B5:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId:
        Ref: VPCingressSubnet2SubnetE30F0091
      AllocationId:
        Fn::GetAtt:
          - VPCingressSubnet2EIP34D6A15B
          - AllocationId
      Tags:
        - Key: Name
          Value: SsproxycdkStack/VPC/ingressSubnet2
    Metadata:
      aws:cdk:path: SsproxycdkStack/VPC/ingressSubnet2/NATGateway
  VPCapplicationSubnet1SubnetFE5BD7C4:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.2.0/24
      VpcId:
        Ref: VPCB9E5F0B4
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: application
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: SsproxycdkStack/VPC/applicationSubnet1
    Metadata:
      aws:cdk:path: SsproxycdkStack/VPC/applicationSubnet1/Subnet
  VPCapplicationSubnet1RouteTable06DA588A:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      Tags:
        - Key: Name
          Value: SsproxycdkStack/VPC/applicationSubnet1
    Metadata:
      aws:cdk:path: SsproxycdkStack/VPC/applicationSubnet1/RouteTable
  VPCapplicationSubnet1RouteTableAssociationBD8DBEDA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCapplicationSubnet1RouteTable06DA588A
      SubnetId:
        Ref: VPCapplicationSubnet1SubnetFE5BD7C4
    Metadata:
      aws:cdk:path: SsproxycdkStack/VPC/applicationSubnet1/RouteTableAssociation
  VPCapplicationSubnet1DefaultRouteDDC3EE0F:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VPCapplicationSubnet1RouteTable06DA588A
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: VPCingressSubnet1NATGateway06A5D97E
    Metadata:
      aws:cdk:path: SsproxycdkStack/VPC/applicationSubnet1/DefaultRoute
  VPCapplicationSubnet2Subnet9AE2E808:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.3.0/24
      VpcId:
        Ref: VPCB9E5F0B4
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: application
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: SsproxycdkStack/VPC/applicationSubnet2
    Metadata:
      aws:cdk:path: SsproxycdkStack/VPC/applicationSubnet2/Subnet
  VPCapplicationSubnet2RouteTableBE360162:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      Tags:
        - Key: Name
          Value: SsproxycdkStack/VPC/applicationSubnet2
    Metadata:
      aws:cdk:path: SsproxycdkStack/VPC/applicationSubnet2/RouteTable
  VPCapplicationSubnet2RouteTableAssociationB08E8C3F:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCapplicationSubnet2RouteTableBE360162
      SubnetId:
        Ref: VPCapplicationSubnet2Subnet9AE2E808
    Metadata:
      aws:cdk:path: SsproxycdkStack/VPC/applicationSubnet2/RouteTableAssociation
  VPCapplicationSubnet2DefaultRouteBFF28947:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VPCapplicationSubnet2RouteTableBE360162
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: VPCingressSubnet2NATGateway19A049B5
    Metadata:
      aws:cdk:path: SsproxycdkStack/VPC/applicationSubnet2/DefaultRoute
  VPCIGWB7E252D3:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: SsproxycdkStack/VPC
    Metadata:
      aws:cdk:path: SsproxycdkStack/VPC/IGW
  VPCVPCGW99B986DC:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      InternetGatewayId:
        Ref: VPCIGWB7E252D3
    Metadata:
      aws:cdk:path: SsproxycdkStack/VPC/VPCGW
  SecurityGroupDD263621:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH (TCP port 22) in
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow SSH Access
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: 10.0.0.0/16
          Description: Allow LB access
          FromPort: 3000
          IpProtocol: tcp
          ToPort: 3000
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: SsproxycdkStack/SecurityGroup/Resource
  SecurityGroupfromSsproxycdkStackalbSecurityGroupE0D769153000C15E3500:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort: 3000
      GroupId:
        Fn::GetAtt:
          - SecurityGroupDD263621
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - albSecurityGroup49866104
          - GroupId
      ToPort: 3000
    Metadata:
      aws:cdk:path: SsproxycdkStack/SecurityGroup/from SsproxycdkStackalbSecurityGroupE0D76915:3000
  ec2Role38AB65C0:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - ec2.
                    - Ref: AWS::URLSuffix
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AmazonSSMManagedInstanceCore
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AmazonSSMReadOnlyAccess
    Metadata:
      aws:cdk:path: SsproxycdkStack/ec2Role/Resource
  ec2RoleDefaultPolicyC400AE24:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: sagemaker:CreatePresignedDomainUrl
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: ec2RoleDefaultPolicyC400AE24
      Roles:
        - Ref: ec2Role38AB65C0
    Metadata:
      aws:cdk:path: SsproxycdkStack/ec2Role/DefaultPolicy/Resource
  ASGInstanceProfile0A2834D7:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: ec2Role38AB65C0
    Metadata:
      aws:cdk:path: SsproxycdkStack/ASG/InstanceProfile
  ASGLaunchConfigC00AF12B:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        Ref: SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmarm64gp2C96584B6F00A464EAD1953AFF4B05118Parameter
      InstanceType: t4g.micro
      IamInstanceProfile:
        Ref: ASGInstanceProfile0A2834D7
      KeyName: demo-kp
      SecurityGroups:
        - Fn::GetAtt:
            - SecurityGroupDD263621
            - GroupId
      UserData:
        Fn::Base64: |
          #!/bin/bash
          yum update -y
          yum install git -y
          cat > /tmp/subscript.sh << EOF
          # START
          echo "Setting up NodeJS Environment"
          curl https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
           
          echo 'export NVM_DIR="/home/ec2-user/.nvm"' >> /home/ec2-usr/.bashrc
          echo '[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm' >> /home/ec2-user/.bashrc
           
          # Dot source the files to ensure that variables are available within the current shell
          . /home/ec2-user/.nvm/nvm.sh
          . /home/ec2-user/.bashrc
           
          # Install NVM, NPM, Node.JS 
          nvm alias default v16.13.2
          nvm install v16.13.2
          nvm use v16.13.2

          mkdir -p /home/ec2-user/sagemaker-studio-proxy
          git clone https://github.com/rvvittal/sagemaker-studio-proxy.git /home/ec2-user/sagemaker-studio-proxy
          cd /home/ec2-user/sagemaker-studio-proxy/app
          npm install
          npm install forever -g
          EC2_AVAIL_ZONE=`curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone`
          EC2_REGION="`echo \"$EC2_AVAIL_ZONE\" | sed 's/[a-z]$//'`"
          forever start app.js region=$EC2_REGION

          EOF
           
          chown ec2-user:ec2-user /tmp/subscript.sh && chmod a+x /tmp/subscript.sh
          sleep 1; su - ec2-user -c "/tmp/subscript.sh"
    DependsOn:
      - ec2RoleDefaultPolicyC400AE24
      - ec2Role38AB65C0
    Metadata:
      aws:cdk:path: SsproxycdkStack/ASG/LaunchConfig
  ASG46ED3070:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MaxSize: "3"
      MinSize: "2"
      LaunchConfigurationName:
        Ref: ASGLaunchConfigC00AF12B
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: SsproxycdkStack/ASG
      TargetGroupARNs:
        - Ref: albListenerdefaulttargetGroup79BAE92B
      VPCZoneIdentifier:
        - Ref: VPCapplicationSubnet1SubnetFE5BD7C4
        - Ref: VPCapplicationSubnet2Subnet9AE2E808
    UpdatePolicy:
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: true
    Metadata:
      aws:cdk:path: SsproxycdkStack/ASG/ASG
  ASGScalingPolicyrequestsperminute75AD9D6B:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName:
        Ref: ASG46ED3070
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ALBRequestCountPerTarget
          ResourceLabel:
            Fn::Join:
              - ""
              - - Fn::Select:
                    - 1
                    - Fn::Split:
                        - /
                        - Ref: albListener3EA0B2EF
                - /
                - Fn::Select:
                    - 2
                    - Fn::Split:
                        - /
                        - Ref: albListener3EA0B2EF
                - /
                - Fn::Select:
                    - 3
                    - Fn::Split:
                        - /
                        - Ref: albListener3EA0B2EF
                - /
                - Fn::GetAtt:
                    - albListenerdefaulttargetGroup79BAE92B
                    - TargetGroupFullName
        TargetValue: 60
    DependsOn:
      - albListenerdefaulttargetGroup79BAE92B
      - albListener3EA0B2EF
    Metadata:
      aws:cdk:path: SsproxycdkStack/ASG/ScalingPolicyrequests-per-minute/Resource
  ASGScalingPolicycpuutilscaling5FF32B9D:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName:
        Ref: ASG46ED3070
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 75
    Metadata:
      aws:cdk:path: SsproxycdkStack/ASG/ScalingPolicycpu-util-scaling/Resource
  alb8A8B13C2:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: "false"
      Scheme: internet-facing
      SecurityGroups:
        - Fn::GetAtt:
            - albSecurityGroup49866104
            - GroupId
      Subnets:
        - Ref: VPCingressSubnet1SubnetBB7FDF67
        - Ref: VPCingressSubnet2SubnetE30F0091
      Type: application
    DependsOn:
      - VPCingressSubnet1DefaultRouteC1C9D77C
      - VPCingressSubnet2DefaultRoute8E2F45A7
    Metadata:
      aws:cdk:path: SsproxycdkStack/alb/Resource
  albSecurityGroup49866104:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatically created Security Group for ELB SsproxycdkStackalbA618C327
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: SsproxycdkStack/alb/SecurityGroup/Resource
  albSecurityGrouptoSsproxycdkStackSecurityGroup3FFA7AB2300071FCE662:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId:
        Fn::GetAtt:
          - albSecurityGroup49866104
          - GroupId
      IpProtocol: tcp
      Description: Load balancer to target
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - SecurityGroupDD263621
          - GroupId
      FromPort: 3000
      ToPort: 3000
    Metadata:
      aws:cdk:path: SsproxycdkStack/alb/SecurityGroup/to SsproxycdkStackSecurityGroup3FFA7AB2:3000
  albListener3EA0B2EF:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: albListenerdefaulttargetGroup79BAE92B
          Type: forward
      LoadBalancerArn:
        Ref: alb8A8B13C2
      Port: 80
      Protocol: HTTP
    Metadata:
      aws:cdk:path: SsproxycdkStack/alb/Listener/Resource
  albListenerdefaulttargetGroup79BAE92B:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: "3000"
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: "301"
      Port: 3000
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: "false"
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: SsproxycdkStack/alb/Listener/default-targetGroup/Resource
  SMAPIVPCEndpointSecurityGroupF82ABA7B:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SsproxycdkStack/SM API VPC Endpoint/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp:
            Fn::GetAtt:
              - VPCB9E5F0B4
              - CidrBlock
          Description:
            Fn::Join:
              - ""
              - - "from "
                - Fn::GetAtt:
                    - VPCB9E5F0B4
                    - CidrBlock
                - :443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: SsproxycdkStack/SM API VPC Endpoint/SecurityGroup/Resource
  SMAPIVPCEndpoint9E71427A:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: com.amazonaws.us-west-2.sagemaker.api
      VpcId:
        Ref: VPCB9E5F0B4
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - Fn::GetAtt:
            - SMAPIVPCEndpointSecurityGroupF82ABA7B
            - GroupId
      SubnetIds:
        - Ref: VPCapplicationSubnet1SubnetFE5BD7C4
        - Ref: VPCapplicationSubnet2Subnet9AE2E808
      VpcEndpointType: Interface
    Metadata:
      aws:cdk:path: SsproxycdkStack/SM API VPC Endpoint/Resource
  StudioVPCEndpointSecurityGroupC0617BA9:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SsproxycdkStack/Studio VPC Endpoint/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp:
            Fn::GetAtt:
              - VPCB9E5F0B4
              - CidrBlock
          Description:
            Fn::Join:
              - ""
              - - "from "
                - Fn::GetAtt:
                    - VPCB9E5F0B4
                    - CidrBlock
                - :443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: SsproxycdkStack/Studio VPC Endpoint/SecurityGroup/Resource
  StudioVPCEndpointF253AEAF:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: aws.sagemaker.us-west-2.studio
      VpcId:
        Ref: VPCB9E5F0B4
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - Fn::GetAtt:
            - StudioVPCEndpointSecurityGroupC0617BA9
            - GroupId
      SubnetIds:
        - Ref: VPCapplicationSubnet1SubnetFE5BD7C4
        - Ref: VPCapplicationSubnet2Subnet9AE2E808
      VpcEndpointType: Interface
    Metadata:
      aws:cdk:path: SsproxycdkStack/Studio VPC Endpoint/Resource
  RoleForSagemakerStudioUsersB19B3B05:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: sagemaker.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
      RoleName: RoleSagemakerStudioUsers
    Metadata:
      aws:cdk:path: SsproxycdkStack/RoleForSagemakerStudioUsers/Resource
  SagemakerDomainTemplateSagemakerDomainCDK9766D689:
    Type: AWS::SageMaker::Domain
    Properties:
      AuthMode: IAM
      DefaultUserSettings:
        ExecutionRole:
          Fn::GetAtt:
            - RoleForSagemakerStudioUsersB19B3B05
            - Arn
      DomainName: mySagemakerStudioDomain
      SubnetIds:
        - Ref: VPCapplicationSubnet1SubnetFE5BD7C4
        - Ref: VPCapplicationSubnet2Subnet9AE2E808
      VpcId:
        Ref: VPCB9E5F0B4
      AppNetworkAccessType: VpcOnly
  SagemakerUserTemplateSagemakerUser8B546634:
    Type: AWS::SageMaker::UserProfile
    Properties:
      DomainId:
        Ref: SagemakerDomainTemplateSagemakerDomainCDK9766D689
      UserProfileName: sm-studio-user
  studiouserparam78A3EFEC:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value: sm-studio-user
      AllowedPattern: .*
      Description: sagemaker studio user
      Name: /sagemaker-studio-proxy/dev/studio-user-profile-name
      Tier: Standard
    Metadata:
      aws:cdk:path: SsproxycdkStack/studio-user-param/Resource
  studiodomainparam05390358:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value:
        Ref: SagemakerDomainTemplateSagemakerDomainCDK9766D689
      AllowedPattern: .*
      Description: sagemaker studio domain
      Name: /sagemaker-studio-proxy/dev/studio-domain-name
      Tier: Standard
    Metadata:
      aws:cdk:path: SsproxycdkStack/studio-domain-param/Resource
  studiopresignedurltimeoutFB6B1C5B:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value: "60"
      AllowedPattern: .*
      Description: sagemaker studio presigned url timeout
      Name: /sagemaker-studio-proxy/dev/studio-presigned-url-timeout
      Tier: Standard
    Metadata:
      aws:cdk:path: SsproxycdkStack/studio-presigned-url-timeout/Resource
  studiosessiontimeout0110CF2E:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value: "3600"
      AllowedPattern: .*
      Description: sagemaker studio sesion timeout
      Name: /sagemaker-studio-proxy/dev/studio-session-timeout
      Tier: Standard
    Metadata:
      aws:cdk:path: SsproxycdkStack/studio-session-timeout/Resource
  studiodomainregionEB77FEEC:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value: us-east-1
      AllowedPattern: .*
      Description: sagemaker studio domain region
      Name: /sagemaker-studio-proxy/dev/studio-domain-region
      Tier: Standard
    Metadata:
      aws:cdk:path: SsproxycdkStack/studio-domain-region/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/31SwW7bMAz9lt4Vbclp1ywLigDFZiRZrwUt0y4bWzIkKkVh+N9Hy4ntosBOenx8Eh9JbfRaf3+A97AyxWVVU667E4O5KKFeOjQb3T23Ru1K+5ztVBbzmswp5hZ54GZ0dJHxDHmNMz9z2xCcIWBydhIPYH/IhuM38CMwvsOHyjxdBc4PHyyjF3wXjE5u0ZbF62uDltUJTfTEH4/exTZ5+C9xsJXHEL7w+5FOVUswKM3vbdE6snwrfQ97RdDo7ujGltOZORlP8jijgw0M1mDmXUk19goiu2CgJlvpbivBaQwmo08QrXndOVtSFf00tS/SM/gK+exlXcLdUnPhT0SvsIbAZGoHRQ61OJLcVda7bVsRpCpPkvuZcuiTkWW81FFgtDfNHS/yo7Gpn0XYqwAVNnBBrztJ/XINUOrub0A/jSiEZviHfrAPHhrksdgU9L06YnDRG/zEK+kvFqXzTTLyQtbUsUCd9pDgIP8TuY3jt108IgMvaLjVK+vkzlv4dl3/0OuNXj+8BaKVj5apQX0cz39q1hC/OwMAAA==
    Metadata:
      aws:cdk:path: SsproxycdkStack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Parameters:
  SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmarm64gp2C96584B6F00A464EAD1953AFF4B05118Parameter:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-arm64-gp2
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
Outputs:
  albDNS:
    Value:
      Fn::GetAtt:
        - alb8A8B13C2
        - DNSName
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2
Rules:
  CheckBootstrapVersion:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::Contains:
                - - "1"
                  - "2"
                  - "3"
                  - "4"
                  - "5"
                - Ref: BootstrapVersion
        AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.

