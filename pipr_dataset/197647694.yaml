Resources:
  LogGroupF5B46931:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: demo
      RetentionInDays: 1
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: demo/LogGroup/Resource
  VPCB9E5F0B4:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: demo/VPC
    Metadata:
      aws:cdk:path: demo/VPC/Resource
  VPCingressSubnet1SubnetBB7FDF67:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      VpcId:
        Ref: VPCB9E5F0B4
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: demo/VPC/ingressSubnet1
        - Key: aws-cdk:subnet-name
          Value: ingress
        - Key: aws-cdk:subnet-type
          Value: Public
    Metadata:
      aws:cdk:path: demo/VPC/ingressSubnet1/Subnet
  VPCingressSubnet1RouteTableEEF02A64:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      Tags:
        - Key: Name
          Value: demo/VPC/ingressSubnet1
    Metadata:
      aws:cdk:path: demo/VPC/ingressSubnet1/RouteTable
  VPCingressSubnet1RouteTableAssociation7700457B:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCingressSubnet1RouteTableEEF02A64
      SubnetId:
        Ref: VPCingressSubnet1SubnetBB7FDF67
    Metadata:
      aws:cdk:path: demo/VPC/ingressSubnet1/RouteTableAssociation
  VPCingressSubnet1DefaultRouteC1C9D77C:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VPCingressSubnet1RouteTableEEF02A64
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VPCIGWB7E252D3
    DependsOn:
      - VPCVPCGW99B986DC
    Metadata:
      aws:cdk:path: demo/VPC/ingressSubnet1/DefaultRoute
  VPCingressSubnet1EIP46E19D36:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    Metadata:
      aws:cdk:path: demo/VPC/ingressSubnet1/EIP
  VPCingressSubnet1NATGateway06A5D97E:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - VPCingressSubnet1EIP46E19D36
          - AllocationId
      SubnetId:
        Ref: VPCingressSubnet1SubnetBB7FDF67
      Tags:
        - Key: Name
          Value: demo/VPC/ingressSubnet1
    Metadata:
      aws:cdk:path: demo/VPC/ingressSubnet1/NATGateway
  VPCingressSubnet2SubnetE30F0091:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      VpcId:
        Ref: VPCB9E5F0B4
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: demo/VPC/ingressSubnet2
        - Key: aws-cdk:subnet-name
          Value: ingress
        - Key: aws-cdk:subnet-type
          Value: Public
    Metadata:
      aws:cdk:path: demo/VPC/ingressSubnet2/Subnet
  VPCingressSubnet2RouteTable8565F2D0:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      Tags:
        - Key: Name
          Value: demo/VPC/ingressSubnet2
    Metadata:
      aws:cdk:path: demo/VPC/ingressSubnet2/RouteTable
  VPCingressSubnet2RouteTableAssociation35C35494:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCingressSubnet2RouteTable8565F2D0
      SubnetId:
        Ref: VPCingressSubnet2SubnetE30F0091
    Metadata:
      aws:cdk:path: demo/VPC/ingressSubnet2/RouteTableAssociation
  VPCingressSubnet2DefaultRoute8E2F45A7:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VPCingressSubnet2RouteTable8565F2D0
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VPCIGWB7E252D3
    DependsOn:
      - VPCVPCGW99B986DC
    Metadata:
      aws:cdk:path: demo/VPC/ingressSubnet2/DefaultRoute
  VPCingressSubnet2EIP34D6A15B:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    Metadata:
      aws:cdk:path: demo/VPC/ingressSubnet2/EIP
  VPCingressSubnet2NATGateway19A049B5:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - VPCingressSubnet2EIP34D6A15B
          - AllocationId
      SubnetId:
        Ref: VPCingressSubnet2SubnetE30F0091
      Tags:
        - Key: Name
          Value: demo/VPC/ingressSubnet2
    Metadata:
      aws:cdk:path: demo/VPC/ingressSubnet2/NATGateway
  VPCapplicationSubnet1SubnetFE5BD7C4:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.2.0/24
      VpcId:
        Ref: VPCB9E5F0B4
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: demo/VPC/applicationSubnet1
        - Key: aws-cdk:subnet-name
          Value: application
        - Key: aws-cdk:subnet-type
          Value: Private
    Metadata:
      aws:cdk:path: demo/VPC/applicationSubnet1/Subnet
  VPCapplicationSubnet1RouteTable06DA588A:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      Tags:
        - Key: Name
          Value: demo/VPC/applicationSubnet1
    Metadata:
      aws:cdk:path: demo/VPC/applicationSubnet1/RouteTable
  VPCapplicationSubnet1RouteTableAssociationBD8DBEDA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCapplicationSubnet1RouteTable06DA588A
      SubnetId:
        Ref: VPCapplicationSubnet1SubnetFE5BD7C4
    Metadata:
      aws:cdk:path: demo/VPC/applicationSubnet1/RouteTableAssociation
  VPCapplicationSubnet1DefaultRouteDDC3EE0F:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VPCapplicationSubnet1RouteTable06DA588A
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: VPCingressSubnet1NATGateway06A5D97E
    Metadata:
      aws:cdk:path: demo/VPC/applicationSubnet1/DefaultRoute
  VPCapplicationSubnet2Subnet9AE2E808:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.3.0/24
      VpcId:
        Ref: VPCB9E5F0B4
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: demo/VPC/applicationSubnet2
        - Key: aws-cdk:subnet-name
          Value: application
        - Key: aws-cdk:subnet-type
          Value: Private
    Metadata:
      aws:cdk:path: demo/VPC/applicationSubnet2/Subnet
  VPCapplicationSubnet2RouteTableBE360162:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      Tags:
        - Key: Name
          Value: demo/VPC/applicationSubnet2
    Metadata:
      aws:cdk:path: demo/VPC/applicationSubnet2/RouteTable
  VPCapplicationSubnet2RouteTableAssociationB08E8C3F:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCapplicationSubnet2RouteTableBE360162
      SubnetId:
        Ref: VPCapplicationSubnet2Subnet9AE2E808
    Metadata:
      aws:cdk:path: demo/VPC/applicationSubnet2/RouteTableAssociation
  VPCapplicationSubnet2DefaultRouteBFF28947:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VPCapplicationSubnet2RouteTableBE360162
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: VPCingressSubnet2NATGateway19A049B5
    Metadata:
      aws:cdk:path: demo/VPC/applicationSubnet2/DefaultRoute
  VPCIGWB7E252D3:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: demo/VPC
    Metadata:
      aws:cdk:path: demo/VPC/IGW
  VPCVPCGW99B986DC:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      InternetGatewayId:
        Ref: VPCIGWB7E252D3
    Metadata:
      aws:cdk:path: demo/VPC/VPCGW
  ExternalSG831D20C5:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: demo/ExternalSG
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: from 0.0.0.0/0:80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: demo/ExternalSG/Resource
  InternalSG67506B9C:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: demo/InternalSG
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: demo/InternalSG/Resource
  InternalSGfromdemoInternalSGF1FFB6A78080CD306844:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: from demoInternalSGF1FFB6A7:8080
      FromPort: 8080
      GroupId:
        Fn::GetAtt:
          - InternalSG67506B9C
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - InternalSG67506B9C
          - GroupId
      ToPort: 8080
    Metadata:
      aws:cdk:path: demo/InternalSG/from demoInternalSGF1FFB6A7:8080
  InternalSGfromdemoInternalSGF1FFB6A799018ECD7E30:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: from demoInternalSGF1FFB6A7:9901
      FromPort: 9901
      GroupId:
        Fn::GetAtt:
          - InternalSG67506B9C
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - InternalSG67506B9C
          - GroupId
      ToPort: 9901
    Metadata:
      aws:cdk:path: demo/InternalSG/from demoInternalSGF1FFB6A7:9901
  InternalSGfromdemoInternalSGF1FFB6A715000877B73FB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: from demoInternalSGF1FFB6A7:15000
      FromPort: 15000
      GroupId:
        Fn::GetAtt:
          - InternalSG67506B9C
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - InternalSG67506B9C
          - GroupId
      ToPort: 15000
    Metadata:
      aws:cdk:path: demo/InternalSG/from demoInternalSGF1FFB6A7:15000
  InternalSGfromdemoExternalSG6CF586A980808856237F:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort: 8080
      GroupId:
        Fn::GetAtt:
          - InternalSG67506B9C
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - ExternalSG831D20C5
          - GroupId
      ToPort: 8080
    Metadata:
      aws:cdk:path: demo/InternalSG/from demoExternalSG6CF586A9:8080
  ClusterEB0386A7:
    Type: AWS::ECS::Cluster
    Metadata:
      aws:cdk:path: demo/Cluster/Resource
  ClusterDefaultServiceDiscoveryNamespaceC336F9B4:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: mesh.local
      Vpc:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: demo/Cluster/DefaultServiceDiscoveryNamespace/Resource
  TaskRole30FC0FBB:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/CloudWatchLogsFullAccess
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AWSXRayDaemonWriteAccess
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AWSAppMeshEnvoyAccess
    Metadata:
      aws:cdk:path: demo/TaskRole/Resource
  TaskExecutionRole250D2532:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
    Metadata:
      aws:cdk:path: demo/TaskExecutionRole/Resource
  TaskExecutionRoleDefaultPolicyA84DD1B0:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - LogGroupF5B46931
                - Arn
        Version: "2012-10-17"
      PolicyName: TaskExecutionRoleDefaultPolicyA84DD1B0
      Roles:
        - Ref: TaskExecutionRole250D2532
    Metadata:
      aws:cdk:path: demo/TaskExecutionRole/DefaultPolicy/Resource
  GatewayTaskDef527EC7C6:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Environment:
            - Name: SERVER_PORT
              Value: "8080"
            - Name: COLOR_TELLER_ENDPOINT
              Value: colorteller.mesh.local:8080
          Essential: true
          Image: subfuzion/colorgateway:v4
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroupF5B46931
              awslogs-stream-prefix: gateway
              awslogs-region:
                Ref: AWS::Region
          Name: app
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
        - Cpu: 32
          Essential: true
          Image: amazon/aws-xray-daemon
          MemoryReservation: 256
          Name: xray
          PortMappings:
            - ContainerPort: 2000
              Protocol: udp
          User: "1337"
      Cpu: "512"
      ExecutionRoleArn:
        Fn::GetAtt:
          - TaskExecutionRole250D2532
          - Arn
      Family: gateway
      Memory: "1024"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::GetAtt:
          - TaskRole30FC0FBB
          - Arn
    Metadata:
      aws:cdk:path: demo/GatewayTaskDef/Resource
  GatewayService20F4B805:
    Type: AWS::ECS::Service
    Properties:
      TaskDefinition:
        Ref: GatewayTaskDef527EC7C6
      Cluster:
        Ref: ClusterEB0386A7
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 1
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: app
          ContainerPort: 8080
          TargetGroupArn:
            Ref: PublicALBwebTargetGroupC4AD449F
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::GetAtt:
                - InternalSG67506B9C
                - GroupId
          Subnets:
            - Ref: VPCapplicationSubnet1SubnetFE5BD7C4
            - Ref: VPCapplicationSubnet2Subnet9AE2E808
      ServiceName: gateway
      ServiceRegistries:
        - RegistryArn:
            Fn::GetAtt:
              - GatewayServiceCloudmapService5ECA2975
              - Arn
    DependsOn:
      - PublicALBwebA7F1BA61
      - PublicALBwebTargetGroupC4AD449F
    Metadata:
      aws:cdk:path: demo/GatewayService/Service
  GatewayServiceCloudmapService5ECA2975:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        NamespaceId:
          Fn::GetAtt:
            - ClusterDefaultServiceDiscoveryNamespaceC336F9B4
            - Id
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: gateway
      NamespaceId:
        Fn::GetAtt:
          - ClusterDefaultServiceDiscoveryNamespaceC336F9B4
          - Id
    Metadata:
      aws:cdk:path: demo/GatewayService/CloudmapService/Resource
  PublicALB3DD254D4:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - Fn::GetAtt:
            - ExternalSG831D20C5
            - GroupId
      Subnets:
        - Ref: VPCingressSubnet1SubnetBB7FDF67
        - Ref: VPCingressSubnet2SubnetE30F0091
      Type: application
    DependsOn:
      - VPCingressSubnet1DefaultRouteC1C9D77C
      - VPCingressSubnet2DefaultRoute8E2F45A7
    Metadata:
      aws:cdk:path: demo/PublicALB/Resource
  PublicALBwebA7F1BA61:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: PublicALBwebTargetGroupC4AD449F
          Type: forward
      LoadBalancerArn:
        Ref: PublicALB3DD254D4
      Port: 80
      Protocol: HTTP
    Metadata:
      aws:cdk:path: demo/PublicALB/web/Resource
  PublicALBwebTargetGroupC4AD449F:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /ping
      HealthCheckPort: traffic-port
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-499
      Port: 80
      Protocol: HTTP
      TargetType: ip
      UnhealthyThresholdCount: 2
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: demo/PublicALB/web/TargetGroup/Resource
  bluetaskdefFAD1974A:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Environment:
            - Name: SERVER_PORT
              Value: "8080"
            - Name: COLOR
              Value: blue
          Essential: true
          Image: subfuzion/colorteller:v4
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroupF5B46931
              awslogs-stream-prefix: colorteller-blue
              awslogs-region:
                Ref: AWS::Region
          Name: app
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
        - Cpu: 32
          Essential: true
          Image: amazon/aws-xray-daemon
          MemoryReservation: 256
          Name: xray
          PortMappings:
            - ContainerPort: 2000
              Protocol: udp
          User: "1337"
      Cpu: "512"
      ExecutionRoleArn:
        Fn::GetAtt:
          - TaskExecutionRole250D2532
          - Arn
      Family: blue
      Memory: "1024"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::GetAtt:
          - TaskRole30FC0FBB
          - Arn
    Metadata:
      aws:cdk:path: demo/blue_taskdef/Resource
  ColorTellerServiceblueService4363EBB9:
    Type: AWS::ECS::Service
    Properties:
      TaskDefinition:
        Ref: bluetaskdefFAD1974A
      Cluster:
        Ref: ClusterEB0386A7
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 1
      EnableECSManagedTags: false
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::GetAtt:
                - InternalSG67506B9C
                - GroupId
          Subnets:
            - Ref: VPCapplicationSubnet1SubnetFE5BD7C4
            - Ref: VPCapplicationSubnet2Subnet9AE2E808
      ServiceName: colorteller
      ServiceRegistries:
        - RegistryArn:
            Fn::GetAtt:
              - ColorTellerServiceblueCloudmapService3511E8B6
              - Arn
    Metadata:
      aws:cdk:path: demo/ColorTellerService-blue/Service
  ColorTellerServiceblueCloudmapService3511E8B6:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        NamespaceId:
          Fn::GetAtt:
            - ClusterDefaultServiceDiscoveryNamespaceC336F9B4
            - Id
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: colorteller
      NamespaceId:
        Fn::GetAtt:
          - ClusterDefaultServiceDiscoveryNamespaceC336F9B4
          - Id
    Metadata:
      aws:cdk:path: demo/ColorTellerService-blue/CloudmapService/Resource
  greentaskdefAF6852B3:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Environment:
            - Name: SERVER_PORT
              Value: "8080"
            - Name: COLOR
              Value: green
          Essential: true
          Image: subfuzion/colorteller:v4
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroupF5B46931
              awslogs-stream-prefix: colorteller-green
              awslogs-region:
                Ref: AWS::Region
          Name: app
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
        - Cpu: 32
          Essential: true
          Image: amazon/aws-xray-daemon
          MemoryReservation: 256
          Name: xray
          PortMappings:
            - ContainerPort: 2000
              Protocol: udp
          User: "1337"
      Cpu: "512"
      ExecutionRoleArn:
        Fn::GetAtt:
          - TaskExecutionRole250D2532
          - Arn
      Family: green
      Memory: "1024"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::GetAtt:
          - TaskRole30FC0FBB
          - Arn
    Metadata:
      aws:cdk:path: demo/green_taskdef/Resource
  ColorTellerServicegreenServiceB0D20FBC:
    Type: AWS::ECS::Service
    Properties:
      TaskDefinition:
        Ref: greentaskdefAF6852B3
      Cluster:
        Ref: ClusterEB0386A7
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 1
      EnableECSManagedTags: false
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::GetAtt:
                - InternalSG67506B9C
                - GroupId
          Subnets:
            - Ref: VPCapplicationSubnet1SubnetFE5BD7C4
            - Ref: VPCapplicationSubnet2Subnet9AE2E808
      ServiceName: colorteller-green
      ServiceRegistries:
        - RegistryArn:
            Fn::GetAtt:
              - ColorTellerServicegreenCloudmapService09B75323
              - Arn
    Metadata:
      aws:cdk:path: demo/ColorTellerService-green/Service
  ColorTellerServicegreenCloudmapService09B75323:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        NamespaceId:
          Fn::GetAtt:
            - ClusterDefaultServiceDiscoveryNamespaceC336F9B4
            - Id
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: colorteller-green
      NamespaceId:
        Fn::GetAtt:
          - ClusterDefaultServiceDiscoveryNamespaceC336F9B4
          - Id
    Metadata:
      aws:cdk:path: demo/ColorTellerService-green/CloudmapService/Resource
  redtaskdefC155BAF0:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Environment:
            - Name: SERVER_PORT
              Value: "8080"
            - Name: COLOR
              Value: red
          Essential: true
          Image: subfuzion/colorteller:v4
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroupF5B46931
              awslogs-stream-prefix: colorteller-red
              awslogs-region:
                Ref: AWS::Region
          Name: app
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
        - Cpu: 32
          Essential: true
          Image: amazon/aws-xray-daemon
          MemoryReservation: 256
          Name: xray
          PortMappings:
            - ContainerPort: 2000
              Protocol: udp
          User: "1337"
      Cpu: "512"
      ExecutionRoleArn:
        Fn::GetAtt:
          - TaskExecutionRole250D2532
          - Arn
      Family: red
      Memory: "1024"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::GetAtt:
          - TaskRole30FC0FBB
          - Arn
    Metadata:
      aws:cdk:path: demo/red_taskdef/Resource
  ColorTellerServiceredService48BD1F7A:
    Type: AWS::ECS::Service
    Properties:
      TaskDefinition:
        Ref: redtaskdefC155BAF0
      Cluster:
        Ref: ClusterEB0386A7
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 1
      EnableECSManagedTags: false
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::GetAtt:
                - InternalSG67506B9C
                - GroupId
          Subnets:
            - Ref: VPCapplicationSubnet1SubnetFE5BD7C4
            - Ref: VPCapplicationSubnet2Subnet9AE2E808
      ServiceName: colorteller-red
      ServiceRegistries:
        - RegistryArn:
            Fn::GetAtt:
              - ColorTellerServiceredCloudmapService8DCA6206
              - Arn
    Metadata:
      aws:cdk:path: demo/ColorTellerService-red/Service
  ColorTellerServiceredCloudmapService8DCA6206:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        NamespaceId:
          Fn::GetAtt:
            - ClusterDefaultServiceDiscoveryNamespaceC336F9B4
            - Id
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: colorteller-red
      NamespaceId:
        Fn::GetAtt:
          - ClusterDefaultServiceDiscoveryNamespaceC336F9B4
          - Id
    Metadata:
      aws:cdk:path: demo/ColorTellerService-red/CloudmapService/Resource
  Mesh:
    Type: AWS::AppMesh::Mesh
    Properties:
      MeshName: demo
    Metadata:
      aws:cdk:path: demo/Mesh
  gatewayvn:
    Type: AWS::AppMesh::VirtualNode
    Properties:
      MeshName: demo
      Spec:
        Backends:
          - VirtualService:
              VirtualServiceName: colorteller.mesh.local
        Listeners:
          - HealthCheck:
              HealthyThreshold: 2
              IntervalMillis: 10000
              Path: /ping
              Port: 8080
              Protocol: http
              TimeoutMillis: 5000
              UnhealthyThreshold: 2
            PortMapping:
              Port: 8080
              Protocol: http
        ServiceDiscovery:
          AWSCloudMap:
            Attributes:
              - Key: ECS_TASK_DEFINITION_FAMILY
                Value: gateway
            NamespaceName: mesh.local
            ServiceName: gateway
      VirtualNodeName: gateway-vn
    DependsOn:
      - Mesh
    Metadata:
      aws:cdk:path: demo/gateway-vn
  bluevn:
    Type: AWS::AppMesh::VirtualNode
    Properties:
      MeshName: demo
      Spec:
        Listeners:
          - HealthCheck:
              HealthyThreshold: 2
              IntervalMillis: 10000
              Path: /ping
              Port: 8080
              Protocol: http
              TimeoutMillis: 5000
              UnhealthyThreshold: 2
            PortMapping:
              Port: 8080
              Protocol: http
        ServiceDiscovery:
          AWSCloudMap:
            Attributes:
              - Key: ECS_TASK_DEFINITION_FAMILY
                Value: blue
            NamespaceName: mesh.local
            ServiceName: colorteller
      VirtualNodeName: blue-vn
    DependsOn:
      - Mesh
    Metadata:
      aws:cdk:path: demo/blue-vn
  greenvn:
    Type: AWS::AppMesh::VirtualNode
    Properties:
      MeshName: demo
      Spec:
        Listeners:
          - HealthCheck:
              HealthyThreshold: 2
              IntervalMillis: 10000
              Path: /ping
              Port: 8080
              Protocol: http
              TimeoutMillis: 5000
              UnhealthyThreshold: 2
            PortMapping:
              Port: 8080
              Protocol: http
        ServiceDiscovery:
          AWSCloudMap:
            Attributes:
              - Key: ECS_TASK_DEFINITION_FAMILY
                Value: green
            NamespaceName: mesh.local
            ServiceName: colorteller-green
      VirtualNodeName: green-vn
    DependsOn:
      - Mesh
    Metadata:
      aws:cdk:path: demo/green-vn
  redvn:
    Type: AWS::AppMesh::VirtualNode
    Properties:
      MeshName: demo
      Spec:
        Listeners:
          - HealthCheck:
              HealthyThreshold: 2
              IntervalMillis: 10000
              Path: /ping
              Port: 8080
              Protocol: http
              TimeoutMillis: 5000
              UnhealthyThreshold: 2
            PortMapping:
              Port: 8080
              Protocol: http
        ServiceDiscovery:
          AWSCloudMap:
            Attributes:
              - Key: ECS_TASK_DEFINITION_FAMILY
                Value: red
            NamespaceName: mesh.local
            ServiceName: colorteller-red
      VirtualNodeName: red-vn
    DependsOn:
      - Mesh
    Metadata:
      aws:cdk:path: demo/red-vn
  ColorTellerVirtualRouter:
    Type: AWS::AppMesh::VirtualRouter
    Properties:
      MeshName: demo
      Spec:
        Listeners:
          - PortMapping:
              Port: 8080
              Protocol: http
      VirtualRouterName: colorteller-vr
    DependsOn:
      - Mesh
    Metadata:
      aws:cdk:path: demo/ColorTellerVirtualRouter
  ColorRoute:
    Type: AWS::AppMesh::Route
    Properties:
      MeshName: demo
      RouteName: color-route
      Spec:
        HttpRoute:
          Action:
            WeightedTargets:
              - VirtualNode: blue-vn
                Weight: 1
              - VirtualNode: green-vn
                Weight: 1
          Match:
            Prefix: /
      VirtualRouterName: colorteller-vr
    DependsOn:
      - ColorTellerVirtualRouter
    Metadata:
      aws:cdk:path: demo/ColorRoute
  ColorTellerVirtualService:
    Type: AWS::AppMesh::VirtualService
    Properties:
      MeshName: demo
      Spec:
        Provider:
          VirtualRouter:
            VirtualRouterName: colorteller-vr
      VirtualServiceName: colorteller.mesh.local
    DependsOn:
      - ColorTellerVirtualRouter
    Metadata:
      aws:cdk:path: demo/ColorTellerVirtualService
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Modules: aws-cdk=2.113.0,@aws-cdk/assets=1.10.1,@aws-cdk/aws-applicationautoscaling=1.10.1,@aws-cdk/aws-appmesh=1.10.1,@aws-cdk/aws-autoscaling=1.10.1,@aws-cdk/aws-autoscaling-common=1.10.1,@aws-cdk/aws-autoscaling-hooktargets=1.10.1,@aws-cdk/aws-cloudformation=1.10.1,@aws-cdk/aws-cloudwatch=1.10.1,@aws-cdk/aws-ec2=1.10.1,@aws-cdk/aws-ecr=1.10.1,@aws-cdk/aws-ecr-assets=1.10.1,@aws-cdk/aws-ecs=1.10.1,@aws-cdk/aws-elasticloadbalancingv2=1.10.1,@aws-cdk/aws-events=1.10.1,@aws-cdk/aws-iam=1.10.1,@aws-cdk/aws-kms=1.10.1,@aws-cdk/aws-lambda=1.10.1,@aws-cdk/aws-logs=1.10.1,@aws-cdk/aws-s3=1.10.1,@aws-cdk/aws-s3-assets=1.10.1,@aws-cdk/aws-servicediscovery=1.10.1,@aws-cdk/aws-sns=1.10.1,@aws-cdk/aws-sns-subscriptions=1.10.1,@aws-cdk/aws-sqs=1.10.1,@aws-cdk/aws-ssm=1.10.1,@aws-cdk/core=1.10.1,@aws-cdk/cx-api=1.10.1,@aws-cdk/region-info=1.10.1,jsii-runtime=node.js/v18.12.1
    Condition: CDKMetadataAvailable
Outputs:
  ClusterName:
    Description: ECS/Fargate cluster name
    Value:
      Ref: ClusterEB0386A7
  URL:
    Description: Color App public URL
    Value:
      Fn::GetAtt:
        - PublicALB3DD254D4
        - DNSName
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - il-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - me-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2

