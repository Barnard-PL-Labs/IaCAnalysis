Resources:
  TaskExecutionRole250D2532:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
    Metadata:
      aws:cdk:path: SamplePHP/TaskExecutionRole/Resource
  TaskExecutionRoleDefaultPolicyA84DD1B0:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - FargateServiceTaskDefwebLogGroup71FAF541
                - Arn
        Version: "2012-10-17"
      PolicyName: TaskExecutionRoleDefaultPolicyA84DD1B0
      Roles:
        - Ref: TaskExecutionRole250D2532
    Metadata:
      aws:cdk:path: SamplePHP/TaskExecutionRole/DefaultPolicy/Resource
  mycdkvpc037DA4AF:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.192.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: SamplePHP/my-cdk-vpc
    Metadata:
      aws:cdk:path: SamplePHP/my-cdk-vpc/Resource
  mycdkvpcpublicsubnet1Subnet1Subnet8383DBBA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: mycdkvpc037DA4AF
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 10.192.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: public-subnet-1
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: SamplePHP/my-cdk-vpc/public-subnet-1Subnet1
    Metadata:
      aws:cdk:path: SamplePHP/my-cdk-vpc/public-subnet-1Subnet1/Subnet
  mycdkvpcpublicsubnet1Subnet1RouteTableE1ABF705:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: mycdkvpc037DA4AF
      Tags:
        - Key: Name
          Value: SamplePHP/my-cdk-vpc/public-subnet-1Subnet1
    Metadata:
      aws:cdk:path: SamplePHP/my-cdk-vpc/public-subnet-1Subnet1/RouteTable
  mycdkvpcpublicsubnet1Subnet1RouteTableAssociation160A4CBB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: mycdkvpcpublicsubnet1Subnet1RouteTableE1ABF705
      SubnetId:
        Ref: mycdkvpcpublicsubnet1Subnet1Subnet8383DBBA
    Metadata:
      aws:cdk:path: SamplePHP/my-cdk-vpc/public-subnet-1Subnet1/RouteTableAssociation
  mycdkvpcpublicsubnet1Subnet1DefaultRoute1255C1C4:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: mycdkvpcpublicsubnet1Subnet1RouteTableE1ABF705
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: mycdkvpcIGW4220D5A9
    DependsOn:
      - mycdkvpcVPCGW2444B783
    Metadata:
      aws:cdk:path: SamplePHP/my-cdk-vpc/public-subnet-1Subnet1/DefaultRoute
  mycdkvpcpublicsubnet1Subnet2SubnetE104EC20:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: mycdkvpc037DA4AF
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: 10.192.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: public-subnet-1
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: SamplePHP/my-cdk-vpc/public-subnet-1Subnet2
    Metadata:
      aws:cdk:path: SamplePHP/my-cdk-vpc/public-subnet-1Subnet2/Subnet
  mycdkvpcpublicsubnet1Subnet2RouteTable3099F008:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: mycdkvpc037DA4AF
      Tags:
        - Key: Name
          Value: SamplePHP/my-cdk-vpc/public-subnet-1Subnet2
    Metadata:
      aws:cdk:path: SamplePHP/my-cdk-vpc/public-subnet-1Subnet2/RouteTable
  mycdkvpcpublicsubnet1Subnet2RouteTableAssociation2ECC1C4A:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: mycdkvpcpublicsubnet1Subnet2RouteTable3099F008
      SubnetId:
        Ref: mycdkvpcpublicsubnet1Subnet2SubnetE104EC20
    Metadata:
      aws:cdk:path: SamplePHP/my-cdk-vpc/public-subnet-1Subnet2/RouteTableAssociation
  mycdkvpcpublicsubnet1Subnet2DefaultRoute98E2F656:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: mycdkvpcpublicsubnet1Subnet2RouteTable3099F008
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: mycdkvpcIGW4220D5A9
    DependsOn:
      - mycdkvpcVPCGW2444B783
    Metadata:
      aws:cdk:path: SamplePHP/my-cdk-vpc/public-subnet-1Subnet2/DefaultRoute
  mycdkvpcIGW4220D5A9:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: SamplePHP/my-cdk-vpc
    Metadata:
      aws:cdk:path: SamplePHP/my-cdk-vpc/IGW
  mycdkvpcVPCGW2444B783:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: mycdkvpc037DA4AF
      InternetGatewayId:
        Ref: mycdkvpcIGW4220D5A9
    Metadata:
      aws:cdk:path: SamplePHP/my-cdk-vpc/VPCGW
  mycdkvpcS314A975EC:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName:
        Fn::Join:
          - ""
          - - com.amazonaws.
            - Ref: AWS::Region
            - .s3
      VpcId:
        Ref: mycdkvpc037DA4AF
      RouteTableIds:
        - Ref: mycdkvpcpublicsubnet1Subnet1RouteTableE1ABF705
        - Ref: mycdkvpcpublicsubnet1Subnet2RouteTable3099F008
      VpcEndpointType: Gateway
    Metadata:
      aws:cdk:path: SamplePHP/my-cdk-vpc/S3/Resource
  mycdkvpcEcrDockerEndpointSecurityGroup7893CB64:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SamplePHP/my-cdk-vpc/EcrDockerEndpoint/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp:
            Fn::GetAtt:
              - mycdkvpc037DA4AF
              - CidrBlock
          Description:
            Fn::Join:
              - ""
              - - "from "
                - Fn::GetAtt:
                    - mycdkvpc037DA4AF
                    - CidrBlock
                - :443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      Tags:
        - Key: Name
          Value: SamplePHP/my-cdk-vpc
      VpcId:
        Ref: mycdkvpc037DA4AF
    Metadata:
      aws:cdk:path: SamplePHP/my-cdk-vpc/EcrDockerEndpoint/SecurityGroup/Resource
  mycdkvpcEcrDockerEndpointF4AFDF57:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName:
        Fn::Join:
          - ""
          - - com.amazonaws.
            - Ref: AWS::Region
            - .ecr.dkr
      VpcId:
        Ref: mycdkvpc037DA4AF
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - Fn::GetAtt:
            - mycdkvpcEcrDockerEndpointSecurityGroup7893CB64
            - GroupId
      SubnetIds:
        - Ref: mycdkvpcpublicsubnet1Subnet1Subnet8383DBBA
        - Ref: mycdkvpcpublicsubnet1Subnet2SubnetE104EC20
      VpcEndpointType: Interface
    Metadata:
      aws:cdk:path: SamplePHP/my-cdk-vpc/EcrDockerEndpoint/Resource
  mycdkvpcsecretmanagerendpointSecurityGroupBDE49110:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SamplePHP/my-cdk-vpc/secretmanagerendpoint/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp:
            Fn::GetAtt:
              - mycdkvpc037DA4AF
              - CidrBlock
          Description:
            Fn::Join:
              - ""
              - - "from "
                - Fn::GetAtt:
                    - mycdkvpc037DA4AF
                    - CidrBlock
                - :443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      Tags:
        - Key: Name
          Value: SamplePHP/my-cdk-vpc
      VpcId:
        Ref: mycdkvpc037DA4AF
    Metadata:
      aws:cdk:path: SamplePHP/my-cdk-vpc/secretmanagerendpoint/SecurityGroup/Resource
  mycdkvpcsecretmanagerendpoint048BA644:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName:
        Fn::Join:
          - ""
          - - com.amazonaws.
            - Ref: AWS::Region
            - .secretsmanager
      VpcId:
        Ref: mycdkvpc037DA4AF
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - Fn::GetAtt:
            - mycdkvpcsecretmanagerendpointSecurityGroupBDE49110
            - GroupId
      SubnetIds:
        - Ref: mycdkvpcpublicsubnet1Subnet1Subnet8383DBBA
        - Ref: mycdkvpcpublicsubnet1Subnet2SubnetE104EC20
      VpcEndpointType: Interface
    Metadata:
      aws:cdk:path: SamplePHP/my-cdk-vpc/secretmanagerendpoint/Resource
  mycdkvpcKMSSecurityGroup3938B08F:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SamplePHP/my-cdk-vpc/KMS/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp:
            Fn::GetAtt:
              - mycdkvpc037DA4AF
              - CidrBlock
          Description:
            Fn::Join:
              - ""
              - - "from "
                - Fn::GetAtt:
                    - mycdkvpc037DA4AF
                    - CidrBlock
                - :443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      Tags:
        - Key: Name
          Value: SamplePHP/my-cdk-vpc
      VpcId:
        Ref: mycdkvpc037DA4AF
    Metadata:
      aws:cdk:path: SamplePHP/my-cdk-vpc/KMS/SecurityGroup/Resource
  mycdkvpcKMS7C5D381E:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName:
        Fn::Join:
          - ""
          - - com.amazonaws.
            - Ref: AWS::Region
            - .kms
      VpcId:
        Ref: mycdkvpc037DA4AF
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - Fn::GetAtt:
            - mycdkvpcKMSSecurityGroup3938B08F
            - GroupId
      SubnetIds:
        - Ref: mycdkvpcpublicsubnet1Subnet1Subnet8383DBBA
        - Ref: mycdkvpcpublicsubnet1Subnet2SubnetE104EC20
      VpcEndpointType: Interface
    Metadata:
      aws:cdk:path: SamplePHP/my-cdk-vpc/KMS/Resource
  mycdkvpcAPIGWSecurityGroupE1E2F8DE:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SamplePHP/my-cdk-vpc/APIGW/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp:
            Fn::GetAtt:
              - mycdkvpc037DA4AF
              - CidrBlock
          Description:
            Fn::Join:
              - ""
              - - "from "
                - Fn::GetAtt:
                    - mycdkvpc037DA4AF
                    - CidrBlock
                - :443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      Tags:
        - Key: Name
          Value: SamplePHP/my-cdk-vpc
      VpcId:
        Ref: mycdkvpc037DA4AF
    Metadata:
      aws:cdk:path: SamplePHP/my-cdk-vpc/APIGW/SecurityGroup/Resource
  mycdkvpcAPIGW3901D8EA:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName:
        Fn::Join:
          - ""
          - - com.amazonaws.
            - Ref: AWS::Region
            - .execute-api
      VpcId:
        Ref: mycdkvpc037DA4AF
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - Fn::GetAtt:
            - mycdkvpcAPIGWSecurityGroupE1E2F8DE
            - GroupId
      SubnetIds:
        - Ref: mycdkvpcpublicsubnet1Subnet1Subnet8383DBBA
        - Ref: mycdkvpcpublicsubnet1Subnet2SubnetE104EC20
      VpcEndpointType: Interface
    Metadata:
      aws:cdk:path: SamplePHP/my-cdk-vpc/APIGW/Resource
  mycdkvpcECSSecurityGroup8789BC8F:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SamplePHP/my-cdk-vpc/ECS/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp:
            Fn::GetAtt:
              - mycdkvpc037DA4AF
              - CidrBlock
          Description:
            Fn::Join:
              - ""
              - - "from "
                - Fn::GetAtt:
                    - mycdkvpc037DA4AF
                    - CidrBlock
                - :443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      Tags:
        - Key: Name
          Value: SamplePHP/my-cdk-vpc
      VpcId:
        Ref: mycdkvpc037DA4AF
    Metadata:
      aws:cdk:path: SamplePHP/my-cdk-vpc/ECS/SecurityGroup/Resource
  mycdkvpcECSC2518526:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName:
        Fn::Join:
          - ""
          - - com.amazonaws.
            - Ref: AWS::Region
            - .ecs
      VpcId:
        Ref: mycdkvpc037DA4AF
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - Fn::GetAtt:
            - mycdkvpcECSSecurityGroup8789BC8F
            - GroupId
      SubnetIds:
        - Ref: mycdkvpcpublicsubnet1Subnet1Subnet8383DBBA
        - Ref: mycdkvpcpublicsubnet1Subnet2SubnetE104EC20
      VpcEndpointType: Interface
    Metadata:
      aws:cdk:path: SamplePHP/my-cdk-vpc/ECS/Resource
  mycdkvpcSSMSecurityGroup4657E3F6:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SamplePHP/my-cdk-vpc/SSM/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp:
            Fn::GetAtt:
              - mycdkvpc037DA4AF
              - CidrBlock
          Description:
            Fn::Join:
              - ""
              - - "from "
                - Fn::GetAtt:
                    - mycdkvpc037DA4AF
                    - CidrBlock
                - :443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      Tags:
        - Key: Name
          Value: SamplePHP/my-cdk-vpc
      VpcId:
        Ref: mycdkvpc037DA4AF
    Metadata:
      aws:cdk:path: SamplePHP/my-cdk-vpc/SSM/SecurityGroup/Resource
  mycdkvpcSSM96C0A1C2:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName:
        Fn::Join:
          - ""
          - - com.amazonaws.
            - Ref: AWS::Region
            - .ssm
      VpcId:
        Ref: mycdkvpc037DA4AF
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - Fn::GetAtt:
            - mycdkvpcSSMSecurityGroup4657E3F6
            - GroupId
      SubnetIds:
        - Ref: mycdkvpcpublicsubnet1Subnet1Subnet8383DBBA
        - Ref: mycdkvpcpublicsubnet1Subnet2SubnetE104EC20
      VpcEndpointType: Interface
    Metadata:
      aws:cdk:path: SamplePHP/my-cdk-vpc/SSM/Resource
  mycdkvpclogsSecurityGroup0CCB0404:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SamplePHP/my-cdk-vpc/logs/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp:
            Fn::GetAtt:
              - mycdkvpc037DA4AF
              - CidrBlock
          Description:
            Fn::Join:
              - ""
              - - "from "
                - Fn::GetAtt:
                    - mycdkvpc037DA4AF
                    - CidrBlock
                - :443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      Tags:
        - Key: Name
          Value: SamplePHP/my-cdk-vpc
      VpcId:
        Ref: mycdkvpc037DA4AF
    Metadata:
      aws:cdk:path: SamplePHP/my-cdk-vpc/logs/SecurityGroup/Resource
  mycdkvpclogs270FABF9:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName:
        Fn::Join:
          - ""
          - - com.amazonaws.
            - Ref: AWS::Region
            - .logs
      VpcId:
        Ref: mycdkvpc037DA4AF
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - Fn::GetAtt:
            - mycdkvpclogsSecurityGroup0CCB0404
            - GroupId
      SubnetIds:
        - Ref: mycdkvpcpublicsubnet1Subnet1Subnet8383DBBA
        - Ref: mycdkvpcpublicsubnet1Subnet2SubnetE104EC20
      VpcEndpointType: Interface
    Metadata:
      aws:cdk:path: SamplePHP/my-cdk-vpc/logs/Resource
  mycdkvpcECRSecurityGroupFF872FD0:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SamplePHP/my-cdk-vpc/ECR/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp:
            Fn::GetAtt:
              - mycdkvpc037DA4AF
              - CidrBlock
          Description:
            Fn::Join:
              - ""
              - - "from "
                - Fn::GetAtt:
                    - mycdkvpc037DA4AF
                    - CidrBlock
                - :443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      Tags:
        - Key: Name
          Value: SamplePHP/my-cdk-vpc
      VpcId:
        Ref: mycdkvpc037DA4AF
    Metadata:
      aws:cdk:path: SamplePHP/my-cdk-vpc/ECR/SecurityGroup/Resource
  mycdkvpcECR649BAB3E:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName:
        Fn::Join:
          - ""
          - - com.amazonaws.
            - Ref: AWS::Region
            - .ecr.api
      VpcId:
        Ref: mycdkvpc037DA4AF
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - Fn::GetAtt:
            - mycdkvpcECRSecurityGroupFF872FD0
            - GroupId
      SubnetIds:
        - Ref: mycdkvpcpublicsubnet1Subnet1Subnet8383DBBA
        - Ref: mycdkvpcpublicsubnet1Subnet2SubnetE104EC20
      VpcEndpointType: Interface
    Metadata:
      aws:cdk:path: SamplePHP/my-cdk-vpc/ECR/Resource
  ClusterEB0386A7:
    Type: AWS::ECS::Cluster
    Metadata:
      aws:cdk:path: SamplePHP/Cluster/Resource
  FargateServiceLBB353E155:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: "false"
      Scheme: internet-facing
      SecurityGroups:
        - Fn::GetAtt:
            - FargateServiceLBSecurityGroup5F444C78
            - GroupId
      Subnets:
        - Ref: mycdkvpcpublicsubnet1Subnet1Subnet8383DBBA
        - Ref: mycdkvpcpublicsubnet1Subnet2SubnetE104EC20
      Type: application
    DependsOn:
      - mycdkvpcpublicsubnet1Subnet1DefaultRoute1255C1C4
      - mycdkvpcpublicsubnet1Subnet2DefaultRoute98E2F656
    Metadata:
      aws:cdk:path: SamplePHP/FargateService/LB/Resource
  FargateServiceLBSecurityGroup5F444C78:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatically created Security Group for ELB SamplePHPFargateServiceLBE02C47A9
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Ref: mycdkvpc037DA4AF
    Metadata:
      aws:cdk:path: SamplePHP/FargateService/LB/SecurityGroup/Resource
  FargateServiceLBSecurityGrouptoSamplePHPFargateServiceSecurityGroup3E00F770804A39CF32:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId:
        Fn::GetAtt:
          - FargateServiceLBSecurityGroup5F444C78
          - GroupId
      IpProtocol: tcp
      Description: Load balancer to target
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - FargateServiceSecurityGroup262B61DD
          - GroupId
      FromPort: 80
      ToPort: 80
    Metadata:
      aws:cdk:path: SamplePHP/FargateService/LB/SecurityGroup/to SamplePHPFargateServiceSecurityGroup3E00F770:80
  FargateServiceLBPublicListener4B4929CA:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: FargateServiceLBPublicListenerECSGroupBE57E081
          Type: forward
      LoadBalancerArn:
        Ref: FargateServiceLBB353E155
      Port: 80
      Protocol: HTTP
    Metadata:
      aws:cdk:path: SamplePHP/FargateService/LB/PublicListener/Resource
  FargateServiceLBPublicListenerECSGroupBE57E081:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: "false"
      TargetType: ip
      VpcId:
        Ref: mycdkvpc037DA4AF
    Metadata:
      aws:cdk:path: SamplePHP/FargateService/LB/PublicListener/ECSGroup/Resource
  FargateServiceTaskDef940E3A80:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: 459602490943.dkr.ecr.us-west-1.amazonaws.com/amazon-ecs-sample:latest
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: FargateServiceTaskDefwebLogGroup71FAF541
              awslogs-stream-prefix: FargateService
              awslogs-region:
                Ref: AWS::Region
          Name: web
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
      Cpu: "256"
      ExecutionRoleArn:
        Fn::GetAtt:
          - TaskExecutionRole250D2532
          - Arn
      Family: SamplePHPFargateServiceTaskDef3DCA59B7
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::GetAtt:
          - TaskExecutionRole250D2532
          - Arn
    Metadata:
      aws:cdk:path: SamplePHP/FargateService/TaskDef/Resource
  FargateServiceTaskDefwebLogGroup71FAF541:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: SamplePHP/FargateService/TaskDef/web/LogGroup/Resource
  FargateServiceECC8084D:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: ClusterEB0386A7
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: web
          ContainerPort: 80
          TargetGroupArn:
            Ref: FargateServiceLBPublicListenerECSGroupBE57E081
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::GetAtt:
                - FargateServiceSecurityGroup262B61DD
                - GroupId
          Subnets:
            - Ref: mycdkvpcpublicsubnet1Subnet1Subnet8383DBBA
            - Ref: mycdkvpcpublicsubnet1Subnet2SubnetE104EC20
      TaskDefinition:
        Ref: FargateServiceTaskDef940E3A80
    DependsOn:
      - FargateServiceLBPublicListenerECSGroupBE57E081
      - FargateServiceLBPublicListener4B4929CA
    Metadata:
      aws:cdk:path: SamplePHP/FargateService/Service/Service
  FargateServiceSecurityGroup262B61DD:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SamplePHP/FargateService/Service/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: mycdkvpc037DA4AF
    Metadata:
      aws:cdk:path: SamplePHP/FargateService/Service/SecurityGroup/Resource
  FargateServiceSecurityGroupfromSamplePHPFargateServiceLBSecurityGroupC5F4503E807B447DF8:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort: 80
      GroupId:
        Fn::GetAtt:
          - FargateServiceSecurityGroup262B61DD
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - FargateServiceLBSecurityGroup5F444C78
          - GroupId
      ToPort: 80
    Metadata:
      aws:cdk:path: SamplePHP/FargateService/Service/SecurityGroup/from SamplePHPFargateServiceLBSecurityGroupC5F4503E:80
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/31Sy27CMBD8lt6NW3LqlVKKkJCKAuKKHGdJF4wd+QFCUf69fiSQ0qonz87OenfHzmiW0ZcndjEjXh5HAgvarC3jR+KpXYPsRJtcCSDTvYznSgnk1xAm1BLgGW22NQ/cdjUlK1f4xNoVEmzg7ihXzsKGFem6xN+5iTGKI7Oo5E0cwEJa0F45ZxYu7Nq16aKJ9cN+nUBa0jF+kpksa4XSdtJbGG/aMw5DzRq402ivc61cHef6l5hVGoz5RS9k5IMbhjZT4YxvFVQ9/GC6YmFTc3yHPUrs93xklLQMJegB19WuQZ+RJ+8SjO12NbPBIUMnde2djw4uFSvfmGCSQ/lQDoIZi1x4RREVKKuzf8K/q+MSP+KhDv1ustP0eJDf+M7+4XojB2FLhKq8U0tV3dI9bluSg1FOp10/na1d+j8D1vtURndaIlUJ9GCez+NXOs7o+OlgEEfaSYsnoHk6vwFrPm7m6QIAAA==
    Metadata:
      aws:cdk:path: SamplePHP/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Outputs:
  FargateServiceLoadBalancerDNS9433D5F6:
    Value:
      Fn::GetAtt:
        - FargateServiceLBB353E155
        - DNSName
  FargateServiceServiceURL47701F45:
    Value:
      Fn::Join:
        - ""
        - - http://
          - Fn::GetAtt:
              - FargateServiceLBB353E155
              - DNSName
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
Rules:
  CheckBootstrapVersion:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::Contains:
                - - "1"
                  - "2"
                  - "3"
                  - "4"
                  - "5"
                - Ref: BootstrapVersion
        AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.

