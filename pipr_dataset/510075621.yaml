Resources:
  lighthouseservervpcC01A1996:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: lighthouse-server-stack/lighthouse-server-vpc
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-vpc/Resource
  lighthouseservervpcingressSubnet1Subnet9B427E00:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: lighthouseservervpcC01A1996
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: ingress
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: lighthouse-server-stack/lighthouse-server-vpc/ingressSubnet1
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-vpc/ingressSubnet1/Subnet
  lighthouseservervpcingressSubnet1RouteTable8AC164C0:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: lighthouseservervpcC01A1996
      Tags:
        - Key: Name
          Value: lighthouse-server-stack/lighthouse-server-vpc/ingressSubnet1
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-vpc/ingressSubnet1/RouteTable
  lighthouseservervpcingressSubnet1RouteTableAssociation0A1E7339:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: lighthouseservervpcingressSubnet1RouteTable8AC164C0
      SubnetId:
        Ref: lighthouseservervpcingressSubnet1Subnet9B427E00
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-vpc/ingressSubnet1/RouteTableAssociation
  lighthouseservervpcingressSubnet1DefaultRoute47F0CF0A:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: lighthouseservervpcingressSubnet1RouteTable8AC164C0
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: lighthouseservervpcIGW99E4A060
    DependsOn:
      - lighthouseservervpcVPCGWF04852E5
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-vpc/ingressSubnet1/DefaultRoute
  lighthouseservervpcingressSubnet1EIP76606CFC:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: lighthouse-server-stack/lighthouse-server-vpc/ingressSubnet1
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-vpc/ingressSubnet1/EIP
  lighthouseservervpcingressSubnet1NATGateway58ED5033:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId:
        Ref: lighthouseservervpcingressSubnet1Subnet9B427E00
      AllocationId:
        Fn::GetAtt:
          - lighthouseservervpcingressSubnet1EIP76606CFC
          - AllocationId
      Tags:
        - Key: Name
          Value: lighthouse-server-stack/lighthouse-server-vpc/ingressSubnet1
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-vpc/ingressSubnet1/NATGateway
  lighthouseservervpcingressSubnet2Subnet50C42681:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: lighthouseservervpcC01A1996
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: ingress
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: lighthouse-server-stack/lighthouse-server-vpc/ingressSubnet2
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-vpc/ingressSubnet2/Subnet
  lighthouseservervpcingressSubnet2RouteTableBEC7927C:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: lighthouseservervpcC01A1996
      Tags:
        - Key: Name
          Value: lighthouse-server-stack/lighthouse-server-vpc/ingressSubnet2
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-vpc/ingressSubnet2/RouteTable
  lighthouseservervpcingressSubnet2RouteTableAssociation8E764DD6:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: lighthouseservervpcingressSubnet2RouteTableBEC7927C
      SubnetId:
        Ref: lighthouseservervpcingressSubnet2Subnet50C42681
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-vpc/ingressSubnet2/RouteTableAssociation
  lighthouseservervpcingressSubnet2DefaultRoute0F90F6A2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: lighthouseservervpcingressSubnet2RouteTableBEC7927C
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: lighthouseservervpcIGW99E4A060
    DependsOn:
      - lighthouseservervpcVPCGWF04852E5
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-vpc/ingressSubnet2/DefaultRoute
  lighthouseservervpcingressSubnet2EIP9BDF88C6:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: lighthouse-server-stack/lighthouse-server-vpc/ingressSubnet2
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-vpc/ingressSubnet2/EIP
  lighthouseservervpcingressSubnet2NATGatewayFE0C09B1:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId:
        Ref: lighthouseservervpcingressSubnet2Subnet50C42681
      AllocationId:
        Fn::GetAtt:
          - lighthouseservervpcingressSubnet2EIP9BDF88C6
          - AllocationId
      Tags:
        - Key: Name
          Value: lighthouse-server-stack/lighthouse-server-vpc/ingressSubnet2
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-vpc/ingressSubnet2/NATGateway
  lighthouseservervpccomputeSubnet1SubnetBADC938A:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: lighthouseservervpcC01A1996
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: compute
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: lighthouse-server-stack/lighthouse-server-vpc/computeSubnet1
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-vpc/computeSubnet1/Subnet
  lighthouseservervpccomputeSubnet1RouteTableD25D86DB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: lighthouseservervpcC01A1996
      Tags:
        - Key: Name
          Value: lighthouse-server-stack/lighthouse-server-vpc/computeSubnet1
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-vpc/computeSubnet1/RouteTable
  lighthouseservervpccomputeSubnet1RouteTableAssociationC9580217:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: lighthouseservervpccomputeSubnet1RouteTableD25D86DB
      SubnetId:
        Ref: lighthouseservervpccomputeSubnet1SubnetBADC938A
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-vpc/computeSubnet1/RouteTableAssociation
  lighthouseservervpccomputeSubnet1DefaultRoute8881ADB9:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: lighthouseservervpccomputeSubnet1RouteTableD25D86DB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: lighthouseservervpcingressSubnet1NATGateway58ED5033
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-vpc/computeSubnet1/DefaultRoute
  lighthouseservervpccomputeSubnet2Subnet088E44FB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: lighthouseservervpcC01A1996
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: compute
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: lighthouse-server-stack/lighthouse-server-vpc/computeSubnet2
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-vpc/computeSubnet2/Subnet
  lighthouseservervpccomputeSubnet2RouteTableF5C04B3D:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: lighthouseservervpcC01A1996
      Tags:
        - Key: Name
          Value: lighthouse-server-stack/lighthouse-server-vpc/computeSubnet2
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-vpc/computeSubnet2/RouteTable
  lighthouseservervpccomputeSubnet2RouteTableAssociationFB18AEB2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: lighthouseservervpccomputeSubnet2RouteTableF5C04B3D
      SubnetId:
        Ref: lighthouseservervpccomputeSubnet2Subnet088E44FB
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-vpc/computeSubnet2/RouteTableAssociation
  lighthouseservervpccomputeSubnet2DefaultRoute42286559:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: lighthouseservervpccomputeSubnet2RouteTableF5C04B3D
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: lighthouseservervpcingressSubnet2NATGatewayFE0C09B1
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-vpc/computeSubnet2/DefaultRoute
  lighthouseservervpcrdsSubnet1SubnetC31490A0:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: lighthouseservervpcC01A1996
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 10.0.4.0/28
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: rds
        - Key: aws-cdk:subnet-type
          Value: Isolated
        - Key: Name
          Value: lighthouse-server-stack/lighthouse-server-vpc/rdsSubnet1
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-vpc/rdsSubnet1/Subnet
  lighthouseservervpcrdsSubnet1RouteTable8D9E8715:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: lighthouseservervpcC01A1996
      Tags:
        - Key: Name
          Value: lighthouse-server-stack/lighthouse-server-vpc/rdsSubnet1
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-vpc/rdsSubnet1/RouteTable
  lighthouseservervpcrdsSubnet1RouteTableAssociationAA1421A8:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: lighthouseservervpcrdsSubnet1RouteTable8D9E8715
      SubnetId:
        Ref: lighthouseservervpcrdsSubnet1SubnetC31490A0
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-vpc/rdsSubnet1/RouteTableAssociation
  lighthouseservervpcrdsSubnet2SubnetABEE06CA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: lighthouseservervpcC01A1996
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: 10.0.4.16/28
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: rds
        - Key: aws-cdk:subnet-type
          Value: Isolated
        - Key: Name
          Value: lighthouse-server-stack/lighthouse-server-vpc/rdsSubnet2
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-vpc/rdsSubnet2/Subnet
  lighthouseservervpcrdsSubnet2RouteTable1829FF79:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: lighthouseservervpcC01A1996
      Tags:
        - Key: Name
          Value: lighthouse-server-stack/lighthouse-server-vpc/rdsSubnet2
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-vpc/rdsSubnet2/RouteTable
  lighthouseservervpcrdsSubnet2RouteTableAssociationD7D5E0B4:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: lighthouseservervpcrdsSubnet2RouteTable1829FF79
      SubnetId:
        Ref: lighthouseservervpcrdsSubnet2SubnetABEE06CA
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-vpc/rdsSubnet2/RouteTableAssociation
  lighthouseservervpcIGW99E4A060:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: lighthouse-server-stack/lighthouse-server-vpc
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-vpc/IGW
  lighthouseservervpcVPCGWF04852E5:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: lighthouseservervpcC01A1996
      InternetGatewayId:
        Ref: lighthouseservervpcIGW99E4A060
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-vpc/VPCGW
  MyKey6AB29FA6:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Statement:
          - Action: kms:*
            Effect: Allow
            Principal:
              AWS:
                Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":iam::"
                    - Ref: AWS::AccountId
                    - :root
            Resource: "*"
        Version: "2012-10-17"
      EnableKeyRotation: true
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: lighthouse-server-stack/MyKey/Resource
  lighthouseserverdbcredentialsEEDDBCBD:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description:
        Fn::Join:
          - ""
          - - "Generated by the CDK for stack: "
            - Ref: AWS::StackName
      GenerateSecretString:
        ExcludeCharacters: " %+~`#$&*()|[]{}:;<>?!'/@\"\\"
        GenerateStringKey: password
        PasswordLength: 30
        SecretStringTemplate: '{"username":"lh_user"}'
      Name: lighthouse-server/db-credentials
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-db-credentials/Resource
  lighthouseserverdbcredentialsAttachment0B2539FC:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId:
        Ref: lighthouseserverdbcredentialsEEDDBCBD
      TargetId:
        Ref: lighthouseserverdatabasecluster1AD8D517
      TargetType: AWS::RDS::DBCluster
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-db-credentials/Attachment/Resource
  lighthouseserverdatabaseclusterSubnetsE8C70A80:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnets for lighthouse-server-database-cluster database
      SubnetIds:
        - Ref: lighthouseservervpcrdsSubnet1SubnetC31490A0
        - Ref: lighthouseservervpcrdsSubnet2SubnetABEE06CA
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-database-cluster/Subnets/Default
  lighthouseserverdatabaseclusterSecurityGroupE4CEC76E:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: RDS security group
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: lighthouseservervpcC01A1996
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-database-cluster/SecurityGroup/Resource
  lighthouseserverdatabaseclusterSecurityGroupfromlighthouseserverstacklighthouseserverdockerlambdaSecurityGroup63B3F309IndirectPortD5DC5B24:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: from lighthouseserverstacklighthouseserverdockerlambdaSecurityGroup63B3F309:{IndirectPort}
      FromPort:
        Fn::GetAtt:
          - lighthouseserverdatabasecluster1AD8D517
          - Endpoint.Port
      GroupId:
        Fn::GetAtt:
          - lighthouseserverdatabaseclusterSecurityGroupE4CEC76E
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - lighthouseserverdockerlambdaSecurityGroupA3104FB4
          - GroupId
      ToPort:
        Fn::GetAtt:
          - lighthouseserverdatabasecluster1AD8D517
          - Endpoint.Port
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-database-cluster/SecurityGroup/from lighthouseserverstacklighthouseserverdockerlambdaSecurityGroup63B3F309:{IndirectPort}
  lighthouseserverdatabasecluster1AD8D517:
    Type: AWS::RDS::DBCluster
    Properties:
      Engine: aurora-postgresql
      DatabaseName: lighthouse
      DBClusterParameterGroupName: default.aurora-postgresql10
      DBSubnetGroupName:
        Ref: lighthouseserverdatabaseclusterSubnetsE8C70A80
      EngineMode: serverless
      EngineVersion: "10.11"
      KmsKeyId:
        Fn::GetAtt:
          - MyKey6AB29FA6
          - Arn
      MasterUsername:
        Fn::Join:
          - ""
          - - "{{resolve:secretsmanager:"
            - Ref: lighthouseserverdbcredentialsEEDDBCBD
            - :SecretString:username::}}
      MasterUserPassword:
        Fn::Join:
          - ""
          - - "{{resolve:secretsmanager:"
            - Ref: lighthouseserverdbcredentialsEEDDBCBD
            - :SecretString:password::}}
      StorageEncrypted: true
      VpcSecurityGroupIds:
        - Fn::GetAtt:
            - lighthouseserverdatabaseclusterSecurityGroupE4CEC76E
            - GroupId
    UpdateReplacePolicy: Snapshot
    DeletionPolicy: Snapshot
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-database-cluster/Resource
  lighthouseserverdockerlambdaServiceRoleCD018CEB:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-docker-lambda/ServiceRole/Resource
  lighthouseserverdockerlambdaServiceRoleDefaultPolicyE1E8818F:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - secretsmanager:DescribeSecret
              - secretsmanager:GetSecretValue
            Effect: Allow
            Resource:
              Ref: lighthouseserverdbcredentialsEEDDBCBD
        Version: "2012-10-17"
      PolicyName: lighthouseserverdockerlambdaServiceRoleDefaultPolicyE1E8818F
      Roles:
        - Ref: lighthouseserverdockerlambdaServiceRoleCD018CEB
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-docker-lambda/ServiceRole/DefaultPolicy/Resource
  lighthouseserverdockerlambdaSecurityGroupA3104FB4:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatic security group for Lambda Function lighthouseserverstacklighthouseserverdockerlambda9BFC174C
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: lighthouseservervpcC01A1996
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-docker-lambda/SecurityGroup/Resource
  lighthouseserverdockerlambda0729EF9F:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ImageUri:
          Fn::Sub: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/cdk-hnb659fds-container-assets-${AWS::AccountId}-${AWS::Region}:83b6dd16785101dba5a157bf1df2bd1c0dcc07c58568295e5e60b1c940e71110
      Role:
        Fn::GetAtt:
          - lighthouseserverdockerlambdaServiceRoleCD018CEB
          - Arn
      Environment:
        Variables:
          SECRET_NAME:
            Fn::Join:
              - "-"
              - - Fn::Select:
                    - 0
                    - Fn::Split:
                        - "-"
                        - Fn::Select:
                            - 6
                            - Fn::Split:
                                - ":"
                                - Ref: lighthouseserverdbcredentialsEEDDBCBD
                - Fn::Select:
                    - 1
                    - Fn::Split:
                        - "-"
                        - Fn::Select:
                            - 6
                            - Fn::Split:
                                - ":"
                                - Ref: lighthouseserverdbcredentialsEEDDBCBD
                - Fn::Select:
                    - 2
                    - Fn::Split:
                        - "-"
                        - Fn::Select:
                            - 6
                            - Fn::Split:
                                - ":"
                                - Ref: lighthouseserverdbcredentialsEEDDBCBD
      MemorySize: 512
      PackageType: Image
      Timeout: 15
      VpcConfig:
        SecurityGroupIds:
          - Fn::GetAtt:
              - lighthouseserverdockerlambdaSecurityGroupA3104FB4
              - GroupId
        SubnetIds:
          - Ref: lighthouseservervpccomputeSubnet1SubnetBADC938A
          - Ref: lighthouseservervpccomputeSubnet2Subnet088E44FB
    DependsOn:
      - lighthouseserverdockerlambdaServiceRoleDefaultPolicyE1E8818F
      - lighthouseserverdockerlambdaServiceRoleCD018CEB
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-docker-lambda/Resource
      aws:asset:path: asset.83b6dd16785101dba5a157bf1df2bd1c0dcc07c58568295e5e60b1c940e71110
      aws:asset:dockerfile-path: Dockerfile
      aws:asset:property: Code.ImageUri
  lighthouseserverapigateway96574D8F:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: lighthouse-server-api-gateway
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-api-gateway/Resource
  lighthouseserverapigatewayCloudWatchRole82701BED:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-api-gateway/CloudWatchRole/Resource
  lighthouseserverapigatewayAccount768B113C:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn:
        Fn::GetAtt:
          - lighthouseserverapigatewayCloudWatchRole82701BED
          - Arn
    DependsOn:
      - lighthouseserverapigateway96574D8F
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-api-gateway/Account
  lighthouseserverapigatewayDeployment9E7C350Cad55db1cdbd18d2c7ea65d949978f399:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:
        Ref: lighthouseserverapigateway96574D8F
      Description: Automatically created by the RestApi construct
    DependsOn:
      - lighthouseserverapigatewayproxyANY3E458069
      - lighthouseserverapigatewayproxy8F7249F1
      - lighthouseserverapigatewayANY59FEEE39
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-api-gateway/Deployment/Resource
  lighthouseserverapigatewayDeploymentStageprodA59FC182:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId:
        Ref: lighthouseserverapigateway96574D8F
      DeploymentId:
        Ref: lighthouseserverapigatewayDeployment9E7C350Cad55db1cdbd18d2c7ea65d949978f399
      StageName: prod
    DependsOn:
      - lighthouseserverapigatewayAccount768B113C
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-api-gateway/DeploymentStage.prod/Resource
  lighthouseserverapigatewayproxy8F7249F1:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
          - lighthouseserverapigateway96574D8F
          - RootResourceId
      PathPart: "{proxy+}"
      RestApiId:
        Ref: lighthouseserverapigateway96574D8F
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-api-gateway/Default/{proxy+}/Resource
  lighthouseserverapigatewayproxyANYApiPermissionlighthouseserverstacklighthouseserverapigateway5C5DD4B3ANYproxy577F3E61:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - lighthouseserverdockerlambda0729EF9F
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: lighthouseserverapigateway96574D8F
            - /
            - Ref: lighthouseserverapigatewayDeploymentStageprodA59FC182
            - /*/*
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-api-gateway/Default/{proxy+}/ANY/ApiPermission.lighthouseserverstacklighthouseserverapigateway5C5DD4B3.ANY..{proxy+}
  lighthouseserverapigatewayproxyANYApiPermissionTestlighthouseserverstacklighthouseserverapigateway5C5DD4B3ANYproxy574F8FD8:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - lighthouseserverdockerlambda0729EF9F
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: lighthouseserverapigateway96574D8F
            - /test-invoke-stage/*/*
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-api-gateway/Default/{proxy+}/ANY/ApiPermission.Test.lighthouseserverstacklighthouseserverapigateway5C5DD4B3.ANY..{proxy+}
  lighthouseserverapigatewayproxyANY3E458069:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: ANY
      ResourceId:
        Ref: lighthouseserverapigatewayproxy8F7249F1
      RestApiId:
        Ref: lighthouseserverapigateway96574D8F
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                  - lighthouseserverdockerlambda0729EF9F
                  - Arn
              - /invocations
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-api-gateway/Default/{proxy+}/ANY/Resource
  lighthouseserverapigatewayANYApiPermissionlighthouseserverstacklighthouseserverapigateway5C5DD4B3ANY98CD7261:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - lighthouseserverdockerlambda0729EF9F
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: lighthouseserverapigateway96574D8F
            - /
            - Ref: lighthouseserverapigatewayDeploymentStageprodA59FC182
            - /*/
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-api-gateway/Default/ANY/ApiPermission.lighthouseserverstacklighthouseserverapigateway5C5DD4B3.ANY..
  lighthouseserverapigatewayANYApiPermissionTestlighthouseserverstacklighthouseserverapigateway5C5DD4B3ANYBEE79BA3:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - lighthouseserverdockerlambda0729EF9F
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: lighthouseserverapigateway96574D8F
            - /test-invoke-stage/*/
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-api-gateway/Default/ANY/ApiPermission.Test.lighthouseserverstacklighthouseserverapigateway5C5DD4B3.ANY..
  lighthouseserverapigatewayANY59FEEE39:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: ANY
      ResourceId:
        Fn::GetAtt:
          - lighthouseserverapigateway96574D8F
          - RootResourceId
      RestApiId:
        Ref: lighthouseserverapigateway96574D8F
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                  - lighthouseserverdockerlambda0729EF9F
                  - Arn
              - /invocations
    Metadata:
      aws:cdk:path: lighthouse-server-stack/lighthouse-server-api-gateway/Default/ANY/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/31STW/bMAz9Lb0rWpNednWTrQi6DyMpei1kmXPV2JIhUukMw/99lJTEWQfsxKcn8vGR0kre3crbG/WOC10fFq2p5LgnpQ+CqZcR9EqOz70W61/2uVyLMlSt0ftQWaDIzWjnAsGTqlqY+ZkrEJ02ioyzl+QIvmzLGH4oelAE72oQpTdHhrPw1hJ4xueE7OR0Koi9vnZgSexBB29oePAu9MnDf4mtbTwgTuLQoRwfIQlzmISvmdgoUpVC4BoPUdwfwbdcsG4DsiGRDV60N/f/EKfMSWDSwE5Z1YCXY7aSZWN4Ur4BuhrlkvDxZhKt6qpasT+nD+C3HSt+DVafF3uNS/CdQeTTJIzq5Lhz+XFSLB0/ZBo6o0lwxxeFyE7llXoRmXgnd9A7NOT8cM+LEao3TX4EOX5LrnaAVPQmtZhhobULPNQG+tYN5/muTvzdmvxpEuBSF7yG1KT07vdwZk7CGX8HenV1pDKapkulSJ6jmrFNzPgZqA/0VznjtbO1obQe62qQb/jpuPwslyu5vHlDYxaebZsO5C7HPy+18XMrAwAA
    Metadata:
      aws:cdk:path: lighthouse-server-stack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Outputs:
  lighthouseserverapigatewayEndpoint893FFFAE:
    Value:
      Fn::Join:
        - ""
        - - https://
          - Ref: lighthouseserverapigateway96574D8F
          - .execute-api.
          - Ref: AWS::Region
          - "."
          - Ref: AWS::URLSuffix
          - /
          - Ref: lighthouseserverapigatewayDeploymentStageprodA59FC182
          - /
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
Rules:
  CheckBootstrapVersion:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::Contains:
                - - "1"
                  - "2"
                  - "3"
                  - "4"
                  - "5"
                - Ref: BootstrapVersion
        AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.

