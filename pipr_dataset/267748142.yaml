Resources:
  ProducerD8AA94EB:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.40.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: CdkVpceStack/Producer
    Metadata:
      aws:cdk:path: CdkVpceStack/Producer/Resource
  ProducerApplicationSubnet1SubnetDA5E18B9:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.40.0.0/24
      VpcId:
        Ref: ProducerD8AA94EB
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Application
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: CdkVpceStack/Producer/ApplicationSubnet1
    Metadata:
      aws:cdk:path: CdkVpceStack/Producer/ApplicationSubnet1/Subnet
  ProducerApplicationSubnet1RouteTable050D97E8:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: ProducerD8AA94EB
      Tags:
        - Key: Name
          Value: CdkVpceStack/Producer/ApplicationSubnet1
    Metadata:
      aws:cdk:path: CdkVpceStack/Producer/ApplicationSubnet1/RouteTable
  ProducerApplicationSubnet1RouteTableAssociation63F51E14:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: ProducerApplicationSubnet1RouteTable050D97E8
      SubnetId:
        Ref: ProducerApplicationSubnet1SubnetDA5E18B9
    Metadata:
      aws:cdk:path: CdkVpceStack/Producer/ApplicationSubnet1/RouteTableAssociation
  ProducerApplicationSubnet1DefaultRoute1D976F96:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: ProducerApplicationSubnet1RouteTable050D97E8
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: ProducerIngressSubnet1NATGatewayDDC8200F
    Metadata:
      aws:cdk:path: CdkVpceStack/Producer/ApplicationSubnet1/DefaultRoute
  ProducerApplicationSubnet2Subnet46597692:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.40.1.0/24
      VpcId:
        Ref: ProducerD8AA94EB
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Application
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: CdkVpceStack/Producer/ApplicationSubnet2
    Metadata:
      aws:cdk:path: CdkVpceStack/Producer/ApplicationSubnet2/Subnet
  ProducerApplicationSubnet2RouteTable4AEDC85B:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: ProducerD8AA94EB
      Tags:
        - Key: Name
          Value: CdkVpceStack/Producer/ApplicationSubnet2
    Metadata:
      aws:cdk:path: CdkVpceStack/Producer/ApplicationSubnet2/RouteTable
  ProducerApplicationSubnet2RouteTableAssociation51B397B1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: ProducerApplicationSubnet2RouteTable4AEDC85B
      SubnetId:
        Ref: ProducerApplicationSubnet2Subnet46597692
    Metadata:
      aws:cdk:path: CdkVpceStack/Producer/ApplicationSubnet2/RouteTableAssociation
  ProducerApplicationSubnet2DefaultRoute7BFD5842:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: ProducerApplicationSubnet2RouteTable4AEDC85B
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: ProducerIngressSubnet1NATGatewayDDC8200F
    Metadata:
      aws:cdk:path: CdkVpceStack/Producer/ApplicationSubnet2/DefaultRoute
  ProducerIngressSubnet1SubnetE48134DD:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.40.2.0/24
      VpcId:
        Ref: ProducerD8AA94EB
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Ingress
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: CdkVpceStack/Producer/IngressSubnet1
    Metadata:
      aws:cdk:path: CdkVpceStack/Producer/IngressSubnet1/Subnet
  ProducerIngressSubnet1RouteTable40A8EC83:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: ProducerD8AA94EB
      Tags:
        - Key: Name
          Value: CdkVpceStack/Producer/IngressSubnet1
    Metadata:
      aws:cdk:path: CdkVpceStack/Producer/IngressSubnet1/RouteTable
  ProducerIngressSubnet1RouteTableAssociation0C293977:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: ProducerIngressSubnet1RouteTable40A8EC83
      SubnetId:
        Ref: ProducerIngressSubnet1SubnetE48134DD
    Metadata:
      aws:cdk:path: CdkVpceStack/Producer/IngressSubnet1/RouteTableAssociation
  ProducerIngressSubnet1DefaultRoute1E63FA8C:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: ProducerIngressSubnet1RouteTable40A8EC83
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: ProducerIGWC9F39126
    DependsOn:
      - ProducerVPCGW6059D92D
    Metadata:
      aws:cdk:path: CdkVpceStack/Producer/IngressSubnet1/DefaultRoute
  ProducerIngressSubnet1EIP8943318C:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: CdkVpceStack/Producer/IngressSubnet1
    Metadata:
      aws:cdk:path: CdkVpceStack/Producer/IngressSubnet1/EIP
  ProducerIngressSubnet1NATGatewayDDC8200F:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - ProducerIngressSubnet1EIP8943318C
          - AllocationId
      SubnetId:
        Ref: ProducerIngressSubnet1SubnetE48134DD
      Tags:
        - Key: Name
          Value: CdkVpceStack/Producer/IngressSubnet1
    Metadata:
      aws:cdk:path: CdkVpceStack/Producer/IngressSubnet1/NATGateway
  ProducerIngressSubnet2SubnetA302D82C:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.40.3.0/24
      VpcId:
        Ref: ProducerD8AA94EB
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Ingress
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: CdkVpceStack/Producer/IngressSubnet2
    Metadata:
      aws:cdk:path: CdkVpceStack/Producer/IngressSubnet2/Subnet
  ProducerIngressSubnet2RouteTableD5FD76E9:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: ProducerD8AA94EB
      Tags:
        - Key: Name
          Value: CdkVpceStack/Producer/IngressSubnet2
    Metadata:
      aws:cdk:path: CdkVpceStack/Producer/IngressSubnet2/RouteTable
  ProducerIngressSubnet2RouteTableAssociation9E18155D:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: ProducerIngressSubnet2RouteTableD5FD76E9
      SubnetId:
        Ref: ProducerIngressSubnet2SubnetA302D82C
    Metadata:
      aws:cdk:path: CdkVpceStack/Producer/IngressSubnet2/RouteTableAssociation
  ProducerIngressSubnet2DefaultRouteDCC16A03:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: ProducerIngressSubnet2RouteTableD5FD76E9
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: ProducerIGWC9F39126
    DependsOn:
      - ProducerVPCGW6059D92D
    Metadata:
      aws:cdk:path: CdkVpceStack/Producer/IngressSubnet2/DefaultRoute
  ProducerIGWC9F39126:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: CdkVpceStack/Producer
    Metadata:
      aws:cdk:path: CdkVpceStack/Producer/IGW
  ProducerVPCGW6059D92D:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: ProducerD8AA94EB
      InternetGatewayId:
        Ref: ProducerIGWC9F39126
    Metadata:
      aws:cdk:path: CdkVpceStack/Producer/VPCGW
  ClusterEB0386A7:
    Type: AWS::ECS::Cluster
    Metadata:
      aws:cdk:path: CdkVpceStack/Cluster/Resource
  MyServiceTaskRole5FE6A4C6:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: CdkVpceStack/MyService/TaskRole/Resource
  MyServiceA1F951EB:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: nginx
          Memory: 512
          Name: Default
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: tcp
      Cpu: "256"
      Family: CdkVpceStackMyServiceE528574D
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::GetAtt:
          - MyServiceTaskRole5FE6A4C6
          - Arn
    Metadata:
      aws:cdk:path: CdkVpceStack/MyService/Resource
  EcsIngressEgressD1BF921F:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: CdkVpceStack/EcsIngressEgress
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: from 0.0.0.0/0:80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Ref: ProducerD8AA94EB
    Metadata:
      aws:cdk:path: CdkVpceStack/EcsIngressEgress/Resource
  serviceService7DDC3B7C:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: ClusterEB0386A7
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 3
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: Default
          ContainerPort: 80
          TargetGroupArn:
            Ref: public9A18C05B
        - ContainerName: Default
          ContainerPort: 80
          TargetGroupArn:
            Ref: private5ED30F02
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::GetAtt:
                - EcsIngressEgressD1BF921F
                - GroupId
          Subnets:
            - Ref: ProducerApplicationSubnet1SubnetDA5E18B9
            - Ref: ProducerApplicationSubnet2Subnet46597692
      TaskDefinition:
        Ref: MyServiceA1F951EB
    DependsOn:
      - InternalLBservice31DC588B
      - PublicLBservice8CF50A6C
    Metadata:
      aws:cdk:path: CdkVpceStack/service/Service
  PublicLB1718C38E:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - Ref: ProducerIngressSubnet1SubnetE48134DD
        - Ref: ProducerIngressSubnet2SubnetA302D82C
      Type: network
    DependsOn:
      - ProducerIngressSubnet1DefaultRoute1E63FA8C
      - ProducerIngressSubnet2DefaultRouteDCC16A03
    Metadata:
      aws:cdk:path: CdkVpceStack/PublicLB/Resource
  PublicLBservice8CF50A6C:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: public9A18C05B
          Type: forward
      LoadBalancerArn:
        Ref: PublicLB1718C38E
      Port: 80
      Protocol: TCP
    Metadata:
      aws:cdk:path: CdkVpceStack/PublicLB/service/Resource
  public9A18C05B:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: TCP
      TargetType: ip
      VpcId:
        Ref: ProducerD8AA94EB
    Metadata:
      aws:cdk:path: CdkVpceStack/public/Resource
  InternalLBA2E125EF:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      Subnets:
        - Ref: ProducerApplicationSubnet1SubnetDA5E18B9
        - Ref: ProducerApplicationSubnet2Subnet46597692
      Type: network
    Metadata:
      aws:cdk:path: CdkVpceStack/InternalLB/Resource
  InternalLBservice31DC588B:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: private5ED30F02
          Type: forward
      LoadBalancerArn:
        Ref: InternalLBA2E125EF
      Port: 80
      Protocol: TCP
    Metadata:
      aws:cdk:path: CdkVpceStack/InternalLB/service/Resource
  private5ED30F02:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: TCP
      TargetType: ip
      VpcId:
        Ref: ProducerD8AA94EB
    Metadata:
      aws:cdk:path: CdkVpceStack/private/Resource
  StupidServiceE47B7713:
    Type: AWS::EC2::VPCEndpointService
    Properties:
      NetworkLoadBalancerArns:
        - Ref: InternalLBA2E125EF
      AcceptanceRequired: false
    Metadata:
      aws:cdk:path: CdkVpceStack/StupidService/StupidService
  StupidServicePermissions85DBC261:
    Type: AWS::EC2::VPCEndpointServicePermissions
    Properties:
      ServiceId:
        Ref: StupidServiceE47B7713
      AllowedPrincipals:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::468871832330:root
    Metadata:
      aws:cdk:path: CdkVpceStack/StupidService/Permissions
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Modules: aws-cdk=2.113.0,@aws-cdk/assets=1.42.0,@aws-cdk/aws-applicationautoscaling=1.42.0,@aws-cdk/aws-autoscaling=1.42.0,@aws-cdk/aws-autoscaling-common=1.42.0,@aws-cdk/aws-autoscaling-hooktargets=1.42.0,@aws-cdk/aws-cloudwatch=1.42.0,@aws-cdk/aws-ec2=1.42.0,@aws-cdk/aws-ecr=1.42.0,@aws-cdk/aws-ecr-assets=1.42.0,@aws-cdk/aws-ecs=1.42.0,@aws-cdk/aws-elasticloadbalancingv2=1.42.0,@aws-cdk/aws-events=1.42.0,@aws-cdk/aws-iam=1.42.0,@aws-cdk/aws-kms=1.42.0,@aws-cdk/aws-lambda=1.42.0,@aws-cdk/aws-logs=1.42.0,@aws-cdk/aws-s3=1.42.0,@aws-cdk/aws-s3-assets=1.42.0,@aws-cdk/aws-servicediscovery=1.42.0,@aws-cdk/aws-sns=1.42.0,@aws-cdk/aws-sns-subscriptions=1.42.0,@aws-cdk/aws-sqs=1.42.0,@aws-cdk/aws-ssm=1.42.0,@aws-cdk/cdk-assets-schema=1.42.0,@aws-cdk/cloud-assembly-schema=1.42.0,@aws-cdk/core=1.42.0,@aws-cdk/custom-resources=1.42.0,@aws-cdk/cx-api=1.42.0,@aws-cdk/region-info=1.42.0,jsii-runtime=node.js/v18.12.1
Outputs:
  PublicUrl:
    Value:
      Fn::Join:
        - ""
        - - http://
          - Fn::GetAtt:
              - PublicLB1718C38E
              - DNSName
    Export:
      Name: PublicLbDnsName
  InternalUrl:
    Value:
      Fn::Join:
        - ""
        - - http://
          - Fn::GetAtt:
              - InternalLBA2E125EF
              - DNSName
    Export:
      Name: InternalLbDnsName

