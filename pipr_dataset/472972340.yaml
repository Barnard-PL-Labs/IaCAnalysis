Resources:
  s3kmsEA7562EB:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Statement:
          - Action: kms:*
            Effect: Allow
            Principal:
              AWS:
                Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":iam::"
                    - Ref: AWS::AccountId
                    - :root
            Resource: "*"
        Version: "2012-10-17"
      EnableKeyRotation: true
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: AwsCdkS3EncryptionStack/s3kms/Resource
  kmsKeyAliasE1709DC4:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/s3DefaultCmk
      TargetKeyId:
        Fn::GetAtt:
          - s3kmsEA7562EB
          - Arn
    Metadata:
      aws:cdk:path: AwsCdkS3EncryptionStack/kmsKeyAlias/Resource
  enableS3EncryptionfunctionServiceRole960A671B:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: AwsCdkS3EncryptionStack/enableS3Encryption-function/ServiceRole/Resource
  enableS3EncryptionfunctionServiceRoleDefaultPolicy92FCE0AC:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:ListBucket
              - s3:PutEncryptionConfiguration
              - s3:GetEncryptionConfiguration
            Effect: Allow
            Resource:
              - arn:aws:s3:::*
              - arn:aws:s3:::*/*
          - Action: s3:ListAllMyBuckets
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: enableS3EncryptionfunctionServiceRoleDefaultPolicy92FCE0AC
      Roles:
        - Ref: enableS3EncryptionfunctionServiceRole960A671B
    Metadata:
      aws:cdk:path: AwsCdkS3EncryptionStack/enableS3Encryption-function/ServiceRole/DefaultPolicy/Resource
  enableS3Encryptionfunction5B022E28:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: c25101c7001f9d3ced3d9c324e9e86d2efd7d978a9cdb16f4f5a7a2a03cda451.zip
      Role:
        Fn::GetAtt:
          - enableS3EncryptionfunctionServiceRole960A671B
          - Arn
      Environment:
        Variables:
          KMS_ENCRYPTION_KEY:
            Fn::GetAtt:
              - s3kmsEA7562EB
              - Arn
      FunctionName: Enable-S3-Bucket-Encryption
      Handler: enables3encryptionfunction.on_event
      Runtime: python3.9
      Timeout: 300
    DependsOn:
      - enableS3EncryptionfunctionServiceRoleDefaultPolicy92FCE0AC
      - enableS3EncryptionfunctionServiceRole960A671B
    Metadata:
      aws:cdk:path: AwsCdkS3EncryptionStack/enableS3Encryption-function/Resource
      aws:asset:path: asset.c25101c7001f9d3ced3d9c324e9e86d2efd7d978a9cdb16f4f5a7a2a03cda451
      aws:asset:is-bundled: false
      aws:asset:property: Code
  s3EncryptionLambaCustomResourceframeworkonEventServiceRole32C032E6:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: AwsCdkS3EncryptionStack/s3EncryptionLambaCustomResource/framework-onEvent/ServiceRole/Resource
  s3EncryptionLambaCustomResourceframeworkonEventServiceRoleDefaultPolicy41B2F3BB:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: lambda:InvokeFunction
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - enableS3Encryptionfunction5B022E28
                - Arn
        Version: "2012-10-17"
      PolicyName: s3EncryptionLambaCustomResourceframeworkonEventServiceRoleDefaultPolicy41B2F3BB
      Roles:
        - Ref: s3EncryptionLambaCustomResourceframeworkonEventServiceRole32C032E6
    Metadata:
      aws:cdk:path: AwsCdkS3EncryptionStack/s3EncryptionLambaCustomResource/framework-onEvent/ServiceRole/DefaultPolicy/Resource
  s3EncryptionLambaCustomResourceframeworkonEvent2EEDC78F:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 885e74c18034f7d2833ec7129bb76a442e75d84f9c21ce7990bbb3aea67ab779.zip
      Role:
        Fn::GetAtt:
          - s3EncryptionLambaCustomResourceframeworkonEventServiceRole32C032E6
          - Arn
      Description: AWS CDK resource provider framework - onEvent (AwsCdkS3EncryptionStack/s3EncryptionLambaCustomResource)
      Environment:
        Variables:
          USER_ON_EVENT_FUNCTION_ARN:
            Fn::GetAtt:
              - enableS3Encryptionfunction5B022E28
              - Arn
      Handler: framework.onEvent
      Runtime: nodejs12.x
      Timeout: 900
    DependsOn:
      - s3EncryptionLambaCustomResourceframeworkonEventServiceRoleDefaultPolicy41B2F3BB
      - s3EncryptionLambaCustomResourceframeworkonEventServiceRole32C032E6
    Metadata:
      aws:cdk:path: AwsCdkS3EncryptionStack/s3EncryptionLambaCustomResource/framework-onEvent/Resource
      aws:asset:path: asset.885e74c18034f7d2833ec7129bb76a442e75d84f9c21ce7990bbb3aea67ab779
      aws:asset:is-bundled: false
      aws:asset:property: Code
  s3EncryptionLambaCustomResourceframeworkonEventLogRetention054A8E0C:
    Type: Custom::LogRetention
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A
          - Arn
      LogGroupName:
        Fn::Join:
          - ""
          - - /aws/lambda/
            - Ref: s3EncryptionLambaCustomResourceframeworkonEvent2EEDC78F
      RetentionInDays: 1
    Metadata:
      aws:cdk:path: AwsCdkS3EncryptionStack/s3EncryptionLambaCustomResource/framework-onEvent/LogRetention/Resource
  LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: AwsCdkS3EncryptionStack/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/ServiceRole/Resource
  LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:PutRetentionPolicy
              - logs:DeleteRetentionPolicy
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB
      Roles:
        - Ref: LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB
    Metadata:
      aws:cdk:path: AwsCdkS3EncryptionStack/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/ServiceRole/DefaultPolicy/Resource
  LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs14.x
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 558dc75fbdc793c8e2f64f85d2d7ed2cb820c727ec7e9b08666ad1af0103992e.zip
      Role:
        Fn::GetAtt:
          - LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB
          - Arn
    DependsOn:
      - LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB
      - LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB
    Metadata:
      aws:cdk:path: AwsCdkS3EncryptionStack/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/Resource
      aws:asset:path: asset.558dc75fbdc793c8e2f64f85d2d7ed2cb820c727ec7e9b08666ad1af0103992e
      aws:asset:is-bundled: false
      aws:asset:property: Code
  Invokes3encryptionfunction:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - s3EncryptionLambaCustomResourceframeworkonEvent2EEDC78F
          - Arn
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: AwsCdkS3EncryptionStack/Invokes3encryptionfunction/Default
  enables3encryptionfornewbucketsF117684D:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventName:
            - CreateBucket
          eventSource:
            - s3.amazonaws.com
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - enableS3Encryptionfunction5B022E28
              - Arn
          Id: Target0
    Metadata:
      aws:cdk:path: AwsCdkS3EncryptionStack/enables3encryptionfornewbuckets/Resource
  enables3encryptionfornewbucketsAllowEventRuleAwsCdkS3EncryptionStackenableS3Encryptionfunction314A556EDE7EDC64:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - enableS3Encryptionfunction5B022E28
          - Arn
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - enables3encryptionfornewbucketsF117684D
          - Arn
    Metadata:
      aws:cdk:path: AwsCdkS3EncryptionStack/enables3encryptionfornewbuckets/AllowEventRuleAwsCdkS3EncryptionStackenableS3Encryptionfunction314A556E
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/02Pu27DMAxFvyW7zNbp0K6JgS7pYDgfYCgSYzDWAxAlB4Xgf6+sBG2ney7f3EP7Dq87eedG6bkxdIF8jlLNooTGPFuGfMJv0V3dJgdDkjdTYRVG2ouWkD+TU5G821L/ucdgibm4VZC0kAdvcEtU7b0hVWc/aBX8NkpmjAyHTYqHY1IzxqNkFMZPDF9+GjCiqytwKVBOHNJzbNF1FbW5vDGRm4RKHL0dA7JPQSFDH/xCGkNteEbFL3S1/M9eXeedplh/cF4j3PhlaT+g3UO7uzFRE1K5xiIMD/0B66Dt61QBAAA=
    Metadata:
      aws:cdk:path: AwsCdkS3EncryptionStack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
Rules:
  CheckBootstrapVersion:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::Contains:
                - - "1"
                  - "2"
                  - "3"
                  - "4"
                  - "5"
                - Ref: BootstrapVersion
        AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.

